Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "terms": {"python": [0, 37, 38, 74, 87, 117, 129, 130, 135, 137, 151, 152, 154, 170, 213, 219, 243, 244, 263, 294, 308, 385, 390, 394, 451, 529, 530, 633, 698, 711, 712, 714, 715, 757, 758, 760, 770, 776, 797, 864, 876, 956, 960, 970, 971, 972, 976, 1094, 1163, 1213, 1233, 1257], "api": [0, 117, 149, 170, 219, 294, 308, 530, 732, 770, 864, 1094, 1233, 1257], "refer": [0, 36, 87, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 178, 181, 308, 311, 312, 385, 418, 421, 578, 631, 643, 644, 657, 659, 660, 664, 770, 797, 876, 988, 991, 1114, 1173, 1174, 1187, 1189, 1190, 1194, 1233, 1237], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 72, 88, 91, 92, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 152, 153, 156, 157, 168, 306, 307, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 766, 770, 782, 791, 792, 794, 796, 798, 800, 802, 803, 807, 810, 814, 815, 816, 817, 819, 823, 824, 828, 831, 833, 840, 842, 847, 848, 849, 851, 854, 857, 858, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 882, 950, 951, 985, 1009, 1028, 1094, 1112, 1168, 1179, 1180, 1203, 1209, 1210, 1222, 1233, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1258, 1261], "lazyfram": [0, 1, 47, 48, 49, 50, 51, 53, 54, 55, 143, 144, 145, 146, 147, 148, 149, 152, 153, 159, 176, 217, 233, 234, 256, 308, 447, 521, 749, 770, 782, 875, 882, 1241, 1242, 1245, 1247, 1258, 1259, 1261], "seri": [0, 1, 11, 25, 46, 48, 49, 50, 51, 55, 56, 65, 76, 84, 85, 93, 116, 118, 121, 123, 152, 154, 155, 159, 183, 192, 194, 196, 198, 201, 202, 205, 206, 208, 210, 212, 221, 223, 228, 239, 241, 245, 259, 262, 265, 267, 269, 270, 288, 308, 323, 334, 357, 361, 369, 371, 415, 444, 447, 450, 454, 455, 464, 469, 471, 472, 474, 475, 476, 477, 488, 494, 496, 521, 527, 529, 530, 578, 579, 580, 581, 582, 587, 588, 599, 610, 612, 635, 657, 658, 659, 660, 664, 668, 678, 683, 693, 697, 706, 707, 711, 712, 714, 715, 720, 722, 726, 727, 730, 731, 732, 742, 744, 745, 748, 749, 752, 757, 758, 761, 770, 782, 806, 810, 832, 858, 876, 880, 1225, 1227, 1229, 1232, 1234, 1237, 1238, 1239, 1240, 1242, 1244, 1258, 1261], "express": [0, 8, 42, 43, 44, 45, 53, 54, 156, 159, 163, 172, 188, 190, 192, 200, 215, 216, 219, 230, 234, 242, 247, 248, 252, 255, 266, 271, 272, 282, 283, 285, 287, 294, 308, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 333, 334, 338, 339, 340, 341, 342, 345, 356, 361, 362, 363, 364, 365, 367, 372, 373, 374, 375, 376, 382, 383, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 441, 443, 444, 446, 447, 451, 453, 454, 456, 457, 458, 459, 464, 467, 468, 469, 470, 471, 472, 473, 481, 482, 486, 487, 489, 490, 493, 494, 500, 502, 520, 521, 527, 528, 529, 530, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 547, 549, 551, 552, 554, 556, 558, 559, 562, 563, 565, 567, 568, 572, 573, 574, 575, 577, 581, 582, 583, 585, 586, 608, 609, 610, 613, 615, 616, 618, 620, 623, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 647, 648, 649, 650, 658, 662, 671, 672, 675, 676, 679, 680, 681, 683, 684, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 726, 727, 728, 729, 730, 731, 732, 734, 736, 739, 742, 744, 745, 746, 747, 748, 750, 752, 754, 756, 757, 758, 760, 761, 766, 769, 782, 786, 791, 792, 801, 802, 803, 806, 809, 814, 815, 828, 834, 835, 838, 839, 841, 846, 852, 853, 854, 856, 857, 864, 876, 880, 882, 905, 939, 949, 956, 959, 960, 974, 1009, 1015, 1032, 1056, 1059, 1094, 1118, 1137, 1141, 1154, 1156, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1173, 1174, 1188, 1192, 1233, 1250, 1251, 1253, 1254, 1257], "selector": [0, 36, 173, 182, 184, 188, 225, 232, 234, 264, 266, 271, 274, 276, 308, 312, 441, 447, 536, 770, 782, 788, 798, 799, 802, 823, 847, 876], "function": [0, 36, 37, 38, 46, 47, 48, 49, 50, 51, 54, 63, 65, 84, 85, 114, 117, 121, 123, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 152, 153, 154, 155, 157, 166, 168, 170, 172, 178, 181, 187, 194, 219, 225, 233, 234, 238, 256, 261, 266, 267, 268, 271, 272, 273, 276, 277, 294, 308, 312, 320, 357, 366, 367, 382, 383, 385, 416, 437, 439, 440, 462, 521, 529, 530, 542, 552, 553, 568, 572, 575, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 617, 677, 678, 679, 688, 692, 703, 705, 706, 707, 719, 720, 722, 724, 725, 728, 731, 732, 735, 737, 740, 742, 744, 746, 747, 751, 755, 759, 761, 766, 770, 782, 786, 792, 797, 803, 819, 823, 827, 830, 836, 842, 846, 849, 856, 864, 876, 880, 921, 929, 934, 949, 950, 986, 1007, 1008, 1010, 1011, 1028, 1087, 1094, 1112, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1138, 1143, 1148, 1212, 1215, 1217, 1218, 1233, 1248, 1250, 1251, 1255, 1257, 1258, 1259, 1260, 1261], "data": [0, 1, 10, 18, 19, 21, 28, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 60, 61, 62, 64, 73, 74, 76, 77, 85, 87, 91, 93, 96, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 170, 175, 176, 185, 188, 189, 199, 200, 201, 213, 214, 215, 217, 219, 232, 233, 237, 242, 243, 244, 246, 250, 253, 261, 266, 267, 268, 271, 273, 282, 286, 306, 308, 312, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 336, 337, 338, 339, 340, 342, 345, 347, 348, 349, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 368, 369, 372, 373, 374, 375, 376, 383, 384, 385, 390, 391, 392, 393, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 443, 454, 456, 457, 458, 462, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 482, 486, 487, 489, 494, 500, 502, 509, 520, 522, 528, 530, 562, 563, 567, 568, 575, 577, 578, 581, 582, 583, 585, 586, 606, 608, 610, 615, 616, 617, 623, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 647, 648, 649, 650, 657, 658, 659, 660, 662, 664, 667, 675, 676, 677, 680, 681, 684, 687, 693, 703, 710, 711, 712, 713, 714, 715, 716, 726, 727, 729, 730, 731, 732, 742, 745, 756, 757, 758, 761, 766, 770, 782, 789, 790, 791, 792, 797, 800, 802, 803, 809, 810, 833, 837, 852, 876, 881, 886, 887, 898, 900, 901, 902, 903, 904, 906, 908, 909, 920, 922, 924, 925, 926, 930, 931, 938, 939, 940, 950, 951, 956, 957, 958, 959, 962, 963, 964, 965, 967, 968, 969, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1009, 1013, 1014, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1050, 1051, 1052, 1053, 1055, 1060, 1066, 1068, 1075, 1086, 1088, 1094, 1106, 1112, 1114, 1118, 1119, 1121, 1122, 1133, 1135, 1143, 1148, 1153, 1154, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1177, 1178, 1179, 1180, 1187, 1188, 1189, 1190, 1192, 1194, 1197, 1213, 1214, 1215, 1216, 1219, 1232, 1233, 1241, 1248, 1254, 1258, 1260], "type": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 116, 118, 119, 120, 121, 122, 124, 129, 130, 131, 133, 134, 138, 139, 140, 141, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 176, 185, 188, 194, 199, 201, 202, 214, 215, 219, 241, 246, 261, 266, 267, 270, 271, 274, 285, 308, 320, 322, 325, 326, 327, 328, 329, 330, 333, 338, 339, 340, 342, 345, 356, 357, 361, 362, 363, 364, 365, 368, 369, 372, 373, 374, 375, 376, 383, 384, 390, 391, 393, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 441, 443, 454, 457, 460, 467, 468, 469, 470, 471, 472, 473, 482, 486, 487, 489, 494, 500, 502, 520, 521, 529, 530, 575, 577, 581, 582, 583, 585, 586, 587, 615, 616, 623, 626, 627, 628, 630, 631, 632, 633, 635, 636, 638, 639, 640, 647, 648, 649, 650, 657, 658, 662, 675, 676, 677, 684, 693, 703, 710, 711, 712, 713, 714, 715, 716, 718, 726, 727, 729, 730, 731, 732, 742, 745, 756, 757, 758, 761, 766, 770, 782, 791, 792, 800, 801, 802, 803, 810, 814, 828, 832, 833, 839, 847, 856, 876, 881, 886, 887, 898, 900, 901, 902, 903, 904, 906, 908, 909, 920, 921, 922, 924, 925, 926, 930, 931, 939, 950, 951, 956, 957, 959, 961, 962, 963, 964, 965, 967, 968, 969, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1009, 1013, 1026, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1050, 1051, 1052, 1053, 1055, 1060, 1066, 1068, 1086, 1087, 1106, 1112, 1118, 1119, 1121, 1122, 1143, 1153, 1154, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1165, 1166, 1168, 1169, 1170, 1177, 1178, 1179, 1180, 1187, 1188, 1192, 1213, 1214, 1216, 1224, 1233, 1241, 1248, 1255, 1258], "schema": [0, 1, 14, 28, 31, 34, 35, 48, 49, 50, 55, 91, 108, 109, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 134, 136, 138, 139, 140, 141, 142, 143, 147, 148, 174, 175, 176, 182, 185, 187, 214, 219, 226, 230, 267, 271, 308, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 397, 520, 521, 539, 553, 555, 557, 637, 687, 752, 770, 782, 789, 790, 793, 794, 798, 800, 819, 824, 836, 851, 864, 876, 882, 940, 1167, 1233, 1241], "input": [0, 47, 53, 91, 119, 121, 129, 130, 172, 182, 200, 219, 223, 232, 238, 247, 248, 252, 255, 259, 272, 282, 283, 287, 308, 317, 367, 372, 438, 441, 453, 467, 525, 529, 530, 540, 568, 582, 620, 635, 647, 653, 654, 655, 656, 658, 660, 671, 679, 687, 689, 691, 693, 696, 699, 700, 701, 709, 716, 718, 726, 727, 730, 731, 732, 734, 736, 739, 748, 752, 754, 760, 766, 770, 782, 786, 798, 809, 830, 834, 835, 836, 838, 841, 846, 852, 853, 857, 876, 880, 939, 1009, 1032, 1091, 1092, 1094, 1118, 1141, 1165, 1177, 1188, 1190, 1233, 1253, 1254, 1256], "output": [0, 8, 30, 33, 36, 37, 38, 39, 40, 42, 172, 180, 213, 219, 223, 226, 232, 234, 243, 247, 249, 259, 272, 278, 282, 308, 320, 322, 345, 366, 367, 383, 500, 521, 529, 530, 539, 542, 552, 575, 623, 636, 640, 678, 679, 684, 688, 689, 690, 691, 701, 702, 731, 732, 770, 782, 786, 796, 801, 819, 823, 824, 834, 836, 846, 852, 864, 876, 886, 887, 909, 929, 950, 1066, 1094, 1112, 1153, 1166, 1170, 1218, 1222, 1233], "config": [0, 47, 180, 247, 266, 282, 308, 625, 645, 712, 715, 716, 782, 791, 796, 834, 852, 876, 1155, 1175], "extend": [0, 119, 280, 308, 444, 770, 782, 880, 888, 1015, 1233], "plugin": [0, 770, 782], "sql": [0, 34, 106, 107, 115, 131, 132, 215, 252, 308, 352, 514, 611, 729, 750, 770, 782, 838, 876, 916, 1080, 1141, 1233, 1241, 1242, 1244, 1246, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1259, 1260], "interfac": [0, 106, 107, 782, 1258], "except": [0, 152, 182, 203, 216, 218, 260, 308, 368, 635, 658, 718, 770, 782, 798, 815, 876, 882, 930, 1027, 1049, 1165, 1188, 1205, 1214, 1233, 1257], "test": [0, 34, 131, 132, 134, 140, 308, 782, 811, 818, 876], "metadata": [0, 145, 782], "These": [1, 36, 125, 131, 132, 168, 273, 308, 429, 769, 770, 880, 986, 999], "allow": [1, 8, 35, 36, 42, 43, 44, 45, 46, 85, 93, 117, 131, 134, 143, 146, 147, 148, 149, 156, 159, 160, 163, 170, 213, 216, 217, 242, 243, 245, 267, 268, 271, 274, 286, 308, 412, 418, 421, 509, 529, 530, 536, 580, 608, 657, 659, 660, 770, 814, 815, 819, 823, 847, 854, 876, 880, 882, 982, 988, 991, 1075, 1094, 1116, 1135, 1187, 1189, 1190, 1214, 1215, 1233, 1261], "you": [1, 10, 14, 36, 41, 45, 47, 54, 55, 116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 135, 138, 139, 143, 147, 149, 168, 172, 189, 201, 212, 213, 219, 230, 234, 241, 242, 243, 244, 256, 263, 266, 272, 273, 294, 308, 311, 366, 367, 390, 409, 410, 412, 415, 418, 421, 441, 447, 467, 493, 521, 529, 530, 573, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 625, 639, 643, 644, 645, 668, 678, 679, 698, 706, 716, 720, 732, 742, 745, 749, 761, 770, 786, 792, 799, 810, 811, 818, 832, 839, 842, 846, 864, 876, 880, 882, 929, 956, 979, 980, 985, 988, 991, 1014, 1032, 1059, 1094, 1116, 1155, 1169, 1173, 1174, 1175, 1212, 1218, 1233, 1237, 1242, 1247, 1261], "regist": [1, 48, 49, 50, 51, 162, 164, 256, 308, 770, 842, 876, 880, 1241, 1242, 1244, 1245, 1246, 1247, 1258, 1260], "custom": [1, 27, 35, 36, 48, 49, 50, 51, 90, 162, 164, 180, 219, 234, 294, 308, 357, 390, 418, 421, 521, 529, 530, 588, 684, 698, 731, 732, 770, 796, 819, 864, 876, 921, 956, 988, 991, 1087, 1094, 1123, 1222, 1233, 1261], "dedic": [1, 117, 213, 243, 308, 882, 1258], "namespac": [1, 131, 307, 308, 668, 749, 769, 782, 875, 1233, 1261], "underli": [1, 46, 61, 62, 64, 77, 85, 89, 99, 116, 118, 119, 120, 122, 131, 132, 134, 138, 139, 141, 147, 156, 159, 163, 188, 189, 213, 214, 243, 261, 267, 308, 362, 392, 393, 394, 398, 401, 402, 403, 404, 405, 406, 407, 408, 411, 413, 414, 415, 417, 430, 431, 432, 433, 580, 606, 624, 627, 634, 770, 802, 876, 882, 925, 933, 958, 959, 960, 964, 967, 968, 969, 973, 974, 975, 977, 978, 981, 983, 984, 985, 987, 1000, 1001, 1002, 1003, 1014, 1116, 1133, 1143, 1154, 1157, 1164, 1208, 1214, 1233, 1258], "polar": [1, 308, 311, 312, 769, 770, 776, 782, 876, 880, 881, 882, 1233, 1237, 1257, 1258, 1260], "class": [1, 17, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 102, 104, 156, 157, 244, 308, 757, 766, 770, 776, 782, 794, 800, 833, 851, 876, 881, 1213, 1233, 1244, 1258], "without": [1, 37, 38, 42, 43, 44, 45, 52, 53, 54, 63, 65, 91, 94, 123, 126, 133, 136, 141, 142, 144, 145, 148, 149, 256, 261, 266, 267, 271, 276, 277, 308, 312, 382, 383, 416, 462, 530, 575, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 625, 645, 703, 746, 747, 748, 770, 791, 792, 842, 849, 876, 932, 934, 949, 950, 986, 1028, 1112, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1155, 1175, 1212, 1214, 1217, 1233, 1260], "requir": [1, 35, 36, 47, 121, 131, 132, 152, 153, 154, 155, 178, 242, 266, 267, 268, 271, 308, 358, 437, 439, 440, 522, 530, 568, 612, 657, 659, 660, 681, 745, 770, 794, 800, 841, 851, 876, 922, 1006, 1008, 1010, 1011, 1088, 1142, 1187, 1189, 1190, 1214, 1215, 1219, 1233, 1237], "subclass": [1, 308], "mixin": 1, "expr": [1, 47, 48, 49, 50, 51, 188, 190, 191, 215, 216, 230, 234, 242, 247, 248, 266, 271, 282, 283, 308, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 766, 770, 771, 772, 775, 776, 777, 778, 779, 802, 804, 805, 814, 815, 829, 834, 835, 852, 853, 876, 880, 882, 949, 956, 959, 960, 974, 982, 999, 1009, 1016, 1017, 1021, 1059, 1065, 1081, 1085, 1154, 1159, 1164, 1181, 1233], "ar": [1, 10, 11, 17, 20, 30, 33, 35, 36, 42, 43, 44, 45, 46, 47, 54, 55, 84, 85, 91, 97, 113, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 159, 160, 161, 163, 168, 170, 172, 178, 180, 184, 187, 190, 192, 193, 194, 199, 200, 201, 213, 215, 216, 217, 219, 225, 226, 232, 234, 241, 242, 243, 244, 247, 248, 250, 252, 255, 262, 266, 267, 268, 271, 272, 277, 278, 282, 283, 286, 287, 308, 320, 322, 336, 352, 357, 366, 367, 372, 378, 380, 381, 390, 416, 429, 434, 436, 437, 438, 439, 440, 445, 447, 467, 469, 471, 472, 474, 475, 476, 477, 479, 484, 514, 521, 529, 563, 568, 575, 578, 581, 582, 583, 587, 590, 592, 594, 596, 598, 599, 601, 603, 605, 611, 614, 617, 619, 620, 633, 635, 637, 638, 641, 642, 643, 644, 647, 658, 660, 662, 667, 671, 673, 678, 679, 688, 689, 691, 696, 699, 700, 701, 702, 705, 709, 711, 712, 714, 715, 734, 736, 739, 748, 752, 754, 757, 758, 760, 762, 763, 765, 769, 770, 771, 772, 775, 776, 777, 778, 779, 782, 786, 791, 792, 796, 799, 803, 804, 806, 809, 810, 811, 814, 815, 818, 819, 823, 824, 828, 830, 832, 834, 835, 837, 838, 841, 846, 849, 852, 853, 854, 857, 876, 880, 882, 886, 887, 900, 916, 921, 929, 932, 939, 947, 948, 956, 986, 999, 1005, 1007, 1008, 1009, 1010, 1011, 1016, 1018, 1019, 1025, 1032, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1047, 1050, 1080, 1087, 1112, 1114, 1118, 1119, 1129, 1141, 1145, 1148, 1163, 1165, 1167, 1171, 1172, 1173, 1174, 1177, 1188, 1190, 1192, 1197, 1204, 1212, 1214, 1215, 1218, 1225, 1227, 1229, 1233, 1234, 1238, 1239, 1240, 1242, 1244, 1247, 1251, 1258, 1261], "all": [1, 4, 8, 13, 17, 20, 25, 30, 33, 35, 36, 41, 42, 45, 47, 53, 60, 102, 104, 116, 121, 126, 129, 130, 133, 134, 135, 137, 140, 141, 143, 146, 147, 156, 157, 160, 163, 168, 171, 173, 180, 182, 184, 191, 203, 208, 210, 212, 213, 214, 215, 217, 218, 223, 225, 229, 230, 234, 237, 242, 243, 244, 248, 254, 255, 259, 260, 264, 266, 267, 271, 274, 276, 277, 278, 283, 285, 308, 321, 323, 345, 360, 367, 376, 382, 388, 389, 390, 391, 441, 446, 452, 459, 460, 463, 465, 469, 472, 476, 477, 482, 492, 493, 500, 518, 521, 529, 548, 551, 552, 554, 555, 556, 557, 558, 559, 566, 578, 582, 584, 588, 612, 618, 620, 626, 632, 633, 635, 638, 644, 652, 653, 654, 658, 679, 689, 698, 706, 707, 708, 709, 718, 720, 725, 726, 729, 736, 744, 752, 753, 754, 760, 766, 770, 776, 782, 785, 788, 791, 792, 796, 798, 799, 801, 803, 805, 814, 819, 823, 828, 835, 839, 840, 841, 847, 849, 853, 854, 856, 876, 882, 909, 949, 951, 954, 955, 956, 957, 1027, 1033, 1045, 1049, 1058, 1059, 1066, 1084, 1087, 1114, 1118, 1123, 1149, 1156, 1162, 1163, 1165, 1168, 1174, 1182, 1183, 1184, 1188, 1205, 1214, 1233, 1242, 1244, 1249, 1250, 1254, 1257, 1258, 1260, 1261], "support": [1, 34, 35, 36, 41, 55, 116, 117, 118, 119, 120, 121, 122, 123, 131, 132, 133, 134, 138, 139, 140, 141, 143, 144, 145, 148, 156, 160, 163, 168, 213, 214, 215, 216, 243, 244, 254, 255, 263, 268, 271, 308, 438, 515, 568, 582, 618, 620, 635, 643, 644, 645, 647, 658, 766, 770, 776, 814, 815, 840, 841, 876, 882, 1009, 1081, 1118, 1149, 1165, 1173, 1174, 1175, 1177, 1188, 1215, 1217, 1233, 1250, 1255, 1257, 1258], "target": [1, 34, 35, 36, 52, 134, 271, 308, 631, 657, 659, 660, 882, 1161, 1187, 1189, 1190, 1254], "thi": [1, 4, 10, 12, 14, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 91, 116, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 166, 168, 170, 171, 172, 175, 176, 178, 180, 184, 187, 189, 193, 194, 199, 200, 201, 202, 206, 208, 210, 211, 212, 213, 215, 216, 217, 219, 220, 222, 224, 225, 226, 227, 229, 230, 232, 235, 236, 237, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 254, 256, 257, 258, 261, 263, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 289, 294, 307, 308, 312, 320, 323, 324, 333, 345, 351, 352, 353, 358, 366, 367, 369, 372, 382, 383, 385, 391, 392, 403, 409, 410, 412, 415, 416, 418, 421, 432, 436, 443, 453, 460, 462, 464, 465, 467, 471, 493, 494, 500, 509, 510, 511, 512, 513, 514, 516, 521, 522, 526, 527, 529, 530, 534, 535, 536, 537, 538, 539, 540, 542, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 568, 575, 578, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 610, 611, 612, 613, 618, 619, 620, 623, 625, 631, 636, 637, 641, 642, 645, 652, 653, 654, 655, 656, 661, 667, 669, 671, 678, 679, 681, 682, 683, 684, 688, 692, 700, 703, 705, 706, 719, 720, 722, 724, 725, 728, 729, 732, 735, 737, 740, 742, 746, 747, 748, 751, 755, 759, 760, 761, 766, 770, 782, 785, 786, 787, 790, 791, 792, 793, 794, 796, 797, 799, 800, 801, 803, 809, 810, 812, 814, 815, 819, 823, 824, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 849, 851, 852, 853, 854, 855, 856, 859, 864, 875, 876, 880, 882, 888, 897, 909, 915, 916, 917, 922, 929, 931, 933, 934, 939, 940, 949, 950, 957, 958, 960, 969, 979, 980, 982, 985, 986, 988, 991, 1002, 1004, 1007, 1013, 1014, 1022, 1023, 1026, 1028, 1037, 1046, 1059, 1060, 1066, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1088, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1107, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1149, 1150, 1152, 1153, 1155, 1161, 1166, 1167, 1171, 1172, 1175, 1182, 1183, 1184, 1191, 1197, 1198, 1200, 1203, 1204, 1208, 1210, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1221, 1222, 1223, 1233, 1237, 1241, 1242, 1243, 1247, 1257, 1258, 1259, 1261], "featur": [1, 41, 52, 63, 65, 266, 271, 308], "i": [1, 12, 14, 17, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 61, 62, 63, 64, 65, 77, 85, 88, 90, 91, 92, 93, 94, 95, 97, 98, 103, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 165, 167, 168, 171, 172, 175, 176, 180, 184, 186, 187, 189, 192, 200, 201, 202, 203, 206, 207, 211, 213, 214, 215, 216, 217, 218, 219, 225, 226, 230, 232, 233, 234, 239, 241, 242, 243, 244, 245, 248, 249, 250, 252, 254, 255, 256, 257, 260, 261, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 279, 283, 285, 286, 294, 307, 308, 312, 317, 320, 322, 323, 324, 334, 337, 344, 345, 352, 357, 366, 367, 382, 383, 388, 389, 390, 391, 394, 402, 409, 410, 412, 416, 418, 429, 437, 438, 439, 440, 443, 447, 451, 460, 462, 464, 467, 479, 485, 492, 493, 496, 498, 500, 509, 514, 515, 517, 521, 523, 526, 529, 530, 534, 536, 538, 539, 540, 542, 550, 568, 573, 575, 578, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 613, 614, 617, 618, 619, 620, 622, 623, 624, 625, 626, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 650, 652, 653, 654, 657, 658, 659, 660, 662, 664, 667, 671, 678, 679, 684, 685, 688, 689, 690, 691, 692, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 711, 712, 714, 715, 720, 724, 725, 726, 727, 729, 730, 732, 735, 737, 740, 742, 745, 746, 747, 748, 749, 751, 755, 757, 758, 759, 760, 761, 766, 770, 785, 786, 787, 790, 791, 792, 794, 796, 799, 800, 801, 803, 806, 809, 810, 813, 814, 815, 817, 819, 823, 824, 828, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 849, 850, 851, 853, 856, 864, 876, 880, 882, 886, 887, 888, 901, 908, 909, 916, 921, 929, 932, 934, 939, 940, 949, 950, 951, 954, 955, 956, 957, 960, 968, 982, 986, 988, 999, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1018, 1025, 1026, 1027, 1028, 1032, 1034, 1044, 1046, 1047, 1049, 1051, 1058, 1059, 1062, 1064, 1066, 1075, 1080, 1081, 1087, 1094, 1112, 1114, 1116, 1118, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1137, 1138, 1139, 1141, 1144, 1145, 1148, 1149, 1152, 1153, 1154, 1155, 1156, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1180, 1182, 1183, 1184, 1187, 1188, 1189, 1190, 1192, 1194, 1197, 1205, 1208, 1212, 1214, 1215, 1217, 1218, 1222, 1223, 1233, 1241, 1242, 1247, 1251, 1254, 1255, 1258, 1259, 1261], "primarili": 1, "intend": [1, 134, 152, 153, 154, 155, 667, 1197], "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 35, 36, 41, 42, 45, 46, 47, 53, 54, 55, 62, 76, 84, 85, 87, 91, 114, 117, 119, 120, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 137, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 171, 172, 173, 176, 180, 182, 184, 190, 191, 192, 194, 200, 201, 208, 210, 212, 213, 214, 216, 219, 225, 229, 230, 232, 233, 234, 241, 242, 243, 244, 245, 247, 248, 250, 255, 256, 257, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 276, 277, 278, 279, 282, 283, 284, 285, 287, 294, 308, 311, 318, 320, 322, 324, 333, 334, 357, 362, 363, 367, 382, 385, 388, 389, 397, 415, 416, 418, 421, 429, 432, 434, 437, 438, 439, 440, 441, 445, 446, 447, 451, 462, 465, 466, 467, 479, 493, 509, 517, 521, 523, 529, 530, 533, 551, 554, 556, 558, 559, 568, 575, 578, 580, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 608, 610, 612, 617, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 634, 639, 640, 643, 644, 645, 647, 649, 651, 653, 654, 655, 656, 657, 659, 660, 664, 667, 668, 671, 679, 685, 686, 688, 689, 690, 691, 692, 695, 696, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 720, 722, 726, 727, 729, 730, 732, 733, 734, 736, 738, 739, 742, 745, 746, 747, 748, 749, 751, 752, 753, 754, 757, 758, 759, 760, 761, 766, 769, 770, 781, 782, 785, 786, 787, 788, 791, 792, 794, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 815, 817, 818, 823, 832, 833, 834, 835, 837, 841, 842, 843, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 864, 876, 881, 882, 886, 887, 917, 921, 925, 926, 934, 949, 951, 954, 955, 963, 971, 972, 985, 986, 988, 991, 999, 1002, 1005, 1008, 1009, 1010, 1011, 1016, 1017, 1021, 1025, 1028, 1030, 1031, 1032, 1047, 1059, 1075, 1082, 1087, 1094, 1112, 1114, 1116, 1119, 1121, 1122, 1123, 1135, 1136, 1138, 1139, 1142, 1148, 1150, 1152, 1153, 1154, 1155, 1157, 1158, 1160, 1161, 1162, 1164, 1169, 1170, 1173, 1174, 1175, 1177, 1179, 1187, 1189, 1190, 1194, 1197, 1209, 1211, 1214, 1215, 1223, 1233, 1237, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1258, 1261], "librari": [1, 99, 131, 134, 529, 770, 880, 1261], "author": 1, "domain": [1, 632, 1162], "specif": [1, 30, 35, 36, 87, 116, 118, 120, 122, 129, 132, 133, 134, 138, 139, 140, 144, 173, 213, 215, 216, 266, 308, 418, 421, 657, 659, 660, 664, 684, 770, 788, 814, 815, 876, 881, 882, 988, 991, 1187, 1189, 1190, 1194, 1212, 1222, 1233, 1248, 1258, 1261], "capabl": [1, 36, 308], "which": [1, 6, 10, 20, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 119, 121, 129, 130, 131, 132, 133, 134, 140, 141, 143, 144, 145, 146, 148, 159, 162, 164, 172, 173, 180, 184, 189, 190, 200, 201, 206, 216, 241, 249, 266, 267, 272, 274, 278, 308, 320, 357, 390, 412, 416, 418, 429, 438, 444, 467, 469, 472, 474, 475, 476, 477, 521, 529, 530, 540, 542, 587, 590, 592, 594, 596, 598, 601, 603, 605, 662, 698, 711, 712, 714, 715, 716, 757, 758, 760, 770, 786, 788, 794, 796, 799, 800, 801, 810, 815, 832, 836, 846, 847, 851, 876, 882, 921, 956, 982, 986, 988, 999, 1009, 1014, 1015, 1032, 1035, 1038, 1040, 1041, 1042, 1043, 1087, 1138, 1192, 1212, 1214, 1233, 1242, 1248, 1258, 1261], "mai": [1, 35, 37, 38, 42, 43, 44, 45, 53, 54, 55, 63, 65, 116, 118, 119, 120, 122, 126, 129, 130, 131, 133, 135, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 152, 154, 180, 187, 189, 201, 216, 219, 241, 256, 261, 266, 268, 271, 276, 277, 278, 308, 312, 382, 383, 390, 391, 392, 403, 412, 416, 418, 421, 429, 441, 462, 496, 521, 529, 530, 539, 575, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 637, 639, 698, 706, 707, 711, 712, 714, 715, 720, 744, 746, 747, 757, 758, 770, 791, 792, 796, 803, 810, 815, 819, 832, 842, 849, 855, 856, 864, 876, 933, 934, 949, 950, 951, 956, 957, 958, 969, 982, 986, 988, 991, 999, 1007, 1014, 1028, 1062, 1094, 1112, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1167, 1169, 1212, 1215, 1217, 1233, 1261], "exist": [1, 34, 35, 36, 47, 92, 133, 144, 159, 182, 273, 277, 282, 283, 308, 319, 361, 364, 365, 394, 415, 770, 794, 798, 800, 830, 833, 849, 851, 852, 853, 876, 882, 960, 985, 1260], "belong": [1, 201, 308, 810, 876], "core": [1, 308, 1258, 1261], "cannot": [1, 41, 45, 93, 96, 129, 130, 134, 135, 137, 140, 141, 165, 219, 244, 245, 267, 285, 294, 308, 362, 441, 509, 530, 608, 627, 649, 670, 732, 770, 839, 856, 864, 876, 882, 925, 1075, 1094, 1135, 1157, 1179, 1214, 1233], "overrid": [1, 36, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 138, 139, 140, 156, 157, 163, 165, 308, 876], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 62, 65, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 156, 157, 159, 162, 163, 164, 168, 172, 173, 177, 180, 181, 182, 183, 184, 185, 187, 188, 192, 193, 194, 196, 197, 199, 200, 201, 203, 205, 208, 210, 211, 213, 215, 216, 218, 220, 222, 224, 225, 226, 227, 229, 230, 232, 234, 236, 238, 239, 240, 241, 242, 243, 245, 249, 250, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 317, 318, 319, 340, 345, 357, 361, 362, 363, 364, 365, 367, 369, 377, 383, 385, 387, 395, 412, 415, 416, 418, 421, 429, 438, 441, 447, 449, 453, 454, 457, 464, 467, 488, 489, 498, 499, 500, 515, 519, 521, 530, 539, 541, 542, 543, 545, 552, 553, 554, 555, 556, 557, 558, 559, 565, 568, 572, 575, 581, 582, 584, 586, 587, 590, 592, 594, 596, 598, 601, 603, 605, 612, 619, 620, 668, 669, 670, 679, 684, 686, 687, 688, 689, 690, 691, 692, 694, 695, 701, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 766, 770, 777, 786, 788, 791, 792, 794, 796, 797, 798, 799, 801, 802, 803, 806, 809, 810, 812, 814, 815, 823, 824, 827, 828, 830, 831, 832, 836, 837, 839, 840, 841, 842, 846, 847, 848, 849, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 880, 881, 882, 885, 904, 909, 921, 926, 930, 931, 950, 951, 961, 982, 985, 986, 988, 991, 999, 1009, 1017, 1054, 1055, 1066, 1087, 1103, 1104, 1112, 1117, 1118, 1138, 1198, 1200, 1201, 1209, 1210, 1211, 1212, 1222, 1233, 1238, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1254, 1255, 1258, 1259, 1261], "dt": [1, 36, 47, 134, 140, 241, 308, 587, 716, 770, 779, 832, 876, 882, 1240, 1255], "attempt": [1, 385, 770, 797, 876], "do": [1, 36, 42, 43, 44, 45, 47, 53, 54, 118, 119, 122, 129, 143, 152, 153, 154, 155, 180, 189, 212, 215, 216, 234, 261, 273, 276, 308, 382, 390, 493, 529, 652, 653, 654, 742, 745, 761, 770, 787, 791, 792, 796, 801, 815, 819, 828, 839, 876, 882, 949, 956, 1014, 1059, 1182, 1183, 1184, 1217, 1233], "so": [1, 131, 132, 143, 165, 199, 201, 234, 241, 308, 334, 344, 385, 451, 467, 498, 521, 530, 587, 643, 644, 645, 652, 653, 654, 668, 770, 797, 810, 832, 876, 882, 908, 1064, 1173, 1174, 1175, 1182, 1183, 1184], "rais": [1, 15, 16, 20, 35, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 129, 130, 134, 140, 143, 152, 154, 170, 234, 242, 267, 308, 344, 362, 390, 415, 496, 498, 539, 573, 575, 624, 627, 634, 657, 659, 660, 662, 664, 713, 730, 770, 908, 925, 956, 985, 1062, 1064, 1112, 1154, 1157, 1164, 1187, 1189, 1190, 1192, 1194, 1214, 1233], "an": [1, 30, 33, 34, 35, 36, 42, 43, 44, 48, 50, 51, 63, 64, 89, 93, 96, 99, 106, 108, 116, 118, 119, 122, 129, 130, 131, 132, 133, 134, 136, 140, 143, 145, 146, 157, 159, 163, 173, 174, 175, 176, 182, 187, 190, 194, 201, 212, 213, 214, 216, 219, 230, 234, 239, 241, 242, 246, 256, 261, 267, 271, 273, 276, 277, 282, 285, 294, 308, 319, 341, 344, 356, 362, 378, 379, 380, 381, 382, 383, 390, 394, 395, 412, 415, 418, 432, 438, 446, 447, 453, 454, 457, 490, 493, 496, 498, 520, 521, 529, 530, 540, 542, 551, 552, 573, 574, 575, 583, 587, 588, 589, 591, 593, 595, 597, 600, 602, 604, 623, 624, 627, 632, 634, 637, 657, 659, 660, 662, 664, 680, 688, 693, 697, 711, 712, 714, 715, 717, 719, 722, 726, 727, 728, 729, 730, 742, 744, 745, 748, 752, 757, 758, 760, 761, 766, 770, 788, 789, 790, 792, 796, 798, 801, 803, 806, 810, 815, 819, 828, 832, 833, 839, 842, 849, 852, 854, 856, 864, 876, 880, 881, 882, 905, 908, 920, 925, 938, 940, 945, 946, 947, 948, 949, 956, 960, 988, 1002, 1007, 1009, 1046, 1056, 1059, 1062, 1064, 1086, 1094, 1119, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1136, 1138, 1153, 1154, 1157, 1162, 1164, 1167, 1187, 1189, 1190, 1192, 1194, 1214, 1233, 1250, 1251, 1254, 1255, 1257, 1258, 1260], "attributeerror": 1, "howev": [1, 119, 131, 187, 219, 267, 308, 1007, 1233], "can": [1, 14, 27, 36, 41, 46, 47, 53, 54, 61, 62, 64, 76, 84, 85, 119, 129, 130, 131, 134, 135, 140, 141, 143, 146, 148, 149, 157, 158, 159, 163, 165, 168, 172, 174, 184, 185, 194, 200, 201, 208, 210, 212, 219, 230, 234, 241, 243, 244, 247, 250, 255, 266, 267, 271, 272, 273, 276, 282, 285, 294, 308, 311, 320, 357, 367, 378, 381, 382, 385, 390, 409, 410, 412, 415, 418, 421, 429, 438, 444, 447, 467, 493, 521, 529, 530, 536, 539, 542, 548, 551, 552, 554, 556, 558, 559, 568, 573, 575, 580, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 610, 612, 614, 617, 620, 625, 633, 638, 643, 644, 645, 652, 653, 654, 657, 668, 679, 696, 698, 710, 713, 720, 722, 726, 727, 732, 749, 760, 766, 769, 770, 781, 786, 787, 791, 792, 797, 799, 801, 803, 810, 832, 834, 836, 837, 839, 841, 842, 846, 852, 855, 856, 876, 882, 921, 949, 956, 979, 980, 982, 985, 986, 988, 991, 999, 1009, 1015, 1032, 1059, 1087, 1094, 1099, 1112, 1116, 1118, 1136, 1138, 1139, 1142, 1145, 1148, 1155, 1156, 1163, 1168, 1173, 1174, 1175, 1182, 1183, 1184, 1187, 1212, 1214, 1233, 1237, 1247, 1258], "other": [1, 20, 32, 36, 37, 38, 41, 54, 128, 129, 130, 131, 134, 143, 152, 153, 154, 155, 184, 186, 189, 192, 215, 216, 225, 226, 242, 244, 247, 248, 261, 271, 277, 280, 282, 283, 306, 308, 317, 321, 323, 333, 334, 372, 387, 435, 436, 447, 451, 456, 458, 467, 471, 481, 488, 510, 511, 512, 513, 528, 534, 538, 547, 549, 562, 563, 567, 582, 620, 671, 672, 677, 680, 687, 689, 691, 696, 699, 700, 701, 709, 716, 734, 736, 739, 748, 752, 754, 770, 782, 792, 799, 806, 814, 815, 823, 824, 834, 835, 849, 852, 853, 854, 876, 882, 888, 939, 953, 1006, 1014, 1037, 1054, 1076, 1077, 1078, 1079, 1118, 1216, 1224, 1232, 1233, 1247, 1258], "onli": [1, 10, 13, 20, 30, 33, 34, 36, 42, 46, 47, 52, 55, 85, 129, 130, 131, 133, 134, 135, 137, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 163, 168, 184, 189, 201, 202, 213, 216, 219, 234, 241, 243, 244, 263, 265, 266, 267, 277, 278, 294, 308, 318, 320, 322, 334, 371, 372, 385, 390, 412, 419, 441, 450, 460, 529, 530, 536, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 580, 625, 645, 682, 698, 732, 770, 791, 794, 797, 799, 800, 810, 811, 815, 818, 832, 833, 849, 851, 864, 876, 880, 882, 886, 887, 888, 936, 939, 956, 982, 1014, 1020, 1026, 1094, 1116, 1155, 1175, 1208, 1211, 1214, 1233, 1241, 1244, 1258, 1259, 1261], "gener": [1, 126, 131, 132, 150, 156, 157, 158, 159, 160, 161, 163, 170, 176, 178, 234, 245, 264, 267, 273, 308, 368, 509, 608, 613, 693, 711, 714, 726, 727, 729, 745, 757, 758, 770, 876, 930, 1075, 1135, 1144, 1209, 1233, 1261], "userwarn": 1, "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 165, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 766, 770, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1233, 1237, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1258, 1259, 1261], "register_expr_namespac": [1, 48, 50, 51], "greet": 1, "def": [1, 46, 48, 49, 50, 51, 131, 157, 159, 163, 168, 233, 273, 308, 317, 572, 632, 654, 687, 731, 770, 792, 827, 876, 882, 1162, 1261], "__init__": [1, 46, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 156, 1258], "self": [1, 48, 49, 50, 51, 53, 54, 174, 175, 181, 189, 203, 205, 206, 218, 224, 225, 231, 232, 234, 236, 237, 239, 245, 253, 254, 256, 257, 260, 264, 273, 275, 278, 279, 280, 284, 285, 286, 308, 749, 770, 785, 786, 787, 788, 790, 791, 792, 795, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 876, 888, 930, 940, 944, 1014, 1018, 1029, 1093, 1094, 1105, 1109, 1110, 1115, 1118, 1136, 1138, 1139, 1150, 1221, 1224, 1233, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1258], "_expr": [1, 49], "hello": [1, 20, 652, 653, 654, 882, 1066, 1182, 1183, 1184, 1243, 1246], "return": [1, 5, 6, 30, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 94, 97, 105, 113, 116, 118, 119, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 165, 166, 172, 174, 177, 178, 179, 183, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 200, 201, 203, 204, 205, 209, 211, 212, 213, 214, 215, 217, 218, 219, 221, 223, 228, 229, 230, 232, 233, 234, 238, 241, 242, 243, 244, 245, 249, 256, 259, 260, 266, 267, 268, 271, 272, 273, 274, 278, 281, 282, 283, 289, 291, 293, 294, 297, 302, 308, 320, 322, 325, 326, 327, 328, 329, 330, 333, 334, 338, 339, 340, 342, 344, 345, 356, 361, 362, 363, 364, 365, 366, 367, 373, 374, 375, 376, 377, 383, 384, 390, 391, 393, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 438, 443, 451, 454, 455, 457, 461, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 483, 486, 487, 489, 494, 496, 498, 499, 500, 502, 509, 519, 520, 527, 529, 530, 540, 542, 543, 548, 572, 575, 577, 581, 582, 583, 585, 586, 608, 609, 614, 615, 616, 623, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 658, 662, 667, 674, 675, 676, 678, 679, 680, 682, 683, 684, 687, 688, 693, 694, 695, 696, 697, 698, 703, 705, 710, 711, 712, 713, 714, 715, 716, 719, 722, 724, 726, 727, 728, 729, 730, 731, 732, 742, 745, 748, 749, 752, 755, 756, 757, 758, 760, 761, 770, 786, 789, 791, 792, 794, 795, 796, 800, 801, 803, 808, 810, 811, 814, 817, 818, 819, 827, 828, 830, 832, 836, 839, 845, 846, 847, 851, 852, 853, 859, 861, 863, 867, 872, 876, 880, 882, 886, 887, 888, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 920, 922, 924, 925, 926, 929, 932, 934, 938, 944, 950, 951, 956, 957, 959, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1007, 1009, 1013, 1014, 1022, 1025, 1027, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1060, 1062, 1064, 1065, 1066, 1068, 1075, 1085, 1086, 1093, 1094, 1099, 1106, 1112, 1118, 1119, 1120, 1121, 1122, 1135, 1137, 1145, 1153, 1154, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1176, 1177, 1178, 1179, 1180, 1188, 1192, 1197, 1205, 1208, 1215, 1218, 1220, 1221, 1222, 1224, 1233, 1241, 1242, 1246, 1248, 1249, 1250, 1251, 1253, 1254, 1258, 1259, 1260, 1261], "lit": [1, 319, 361, 467, 551, 634, 706, 720, 742, 745, 761, 770, 1017, 1233], "alia": [1, 12, 47, 49, 51, 83, 176, 201, 218, 234, 241, 275, 282, 285, 308, 317, 321, 361, 362, 363, 364, 365, 366, 377, 378, 379, 380, 381, 383, 386, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 428, 429, 430, 431, 432, 435, 436, 449, 451, 456, 458, 464, 467, 470, 473, 481, 483, 505, 517, 523, 528, 530, 534, 536, 538, 540, 544, 547, 549, 551, 562, 563, 567, 569, 573, 575, 578, 580, 607, 609, 624, 625, 626, 627, 629, 631, 632, 634, 635, 639, 640, 645, 646, 647, 648, 649, 650, 651, 655, 656, 658, 668, 669, 670, 672, 677, 678, 680, 686, 687, 693, 694, 695, 699, 700, 701, 711, 714, 716, 717, 720, 721, 726, 729, 731, 732, 744, 752, 757, 760, 770, 810, 812, 818, 832, 848, 852, 856, 876, 950, 957, 958, 961, 964, 965, 966, 967, 972, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1049, 1112, 1117, 1161, 1162, 1179, 1180, 1233], "hi": [1, 1254], "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 20, 625, 645, 652, 653, 654, 665, 882, 1066, 1155, 1175, 1182, 1183, 1184, 1195, 1243, 1246], "select": [1, 8, 34, 47, 48, 49, 50, 88, 127, 129, 130, 131, 132, 133, 135, 137, 141, 143, 149, 158, 171, 211, 212, 216, 219, 230, 233, 242, 248, 254, 256, 269, 275, 278, 285, 308, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342, 347, 348, 349, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 369, 370, 371, 373, 374, 375, 376, 382, 384, 386, 387, 388, 389, 392, 394, 395, 403, 409, 410, 412, 415, 422, 423, 424, 425, 426, 427, 428, 429, 432, 434, 437, 439, 440, 441, 442, 443, 444, 448, 450, 452, 455, 459, 460, 462, 463, 464, 465, 468, 469, 472, 478, 479, 480, 482, 493, 494, 521, 524, 525, 526, 527, 529, 530, 531, 532, 533, 536, 546, 548, 550, 551, 553, 555, 557, 560, 561, 565, 566, 567, 568, 570, 571, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 588, 599, 606, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 630, 631, 632, 633, 634, 636, 657, 668, 670, 673, 675, 676, 678, 679, 681, 682, 683, 684, 685, 688, 690, 692, 695, 696, 697, 700, 702, 703, 704, 705, 708, 715, 716, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 733, 735, 737, 738, 740, 741, 744, 745, 749, 750, 751, 752, 753, 755, 759, 766, 770, 785, 794, 815, 827, 835, 840, 842, 848, 854, 856, 876, 882, 985, 1021, 1059, 1136, 1138, 1149, 1168, 1187, 1233, 1241, 1242, 1243, 1244, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260], "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 91, 110, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 138, 139, 143, 149, 156, 159, 163, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 195, 196, 198, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 245, 247, 252, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 546, 547, 548, 549, 550, 551, 552, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 766, 770, 785, 786, 788, 789, 791, 792, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 882, 884, 885, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1099, 1105, 1106, 1108, 1109, 1110, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1203, 1205, 1206, 1207, 1209, 1210, 1211, 1216, 1218, 1219, 1220, 1221, 1222, 1224, 1233, 1241, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1258, 1259], "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 134, 138, 139, 140, 143, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 312, 317, 318, 319, 320, 322, 333, 334, 335, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 389, 390, 392, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 429, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 481, 482, 483, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 547, 548, 549, 550, 551, 552, 554, 556, 558, 559, 562, 565, 566, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 617, 619, 620, 621, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 658, 659, 664, 668, 669, 670, 671, 672, 674, 678, 679, 682, 683, 684, 686, 687, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 766, 770, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 882, 884, 885, 888, 889, 891, 892, 893, 895, 896, 897, 898, 899, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 935, 936, 937, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 960, 961, 964, 966, 967, 968, 970, 971, 972, 974, 976, 977, 978, 983, 985, 986, 987, 988, 990, 991, 992, 994, 995, 997, 999, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1155, 1157, 1158, 1159, 1161, 1162, 1163, 1165, 1166, 1167, 1169, 1170, 1173, 1174, 1175, 1176, 1177, 1181, 1188, 1189, 1194, 1198, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1213, 1214, 1215, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1233, 1241, 1242, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1261], "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 130, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 159, 163, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 643, 644, 649, 650, 651, 652, 653, 654, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 766, 770, 785, 786, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 882, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 929, 930, 933, 935, 936, 937, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1117, 1118, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1161, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1173, 1174, 1179, 1180, 1197, 1198, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1233, 1237, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1261], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 55, 56, 72, 76, 88, 91, 93, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 132, 138, 139, 143, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 312, 316, 317, 318, 319, 321, 323, 324, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 366, 367, 368, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 390, 391, 393, 394, 395, 396, 397, 398, 399, 402, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 543, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 617, 618, 619, 620, 621, 623, 625, 626, 627, 628, 629, 631, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 744, 748, 749, 750, 751, 752, 753, 755, 758, 759, 760, 766, 770, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 881, 882, 884, 885, 888, 890, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 929, 933, 935, 936, 937, 938, 940, 941, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 956, 957, 960, 962, 963, 965, 967, 970, 971, 972, 974, 976, 977, 978, 979, 980, 984, 985, 986, 989, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1156, 1161, 1163, 1164, 1165, 1167, 1168, 1170, 1173, 1174, 1179, 1180, 1182, 1183, 1184, 1187, 1188, 1190, 1191, 1192, 1193, 1195, 1196, 1198, 1200, 1201, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1233, 1237, 1241, 1242, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1261], "column_0": [1, 219, 273, 308], "register_dataframe_namespac": [1, 49, 50, 51], "split": [1, 36, 48, 214, 308, 630, 649, 650, 1160, 1179, 1180], "splitfram": [1, 48], "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 72, 88, 92, 117, 118, 119, 120, 121, 122, 123, 130, 131, 132, 143, 156, 157, 159, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 593, 595, 597, 599, 600, 602, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 748, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 766, 770, 810, 832, 836, 848, 849, 861, 864, 872, 876, 882, 985, 1009, 1168, 1179, 1180, 1210, 1233, 1241, 1242, 1243, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1258, 1261], "_df": [1, 48], "by_alternate_row": 1, "list": [1, 13, 35, 36, 47, 48, 50, 53, 54, 56, 62, 76, 91, 116, 118, 119, 120, 122, 123, 125, 127, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 158, 159, 163, 177, 182, 185, 187, 188, 192, 198, 200, 201, 205, 213, 229, 232, 241, 242, 243, 244, 247, 255, 262, 263, 271, 273, 274, 275, 276, 282, 287, 288, 308, 318, 345, 356, 357, 358, 383, 390, 443, 449, 454, 463, 471, 529, 530, 540, 541, 568, 575, 581, 583, 588, 589, 591, 593, 595, 597, 600, 602, 604, 619, 620, 630, 632, 648, 668, 670, 677, 696, 698, 700, 712, 715, 717, 725, 727, 730, 732, 750, 752, 758, 766, 770, 794, 800, 802, 806, 809, 810, 834, 841, 847, 848, 852, 854, 857, 858, 876, 881, 882, 909, 920, 921, 922, 937, 950, 956, 1007, 1013, 1018, 1021, 1023, 1028, 1029, 1037, 1094, 1112, 1119, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1155, 1160, 1162, 1175, 1178, 1213, 1216, 1233, 1241, 1246, 1250, 1251, 1260, 1261], "with_row_index": [1, 241, 284, 308, 590, 592, 594, 596, 598, 601, 603, 605, 770, 855, 876, 1136, 1233], "name": [1, 18, 22, 24, 31, 33, 34, 36, 42, 48, 49, 50, 51, 55, 76, 92, 116, 118, 119, 120, 121, 122, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 154, 155, 156, 157, 159, 162, 163, 164, 172, 173, 176, 177, 182, 183, 184, 188, 192, 193, 196, 197, 199, 200, 211, 212, 213, 215, 216, 219, 221, 223, 225, 226, 228, 232, 234, 238, 242, 243, 244, 246, 247, 248, 249, 255, 256, 259, 262, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 282, 283, 284, 285, 286, 287, 293, 308, 312, 319, 357, 361, 362, 364, 365, 367, 383, 418, 421, 441, 447, 467, 474, 475, 476, 477, 521, 530, 535, 537, 539, 541, 544, 568, 575, 584, 620, 632, 633, 643, 644, 668, 670, 671, 679, 684, 688, 689, 690, 691, 692, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 708, 709, 718, 719, 724, 725, 728, 733, 734, 735, 736, 737, 738, 739, 740, 743, 746, 747, 748, 749, 751, 752, 753, 754, 755, 759, 760, 766, 770, 786, 788, 793, 794, 798, 799, 802, 806, 809, 814, 815, 823, 824, 830, 833, 834, 835, 836, 841, 842, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 863, 876, 880, 881, 882, 885, 921, 938, 950, 988, 991, 1006, 1087, 1112, 1117, 1161, 1162, 1163, 1173, 1174, 1198, 1201, 1209, 1210, 1215, 1222, 1233, 1242, 1243, 1244, 1245, 1246, 1247, 1257, 1258, 1261], "n": [1, 12, 13, 17, 25, 33, 40, 42, 48, 49, 50, 51, 62, 64, 125, 129, 130, 134, 139, 143, 159, 174, 189, 195, 201, 203, 213, 214, 218, 219, 243, 244, 245, 252, 257, 260, 263, 265, 279, 291, 293, 302, 308, 324, 352, 357, 366, 367, 382, 386, 390, 392, 394, 400, 420, 432, 444, 447, 455, 461, 483, 491, 497, 499, 509, 510, 514, 517, 519, 521, 523, 569, 572, 581, 600, 601, 604, 605, 608, 611, 617, 622, 635, 639, 640, 643, 649, 650, 652, 653, 658, 660, 674, 678, 679, 680, 684, 685, 687, 702, 704, 713, 714, 715, 716, 722, 724, 742, 745, 746, 747, 751, 755, 759, 761, 770, 789, 791, 808, 810, 811, 818, 838, 843, 845, 850, 861, 863, 872, 876, 882, 916, 921, 929, 938, 949, 952, 956, 958, 960, 966, 990, 1002, 1014, 1015, 1022, 1027, 1049, 1057, 1063, 1065, 1075, 1076, 1080, 1085, 1087, 1108, 1130, 1132, 1135, 1141, 1148, 1152, 1165, 1169, 1170, 1173, 1179, 1180, 1188, 1190, 1205, 1211, 1218, 1222, 1223, 1233, 1244, 1245, 1251, 1254, 1255, 1258, 1261], "filter": [1, 48, 133, 143, 144, 149, 184, 208, 209, 210, 215, 234, 294, 308, 539, 541, 629, 651, 686, 710, 713, 720, 749, 760, 770, 799, 803, 812, 814, 836, 842, 864, 876, 882, 1138, 1233, 1248], "col": [1, 12, 33, 36, 42, 47, 48, 49, 50, 120, 122, 143, 157, 159, 192, 200, 201, 209, 211, 215, 216, 219, 230, 233, 234, 241, 242, 247, 255, 266, 271, 275, 276, 282, 287, 308, 312, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 462, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 553, 555, 557, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 696, 697, 699, 700, 701, 703, 705, 708, 710, 713, 716, 720, 721, 722, 723, 724, 725, 733, 735, 737, 738, 740, 743, 744, 749, 751, 753, 755, 756, 759, 760, 770, 806, 809, 810, 812, 814, 815, 827, 832, 834, 841, 842, 848, 852, 854, 857, 876, 882, 982, 985, 1059, 1136, 1138, 1168, 1187, 1233, 1261], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 35, 36, 41, 45, 47, 48, 49, 51, 55, 63, 72, 117, 126, 129, 130, 131, 132, 134, 135, 137, 138, 140, 141, 143, 146, 147, 148, 149, 151, 156, 157, 158, 159, 160, 161, 163, 166, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 186, 190, 191, 194, 195, 198, 199, 200, 201, 202, 206, 207, 211, 213, 214, 215, 217, 219, 221, 222, 223, 224, 228, 229, 230, 231, 234, 235, 236, 239, 241, 243, 244, 245, 246, 247, 249, 254, 255, 256, 257, 259, 264, 265, 266, 267, 268, 269, 271, 273, 276, 278, 279, 282, 284, 285, 287, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 308, 312, 316, 318, 319, 321, 325, 326, 327, 328, 329, 330, 333, 334, 335, 338, 339, 341, 344, 354, 357, 359, 368, 370, 371, 373, 374, 375, 382, 383, 384, 388, 389, 390, 396, 397, 401, 404, 406, 407, 411, 417, 419, 424, 425, 427, 428, 432, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 450, 451, 453, 455, 456, 458, 460, 462, 465, 466, 469, 472, 474, 475, 476, 477, 479, 481, 486, 487, 490, 493, 496, 497, 498, 504, 505, 517, 521, 523, 524, 525, 526, 528, 529, 531, 532, 533, 536, 540, 545, 546, 547, 549, 551, 560, 561, 562, 563, 564, 566, 567, 569, 572, 573, 575, 576, 577, 578, 582, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 614, 615, 616, 617, 621, 622, 623, 626, 630, 631, 632, 634, 671, 672, 673, 675, 676, 677, 680, 685, 686, 688, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 706, 713, 717, 720, 726, 727, 729, 732, 735, 736, 737, 741, 743, 744, 749, 756, 757, 758, 759, 760, 761, 766, 770, 785, 788, 789, 790, 793, 795, 796, 798, 800, 801, 804, 805, 808, 809, 810, 813, 814, 817, 819, 822, 826, 828, 829, 833, 834, 839, 841, 842, 843, 850, 852, 854, 855, 856, 857, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 876, 882, 889, 890, 891, 892, 893, 894, 895, 897, 899, 902, 908, 918, 921, 923, 930, 933, 935, 936, 938, 941, 942, 943, 949, 950, 951, 953, 954, 955, 956, 963, 967, 971, 972, 973, 975, 977, 981, 987, 994, 995, 997, 998, 1002, 1005, 1008, 1009, 1010, 1011, 1016, 1020, 1022, 1025, 1026, 1028, 1030, 1031, 1035, 1038, 1040, 1041, 1042, 1043, 1046, 1047, 1052, 1053, 1056, 1059, 1062, 1063, 1064, 1070, 1071, 1083, 1087, 1089, 1090, 1091, 1092, 1093, 1096, 1097, 1103, 1104, 1108, 1112, 1113, 1114, 1118, 1122, 1123, 1125, 1126, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1137, 1145, 1146, 1147, 1148, 1151, 1152, 1153, 1156, 1160, 1161, 1162, 1164, 1168, 1206, 1207, 1209, 1212, 1214, 1215, 1216, 1217, 1221, 1223, 1233, 1241, 1247, 1249, 1250, 1253, 1254, 1256, 1258, 1260, 1261], "drop": [1, 119, 183, 184, 219, 274, 282, 308, 386, 388, 389, 491, 492, 575, 770, 799, 847, 852, 876, 952, 954, 955, 1057, 1058, 1112, 1233, 1257], "aaa": [1, 36, 308, 624, 634, 668, 670, 882, 1154, 1164], "bbb": [1, 36, 308, 668, 670, 882], "ccc": [1, 36, 308, 668, 670, 882, 1254], "ddd": [1, 36, 308, 668, 670], "eee": [1, 36, 308, 882], "fff": 1, "txt": [1, 12, 143, 624, 634, 1164], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 31, 33, 34, 35, 36, 39, 40, 42, 46, 59, 62, 65, 76, 83, 84, 85, 87, 93, 111, 119, 123, 126, 129, 130, 131, 132, 143, 152, 153, 154, 155, 156, 163, 167, 172, 173, 176, 185, 187, 194, 199, 200, 201, 216, 232, 234, 241, 244, 246, 247, 248, 249, 255, 265, 266, 272, 273, 276, 278, 282, 283, 286, 287, 308, 317, 340, 345, 362, 363, 364, 367, 412, 416, 418, 421, 429, 438, 441, 449, 453, 467, 500, 542, 543, 568, 572, 582, 587, 590, 592, 594, 596, 598, 601, 603, 605, 620, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 667, 669, 671, 679, 687, 689, 691, 696, 699, 700, 701, 709, 711, 712, 714, 715, 721, 734, 736, 739, 748, 752, 754, 757, 758, 760, 766, 770, 782, 786, 788, 793, 800, 801, 809, 810, 815, 832, 833, 834, 835, 836, 841, 846, 852, 853, 857, 876, 881, 882, 909, 925, 926, 927, 932, 982, 986, 988, 991, 999, 1009, 1032, 1066, 1118, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1200, 1211, 1212, 1233, 1241, 1242, 1250, 1252, 1255, 1257, 1261], "register_lazyframe_namespac": [1, 48, 49, 51], "dtypeoper": [1, 50], "ldf": [1, 857, 858, 860, 862, 865, 866, 867, 868, 869, 870, 871], "_ldf": 1, "upcast_integer_typ": [1, 50], "with_column": [1, 12, 50, 53, 54, 201, 233, 241, 271, 276, 283, 308, 317, 319, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 350, 351, 352, 353, 357, 362, 363, 368, 372, 377, 378, 379, 380, 381, 383, 386, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 430, 431, 433, 435, 436, 438, 445, 446, 451, 456, 458, 460, 465, 466, 467, 470, 471, 473, 474, 475, 476, 477, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 528, 530, 547, 549, 551, 552, 554, 556, 558, 559, 562, 563, 564, 568, 569, 572, 573, 575, 578, 582, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 607, 611, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 661, 662, 663, 665, 666, 667, 669, 671, 672, 677, 680, 687, 689, 691, 694, 698, 699, 701, 706, 707, 709, 710, 712, 713, 717, 727, 731, 734, 736, 739, 750, 754, 756, 758, 760, 766, 770, 791, 792, 801, 803, 810, 812, 827, 828, 832, 839, 853, 876, 882, 950, 985, 1112, 1233, 1258], "tp": [1, 50], "cast": [1, 35, 49, 50, 116, 118, 119, 122, 152, 153, 154, 155, 194, 201, 233, 241, 266, 267, 271, 282, 308, 323, 380, 381, 392, 418, 421, 432, 567, 572, 573, 580, 587, 637, 638, 667, 673, 677, 701, 750, 770, 810, 827, 832, 852, 876, 880, 882, 934, 947, 948, 958, 988, 991, 1002, 1116, 1167, 1168, 1197, 1204, 1210, 1214, 1216, 1217, 1233], "int64": [1, 35, 36, 49, 50, 55, 56, 76, 93, 129, 138, 176, 185, 194, 201, 233, 241, 246, 247, 249, 261, 268, 308, 338, 339, 341, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 380, 381, 422, 423, 424, 425, 426, 427, 428, 432, 438, 441, 529, 530, 553, 555, 557, 572, 580, 587, 637, 662, 673, 677, 693, 718, 726, 727, 730, 745, 752, 766, 770, 793, 800, 810, 827, 832, 833, 834, 836, 876, 882, 902, 903, 905, 906, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 923, 947, 948, 992, 993, 994, 995, 996, 997, 998, 1002, 1004, 1009, 1094, 1116, 1192, 1204, 1214, 1215, 1216, 1217, 1233], "int8": [1, 50, 76, 194, 308, 356, 357, 380, 381, 398, 401, 407, 408, 414, 417, 430, 431, 520, 673, 742, 745, 761, 770, 881, 920, 921, 947, 948, 952, 964, 967, 977, 978, 984, 987, 1000, 1001, 1086, 1120, 1204, 1214, 1221, 1233], "int16": [1, 50, 271, 308, 380, 381, 413, 673, 770, 882, 947, 948, 983, 1204, 1211, 1233], "int32": [1, 36, 50, 55, 116, 119, 156, 158, 159, 201, 214, 241, 266, 308, 343, 344, 346, 368, 393, 403, 404, 405, 406, 411, 433, 438, 587, 677, 745, 770, 810, 832, 876, 882, 904, 907, 908, 910, 959, 969, 973, 974, 975, 981, 1003, 1009, 1093, 1216, 1217, 1233], "b": [1, 10, 31, 33, 35, 37, 38, 41, 50, 55, 76, 88, 91, 116, 117, 118, 119, 120, 121, 122, 123, 129, 131, 134, 170, 171, 172, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 210, 211, 212, 213, 214, 215, 217, 218, 220, 222, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 247, 252, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 308, 317, 319, 320, 322, 323, 333, 335, 340, 345, 360, 361, 362, 363, 364, 365, 367, 368, 376, 383, 387, 418, 421, 441, 443, 445, 446, 447, 449, 452, 459, 460, 463, 465, 466, 467, 469, 472, 474, 475, 476, 477, 482, 488, 493, 500, 510, 511, 512, 513, 529, 530, 535, 548, 551, 552, 553, 554, 555, 556, 557, 565, 566, 568, 572, 575, 578, 582, 584, 586, 612, 618, 620, 627, 630, 634, 637, 643, 644, 668, 669, 679, 682, 686, 688, 689, 690, 691, 692, 696, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 717, 718, 719, 720, 721, 724, 725, 726, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 749, 751, 752, 753, 754, 755, 759, 766, 770, 785, 786, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 876, 882, 885, 888, 909, 924, 925, 926, 927, 928, 932, 933, 934, 950, 953, 988, 991, 1005, 1006, 1007, 1014, 1017, 1032, 1037, 1054, 1076, 1077, 1078, 1079, 1112, 1117, 1157, 1160, 1164, 1167, 1173, 1174, 1198, 1200, 1201, 1203, 1215, 1220, 1233, 1242, 1244, 1245, 1247, 1248, 1249, 1250, 1254, 1256, 1258], "4": [1, 8, 13, 17, 25, 31, 33, 35, 36, 37, 38, 41, 47, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 143, 151, 163, 170, 171, 172, 173, 174, 175, 179, 181, 184, 188, 189, 190, 191, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 235, 241, 243, 244, 251, 252, 255, 259, 260, 261, 262, 263, 264, 267, 270, 272, 273, 275, 276, 277, 278, 280, 281, 282, 284, 285, 287, 288, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 312, 316, 317, 318, 319, 321, 323, 335, 342, 343, 344, 346, 347, 348, 349, 350, 352, 354, 355, 356, 357, 359, 360, 366, 367, 368, 370, 371, 372, 376, 377, 380, 381, 382, 384, 387, 394, 397, 398, 405, 413, 414, 415, 416, 417, 418, 421, 423, 426, 428, 429, 431, 435, 436, 438, 442, 443, 445, 446, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 476, 477, 481, 482, 483, 490, 491, 492, 493, 494, 496, 497, 499, 507, 509, 510, 511, 512, 513, 514, 515, 519, 520, 525, 528, 529, 530, 547, 549, 551, 552, 554, 556, 558, 559, 562, 563, 564, 567, 568, 570, 571, 572, 573, 576, 578, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 609, 611, 614, 618, 619, 620, 621, 624, 626, 632, 634, 635, 639, 640, 641, 642, 643, 644, 647, 648, 649, 650, 655, 656, 657, 658, 662, 667, 668, 670, 671, 672, 674, 677, 678, 679, 680, 686, 687, 689, 691, 692, 694, 695, 696, 697, 699, 701, 702, 704, 706, 707, 708, 709, 710, 713, 714, 715, 717, 719, 720, 724, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 766, 770, 785, 786, 788, 789, 790, 791, 792, 795, 799, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 832, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 882, 888, 890, 897, 904, 906, 907, 908, 910, 911, 912, 913, 914, 916, 918, 919, 920, 921, 922, 923, 929, 936, 937, 939, 944, 949, 951, 953, 963, 967, 973, 974, 975, 977, 978, 979, 980, 981, 984, 985, 986, 988, 991, 993, 996, 998, 999, 1000, 1001, 1006, 1009, 1013, 1014, 1016, 1017, 1021, 1022, 1023, 1027, 1028, 1030, 1031, 1032, 1033, 1037, 1040, 1041, 1042, 1043, 1045, 1049, 1056, 1057, 1058, 1059, 1060, 1065, 1069, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1085, 1086, 1100, 1103, 1104, 1105, 1108, 1109, 1110, 1114, 1115, 1118, 1119, 1122, 1126, 1128, 1129, 1130, 1131, 1132, 1135, 1137, 1141, 1142, 1145, 1148, 1149, 1150, 1154, 1156, 1162, 1164, 1165, 1169, 1170, 1171, 1172, 1177, 1179, 1180, 1185, 1186, 1187, 1188, 1192, 1197, 1198, 1201, 1203, 1205, 1211, 1214, 1216, 1218, 1224, 1233, 1237, 1241, 1242, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1261], "c": [1, 10, 31, 33, 35, 37, 38, 41, 48, 50, 55, 91, 117, 119, 121, 123, 134, 143, 170, 172, 173, 174, 175, 176, 177, 179, 182, 183, 184, 185, 186, 188, 192, 194, 197, 198, 199, 200, 201, 203, 205, 206, 214, 215, 217, 218, 220, 222, 224, 225, 227, 229, 230, 231, 232, 234, 235, 236, 238, 239, 240, 242, 245, 246, 247, 254, 255, 256, 257, 258, 260, 261, 264, 265, 266, 267, 268, 269, 272, 276, 277, 279, 280, 282, 287, 290, 291, 292, 295, 296, 298, 301, 302, 308, 312, 317, 319, 320, 322, 340, 360, 367, 383, 447, 459, 467, 488, 500, 530, 536, 551, 552, 566, 568, 572, 575, 612, 649, 657, 679, 682, 689, 691, 692, 694, 695, 696, 699, 701, 702, 703, 704, 706, 707, 709, 719, 720, 721, 724, 725, 728, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 749, 751, 753, 754, 755, 759, 766, 770, 786, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 806, 809, 810, 814, 817, 823, 826, 828, 830, 831, 833, 834, 839, 840, 841, 842, 846, 849, 852, 854, 857, 860, 861, 862, 865, 866, 868, 871, 872, 876, 880, 882, 933, 950, 1032, 1054, 1112, 1179, 1187, 1201, 1220, 1233, 1242, 1244, 1245, 1247, 1248, 1249, 1250, 1254, 1258], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 37, 38, 41, 47, 48, 50, 51, 55, 91, 116, 119, 120, 121, 122, 123, 125, 130, 151, 152, 154, 157, 159, 163, 173, 174, 175, 180, 181, 188, 189, 190, 191, 194, 195, 196, 198, 199, 200, 201, 203, 204, 206, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 221, 222, 223, 225, 228, 229, 230, 232, 234, 235, 236, 241, 244, 251, 252, 255, 256, 259, 260, 261, 262, 263, 264, 266, 267, 270, 271, 273, 276, 277, 278, 281, 282, 284, 285, 287, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 312, 317, 318, 321, 336, 337, 342, 343, 344, 346, 348, 352, 357, 359, 366, 367, 368, 371, 372, 382, 383, 384, 386, 387, 390, 393, 394, 395, 396, 397, 401, 404, 405, 406, 407, 411, 415, 417, 418, 419, 421, 422, 428, 432, 436, 438, 440, 441, 444, 446, 450, 451, 455, 456, 458, 461, 463, 465, 467, 470, 473, 474, 475, 476, 477, 481, 483, 490, 493, 494, 496, 497, 499, 502, 504, 505, 509, 510, 511, 512, 513, 514, 518, 519, 523, 529, 547, 549, 551, 563, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 582, 583, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 597, 600, 602, 603, 604, 605, 606, 609, 614, 620, 626, 634, 635, 638, 639, 640, 658, 662, 672, 674, 678, 679, 680, 692, 694, 695, 697, 698, 699, 700, 702, 704, 706, 707, 708, 709, 710, 711, 713, 716, 717, 718, 719, 720, 724, 726, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 749, 751, 753, 754, 755, 759, 766, 770, 788, 789, 790, 791, 792, 796, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 821, 822, 823, 828, 832, 838, 839, 840, 841, 842, 843, 844, 845, 849, 851, 852, 855, 856, 857, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 876, 882, 888, 890, 894, 897, 900, 901, 904, 906, 907, 908, 910, 912, 916, 921, 922, 923, 929, 937, 939, 945, 949, 950, 951, 952, 953, 956, 959, 960, 961, 962, 963, 964, 974, 985, 987, 988, 989, 991, 992, 998, 1000, 1001, 1002, 1006, 1009, 1011, 1013, 1014, 1015, 1023, 1027, 1028, 1030, 1032, 1036, 1039, 1049, 1056, 1059, 1060, 1065, 1068, 1071, 1075, 1076, 1077, 1078, 1079, 1080, 1084, 1085, 1089, 1093, 1100, 1105, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1118, 1119, 1122, 1123, 1124, 1125, 1127, 1128, 1131, 1135, 1137, 1142, 1145, 1148, 1151, 1156, 1164, 1165, 1168, 1169, 1188, 1192, 1205, 1212, 1214, 1217, 1218, 1221, 1224, 1233, 1242, 1245, 1247, 1249, 1250, 1253, 1254, 1256, 1258, 1260, 1261], "6": [1, 8, 13, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 55, 84, 85, 91, 116, 119, 120, 121, 122, 134, 138, 139, 151, 173, 176, 177, 181, 182, 183, 184, 185, 186, 188, 189, 192, 195, 196, 197, 198, 199, 201, 203, 205, 206, 207, 209, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 231, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 249, 252, 254, 255, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 273, 275, 276, 278, 279, 280, 281, 282, 284, 285, 291, 301, 302, 308, 311, 312, 317, 321, 342, 343, 344, 346, 352, 360, 367, 368, 380, 381, 387, 390, 394, 398, 408, 412, 413, 414, 424, 425, 427, 430, 431, 434, 436, 445, 446, 451, 452, 455, 461, 463, 465, 483, 484, 485, 494, 497, 510, 511, 512, 513, 517, 529, 530, 563, 567, 574, 577, 578, 579, 583, 585, 587, 589, 591, 593, 595, 597, 600, 602, 603, 604, 609, 620, 626, 630, 639, 640, 662, 672, 674, 679, 687, 689, 691, 698, 706, 707, 708, 710, 713, 717, 720, 726, 731, 732, 736, 749, 753, 766, 770, 788, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 810, 811, 813, 814, 816, 818, 819, 823, 826, 828, 830, 832, 833, 834, 836, 838, 839, 840, 841, 842, 845, 848, 851, 852, 855, 856, 861, 871, 872, 876, 882, 904, 906, 907, 908, 910, 916, 937, 941, 943, 947, 948, 953, 956, 982, 1001, 1006, 1013, 1023, 1028, 1050, 1051, 1060, 1063, 1076, 1077, 1078, 1079, 1083, 1100, 1111, 1114, 1115, 1119, 1121, 1126, 1128, 1130, 1132, 1137, 1142, 1156, 1160, 1169, 1192, 1204, 1214, 1233, 1242, 1245, 1247, 1249, 1250, 1253, 1258, 1259, 1261], "7": [1, 16, 27, 31, 33, 35, 36, 37, 38, 39, 40, 41, 48, 50, 55, 138, 139, 151, 166, 173, 176, 177, 178, 180, 182, 183, 185, 186, 188, 192, 195, 197, 201, 203, 205, 207, 215, 218, 220, 222, 224, 226, 227, 231, 234, 236, 238, 239, 241, 242, 244, 245, 246, 247, 249, 252, 254, 257, 258, 259, 260, 265, 267, 268, 269, 276, 278, 279, 280, 308, 312, 317, 321, 343, 344, 346, 355, 381, 393, 394, 398, 405, 413, 415, 416, 429, 431, 442, 455, 461, 465, 466, 483, 497, 510, 511, 512, 513, 567, 578, 583, 587, 602, 603, 620, 634, 661, 674, 698, 706, 707, 710, 713, 714, 720, 725, 731, 732, 749, 753, 770, 788, 793, 794, 796, 798, 800, 802, 806, 808, 810, 811, 813, 814, 818, 824, 826, 829, 830, 832, 833, 834, 838, 842, 845, 876, 882, 894, 907, 908, 910, 919, 959, 960, 964, 969, 974, 985, 986, 999, 1001, 1012, 1031, 1046, 1063, 1076, 1077, 1078, 1079, 1118, 1119, 1131, 1137, 1164, 1191, 1233, 1242, 1247, 1249, 1250, 1253, 1258, 1261], "float32": [1, 10, 33, 42, 50, 173, 194, 265, 266, 267, 271, 308, 438, 730, 770, 788, 876, 882, 1009, 1034, 1093, 1212, 1214, 1217, 1233], "lazi": [1, 55, 143, 159, 216, 233, 234, 256, 308, 530, 722, 742, 745, 761, 770, 796, 814, 815, 854, 857, 858, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 876, 882, 1241, 1242, 1243, 1244, 1245, 1247, 1258, 1261], "i16": [1, 50, 398, 413, 431, 612, 770, 882, 983, 1211, 1233, 1261], "i32": [1, 50, 116, 119, 123, 156, 158, 159, 247, 256, 308, 343, 344, 346, 368, 393, 401, 403, 404, 405, 406, 407, 411, 433, 612, 698, 760, 770, 834, 876, 907, 908, 910, 959, 969, 973, 974, 975, 981, 1003, 1093, 1233, 1251, 1255, 1261], "f32": [1, 50, 173, 256, 265, 271, 308, 612, 749, 770, 788, 842, 876, 882, 1093, 1233], "i64": [1, 10, 13, 16, 17, 21, 27, 48, 49, 50, 51, 55, 56, 72, 91, 116, 117, 118, 119, 120, 121, 122, 123, 126, 129, 131, 138, 139, 143, 172, 173, 174, 175, 177, 181, 182, 184, 185, 188, 189, 191, 192, 195, 196, 198, 199, 200, 201, 203, 205, 206, 208, 210, 212, 215, 216, 218, 219, 220, 225, 226, 227, 232, 233, 234, 235, 238, 239, 240, 241, 245, 247, 252, 254, 255, 256, 258, 260, 262, 269, 272, 273, 274, 275, 276, 277, 278, 280, 282, 284, 285, 286, 287, 288, 290, 291, 292, 294, 295, 298, 301, 302, 308, 317, 319, 323, 333, 338, 339, 341, 342, 347, 349, 350, 351, 352, 353, 355, 358, 360, 366, 367, 372, 378, 379, 380, 381, 382, 383, 386, 387, 400, 420, 422, 423, 424, 425, 426, 427, 428, 438, 441, 443, 444, 446, 447, 448, 449, 451, 452, 454, 455, 457, 461, 463, 464, 465, 466, 467, 470, 471, 473, 474, 475, 476, 477, 480, 483, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 527, 529, 530, 547, 548, 549, 551, 552, 554, 556, 558, 559, 564, 568, 569, 572, 573, 574, 575, 578, 579, 580, 582, 583, 584, 585, 586, 587, 608, 610, 611, 612, 613, 614, 618, 619, 620, 635, 643, 644, 658, 662, 667, 668, 670, 671, 672, 673, 674, 678, 679, 680, 681, 683, 686, 693, 696, 699, 701, 706, 707, 708, 709, 710, 713, 716, 717, 718, 719, 720, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 741, 744, 748, 749, 750, 753, 754, 755, 756, 760, 766, 770, 786, 788, 789, 791, 792, 797, 798, 799, 802, 803, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 818, 819, 820, 823, 824, 825, 827, 828, 830, 831, 832, 834, 836, 838, 840, 841, 842, 844, 845, 846, 847, 848, 849, 852, 855, 856, 857, 858, 860, 861, 862, 864, 865, 868, 871, 872, 876, 882, 884, 885, 888, 906, 911, 913, 915, 916, 917, 919, 922, 929, 939, 940, 945, 946, 947, 948, 949, 950, 966, 990, 992, 993, 994, 995, 996, 997, 998, 1013, 1014, 1015, 1017, 1018, 1021, 1022, 1023, 1027, 1029, 1037, 1049, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1069, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1087, 1088, 1094, 1099, 1105, 1112, 1115, 1116, 1117, 1118, 1119, 1121, 1124, 1127, 1131, 1135, 1136, 1138, 1141, 1142, 1144, 1145, 1149, 1150, 1192, 1198, 1203, 1205, 1210, 1218, 1219, 1224, 1233, 1241, 1242, 1244, 1248, 1249, 1250, 1251, 1253, 1256, 1258, 1259, 1261], "register_series_namespac": [1, 48, 49, 50], "math": [1, 10, 51, 384, 770, 941, 943, 1146, 1206, 1233, 1252, 1256, 1257], "mathshortcut": [1, 51], "": [1, 11, 33, 34, 35, 36, 41, 42, 51, 56, 76, 87, 93, 116, 123, 129, 130, 131, 132, 134, 140, 144, 145, 148, 149, 163, 172, 173, 184, 187, 192, 195, 200, 201, 206, 212, 215, 216, 225, 232, 234, 239, 241, 244, 247, 248, 255, 264, 267, 272, 274, 275, 276, 277, 282, 283, 308, 345, 367, 368, 395, 400, 418, 421, 441, 447, 451, 479, 500, 529, 530, 540, 548, 560, 561, 568, 569, 580, 586, 620, 624, 631, 632, 633, 634, 635, 643, 644, 647, 648, 650, 657, 658, 659, 660, 664, 665, 668, 670, 671, 679, 688, 689, 690, 691, 696, 702, 705, 708, 709, 718, 719, 721, 722, 728, 731, 732, 733, 734, 736, 738, 739, 741, 748, 750, 752, 753, 754, 760, 766, 770, 786, 788, 799, 809, 810, 815, 823, 834, 835, 841, 846, 847, 848, 849, 852, 853, 864, 876, 882, 884, 885, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 964, 965, 966, 968, 970, 971, 972, 974, 975, 976, 979, 980, 983, 986, 987, 988, 991, 999, 1001, 1002, 1003, 1004, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1233, 1237, 1241, 1245, 1248, 1255], "_": [1, 47, 51, 234, 264, 268, 308, 345, 500, 625, 632, 639, 640, 645, 648, 649, 839, 876, 933, 1155, 1162, 1169, 1170, 1175, 1179, 1209, 1233], "squar": [1, 51, 294, 479, 583, 621, 770, 864, 1047, 1119, 1151, 1233, 1253], "cube": [1, 51, 370, 573, 770, 935, 1233, 1253], "s2": [1, 46, 84, 85, 154, 155, 194, 308, 921, 937, 953, 1006, 1023, 1037, 1046, 1054, 1087, 1100, 1115, 1224, 1233], "renam": [1, 119, 129, 130, 166, 200, 247, 248, 282, 283, 287, 289, 308, 319, 453, 544, 545, 551, 552, 553, 554, 556, 558, 559, 670, 671, 748, 752, 770, 809, 834, 835, 852, 853, 857, 859, 876, 885, 1164, 1201, 1210, 1233, 1258], "n2": [1, 357], "s3": [1, 35, 133, 144, 145, 148, 149, 308, 921, 1087, 1233], "n3": 1, "8": [1, 11, 31, 33, 35, 37, 38, 39, 40, 41, 42, 47, 48, 50, 51, 55, 71, 75, 81, 138, 139, 151, 173, 176, 177, 178, 180, 182, 183, 184, 185, 186, 188, 192, 195, 197, 199, 203, 205, 212, 215, 216, 218, 219, 220, 222, 224, 227, 236, 238, 239, 241, 242, 244, 245, 246, 247, 249, 252, 254, 256, 257, 258, 260, 265, 267, 268, 269, 276, 279, 280, 282, 308, 321, 323, 335, 343, 344, 346, 378, 381, 382, 394, 455, 462, 465, 466, 491, 493, 497, 510, 511, 512, 513, 549, 567, 573, 583, 584, 588, 612, 618, 620, 641, 642, 657, 687, 692, 698, 702, 704, 707, 709, 717, 719, 724, 725, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 749, 751, 754, 755, 759, 770, 788, 793, 794, 796, 798, 799, 800, 802, 806, 808, 811, 814, 818, 819, 828, 830, 833, 834, 838, 842, 845, 852, 876, 882, 907, 908, 910, 943, 949, 969, 1028, 1031, 1046, 1057, 1059, 1063, 1076, 1077, 1078, 1079, 1108, 1119, 1122, 1123, 1126, 1128, 1130, 1132, 1171, 1172, 1187, 1233, 1241, 1242, 1247, 1249, 1250, 1253, 1254, 1255, 1258, 1261], "9": [1, 9, 31, 33, 35, 36, 37, 38, 41, 47, 55, 151, 178, 180, 194, 203, 207, 218, 219, 234, 241, 243, 244, 247, 259, 260, 276, 280, 282, 301, 308, 317, 321, 323, 335, 343, 344, 346, 351, 353, 378, 381, 384, 394, 447, 455, 465, 471, 491, 497, 508, 516, 551, 567, 577, 583, 587, 588, 599, 602, 603, 614, 618, 632, 661, 669, 671, 700, 706, 707, 710, 713, 725, 758, 770, 796, 811, 813, 818, 832, 834, 845, 852, 871, 876, 882, 902, 903, 907, 908, 910, 915, 917, 951, 964, 973, 975, 981, 986, 999, 1000, 1037, 1046, 1057, 1063, 1074, 1082, 1119, 1123, 1129, 1131, 1133, 1145, 1162, 1191, 1200, 1233, 1241, 1242, 1247, 1250, 1258], "27": [1, 51, 266, 301, 308, 381, 408, 414, 430, 671, 770, 871, 882, 1212, 1233, 1260, 1261], "16": [1, 36, 49, 68, 78, 151, 165, 180, 201, 241, 282, 308, 378, 381, 465, 549, 573, 587, 662, 671, 706, 716, 717, 720, 770, 796, 810, 832, 839, 852, 876, 882, 986, 999, 1108, 1146, 1192, 1206, 1233, 1253, 1254, 1258], "64": [1, 49, 51, 62, 64, 67, 70, 77, 80, 150, 170, 271, 308, 375, 549, 573, 770, 1108, 1233, 1253], "25": [1, 27, 36, 51, 123, 180, 201, 216, 241, 266, 271, 278, 282, 308, 386, 398, 399, 413, 416, 429, 431, 438, 573, 575, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 680, 713, 714, 715, 716, 722, 732, 757, 758, 770, 796, 810, 815, 821, 832, 850, 852, 876, 882, 951, 952, 965, 986, 999, 1005, 1009, 1028, 1108, 1112, 1233, 1249, 1253, 1258, 1259], "125": [1, 36, 51, 308, 317, 573, 749, 770, 842, 876, 1108, 1233], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 181, 308, 385, 453, 770, 797, 876, 1242, 1258], "cfg": [2, 4, 17, 168], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 766, 770, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1233, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1258], "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 53, 54, 59, 62, 63, 65, 117, 118, 119, 122, 129, 130, 131, 134, 135, 137, 138, 140, 141, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 170, 177, 184, 193, 200, 202, 213, 216, 223, 225, 243, 245, 247, 249, 254, 259, 261, 264, 266, 267, 271, 273, 274, 276, 277, 282, 308, 320, 322, 344, 345, 357, 372, 383, 415, 432, 460, 471, 496, 498, 500, 509, 510, 511, 512, 513, 515, 521, 529, 530, 536, 542, 572, 575, 582, 588, 589, 591, 593, 595, 597, 600, 602, 604, 608, 613, 617, 618, 623, 636, 637, 643, 644, 647, 652, 653, 654, 655, 656, 657, 659, 660, 664, 684, 688, 690, 693, 697, 701, 711, 712, 713, 714, 715, 716, 726, 727, 730, 742, 745, 746, 747, 752, 757, 758, 760, 761, 770, 782, 791, 792, 799, 801, 809, 814, 815, 819, 823, 834, 836, 840, 847, 849, 852, 864, 876, 880, 886, 887, 908, 909, 921, 925, 939, 950, 985, 1002, 1019, 1026, 1037, 1044, 1062, 1064, 1066, 1075, 1076, 1077, 1078, 1079, 1081, 1087, 1094, 1112, 1118, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1135, 1136, 1137, 1144, 1148, 1149, 1153, 1166, 1167, 1173, 1174, 1177, 1182, 1183, 1184, 1187, 1189, 1190, 1194, 1214, 1222, 1233, 1257, 1261], "previous": [2, 3], "save": [2, 3, 6, 201, 216, 241, 278, 308, 391, 399, 412, 416, 429, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 716, 757, 758, 766, 770, 782, 810, 815, 832, 876, 965, 982, 986, 999], "option": [2, 3, 4, 5, 6, 30, 34, 35, 36, 47, 63, 129, 131, 132, 133, 134, 135, 137, 141, 143, 144, 145, 146, 148, 149, 151, 156, 157, 158, 159, 162, 163, 164, 201, 211, 216, 225, 256, 262, 273, 277, 308, 390, 479, 536, 542, 588, 589, 591, 593, 595, 597, 600, 602, 604, 617, 625, 645, 647, 684, 752, 760, 770, 782, 810, 814, 815, 823, 842, 849, 876, 882, 956, 1047, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1148, 1155, 1175, 1177, 1210, 1222, 1233, 1250, 1254], "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 33, 35, 36, 42, 47, 55, 76, 87, 91, 107, 111, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 173, 180, 181, 182, 187, 189, 193, 199, 201, 213, 214, 215, 216, 217, 225, 234, 238, 241, 242, 244, 245, 247, 248, 256, 264, 271, 273, 274, 276, 277, 278, 284, 308, 311, 312, 357, 383, 384, 385, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 438, 441, 451, 453, 465, 479, 497, 509, 521, 530, 542, 560, 561, 563, 568, 569, 572, 575, 577, 587, 588, 590, 592, 594, 596, 598, 601, 603, 605, 608, 620, 631, 632, 635, 637, 647, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 682, 694, 695, 698, 699, 710, 711, 712, 713, 714, 715, 716, 730, 745, 749, 756, 757, 758, 766, 769, 770, 788, 796, 797, 798, 803, 810, 814, 815, 823, 830, 832, 834, 835, 842, 847, 849, 854, 855, 876, 882, 921, 950, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1009, 1014, 1047, 1063, 1075, 1087, 1103, 1104, 1105, 1108, 1112, 1123, 1135, 1161, 1162, 1165, 1167, 1177, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1194, 1209, 1224, 1233, 1241, 1242, 1243, 1244, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261], "json": [2, 3, 5, 6, 39, 40, 126, 138, 139, 145, 147, 181, 249, 308, 385, 453, 542, 545, 637, 638, 669, 770, 782, 797, 836, 876, 880, 1167, 1168, 1200], "paramet": [2, 3, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 72, 76, 91, 100, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 170, 172, 173, 174, 178, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 211, 213, 214, 215, 216, 218, 219, 223, 225, 226, 229, 230, 232, 233, 234, 236, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 287, 291, 293, 294, 300, 302, 308, 317, 319, 320, 321, 322, 323, 333, 340, 341, 344, 345, 352, 353, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 390, 392, 394, 395, 400, 412, 415, 416, 417, 418, 420, 421, 429, 432, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 465, 466, 467, 471, 479, 481, 483, 488, 489, 490, 491, 493, 496, 497, 498, 499, 500, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 528, 529, 530, 536, 542, 543, 547, 549, 552, 553, 554, 555, 556, 557, 562, 563, 567, 568, 569, 572, 573, 575, 576, 578, 580, 581, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 667, 668, 670, 671, 672, 674, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 766, 770, 786, 788, 789, 791, 792, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 818, 819, 823, 824, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 861, 863, 864, 870, 872, 876, 880, 881, 882, 885, 886, 887, 888, 897, 904, 905, 908, 909, 916, 917, 921, 922, 924, 925, 926, 927, 928, 929, 930, 938, 939, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 956, 958, 960, 961, 966, 982, 985, 986, 987, 988, 990, 991, 999, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1026, 1027, 1028, 1030, 1031, 1032, 1044, 1047, 1049, 1054, 1055, 1056, 1057, 1059, 1062, 1063, 1064, 1065, 1066, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1085, 1086, 1087, 1088, 1094, 1108, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1144, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1197, 1198, 1201, 1205, 1209, 1210, 1211, 1212, 1214, 1215, 1218, 1219, 1222, 1223, 1224, 1233, 1241, 1242, 1243, 1244, 1245, 1247, 1251, 1255, 1258], "produc": [2, 3, 159, 163, 215, 308, 341, 490, 539, 731, 814, 819, 876, 905, 1056], "load_from_fil": [2, 5, 6], "file": [2, 3, 5, 6, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 181, 189, 249, 308, 385, 453, 542, 545, 555, 557, 770, 797, 836, 876, 880, 1014, 1233], "current": [2, 3, 5, 6, 30, 34, 123, 131, 132, 134, 141, 143, 148, 174, 175, 215, 216, 256, 266, 271, 308, 312, 399, 521, 569, 770, 789, 790, 814, 815, 842, 876, 882, 938, 940, 957, 965, 1108, 1212, 1217, 1233, 1244, 1258], "path": [3, 6, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 181, 249, 308, 385, 542, 545, 610, 638, 770, 797, 836, 839, 876, 880, 1139, 1168, 1233, 1261], "load": [3, 5, 6, 119, 121, 131, 133, 134, 140, 144, 145, 162, 164, 308, 770, 782, 811, 818, 876, 880, 1261], "reset": [4, 168], "default": [4, 7, 9, 10, 14, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 53, 54, 55, 59, 62, 63, 64, 116, 118, 119, 120, 121, 122, 123, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 148, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 168, 180, 184, 187, 200, 201, 202, 213, 215, 216, 223, 225, 232, 234, 241, 242, 243, 244, 245, 249, 252, 256, 257, 259, 264, 266, 267, 271, 274, 276, 277, 279, 284, 293, 308, 319, 320, 322, 345, 352, 357, 383, 390, 415, 434, 436, 437, 439, 440, 460, 496, 500, 509, 514, 515, 517, 521, 523, 524, 529, 536, 539, 542, 560, 561, 563, 569, 575, 578, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 608, 611, 613, 622, 623, 631, 636, 647, 652, 653, 654, 657, 659, 660, 662, 664, 684, 685, 688, 690, 693, 697, 698, 701, 702, 704, 711, 712, 713, 714, 715, 716, 719, 722, 726, 727, 728, 730, 742, 745, 751, 752, 757, 758, 759, 761, 770, 791, 792, 796, 799, 801, 809, 810, 814, 815, 823, 832, 836, 838, 842, 843, 847, 849, 850, 855, 863, 876, 882, 886, 887, 909, 916, 921, 939, 950, 951, 956, 985, 1005, 1007, 1008, 1010, 1011, 1026, 1062, 1066, 1075, 1080, 1081, 1087, 1103, 1104, 1108, 1112, 1114, 1118, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1135, 1141, 1144, 1152, 1153, 1154, 1161, 1164, 1166, 1177, 1182, 1183, 1184, 1187, 1189, 1190, 1192, 1194, 1212, 1214, 1222, 1223, 1233, 1253, 1261], "state": [4, 99, 706, 782, 801, 803, 828, 839, 876, 1258], "note": [4, 10, 20, 35, 36, 46, 47, 54, 61, 62, 64, 77, 84, 85, 116, 117, 118, 120, 122, 123, 129, 131, 132, 133, 134, 138, 139, 144, 145, 149, 152, 154, 157, 159, 163, 165, 168, 170, 176, 178, 180, 190, 201, 202, 211, 212, 213, 215, 216, 219, 230, 233, 234, 241, 242, 243, 244, 252, 256, 263, 266, 268, 271, 273, 277, 278, 282, 284, 285, 308, 352, 372, 380, 381, 388, 389, 395, 409, 410, 412, 416, 429, 438, 445, 451, 453, 460, 467, 474, 475, 493, 496, 514, 521, 530, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 582, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 617, 623, 624, 630, 631, 632, 633, 634, 635, 639, 640, 643, 644, 647, 652, 653, 654, 657, 658, 667, 668, 673, 680, 689, 691, 698, 706, 711, 712, 714, 715, 716, 720, 730, 742, 744, 745, 749, 757, 758, 760, 761, 766, 770, 781, 792, 796, 803, 804, 810, 811, 814, 815, 818, 830, 832, 838, 839, 841, 842, 849, 852, 855, 856, 876, 882, 916, 939, 947, 948, 951, 954, 955, 961, 979, 980, 982, 986, 999, 1009, 1016, 1025, 1026, 1032, 1059, 1062, 1080, 1094, 1118, 1122, 1129, 1136, 1138, 1141, 1143, 1148, 1153, 1154, 1160, 1161, 1162, 1163, 1164, 1165, 1169, 1170, 1173, 1174, 1177, 1182, 1183, 1184, 1187, 1188, 1197, 1204, 1215, 1217, 1233, 1237, 1241, 1242, 1246, 1247, 1258], "method": [4, 31, 34, 35, 36, 37, 38, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 115, 117, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 149, 156, 159, 163, 168, 176, 180, 181, 184, 189, 200, 207, 213, 219, 230, 236, 242, 243, 244, 252, 274, 282, 289, 294, 300, 308, 317, 320, 321, 352, 372, 385, 418, 421, 435, 436, 444, 451, 453, 456, 458, 465, 481, 514, 528, 530, 545, 547, 549, 551, 552, 554, 556, 558, 559, 562, 563, 564, 567, 573, 576, 578, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 611, 653, 654, 655, 656, 661, 667, 672, 680, 682, 687, 702, 732, 743, 762, 763, 765, 766, 770, 771, 772, 775, 776, 777, 778, 779, 782, 792, 796, 797, 799, 813, 829, 838, 847, 852, 859, 864, 870, 876, 881, 888, 916, 939, 951, 988, 991, 1014, 1015, 1030, 1080, 1094, 1113, 1114, 1128, 1141, 1191, 1197, 1216, 1225, 1227, 1229, 1233, 1234, 1238, 1239, 1240, 1242, 1246], "oper": [4, 36, 46, 55, 85, 93, 96, 103, 110, 116, 118, 119, 120, 121, 122, 129, 131, 175, 189, 192, 194, 200, 206, 217, 219, 226, 230, 232, 233, 237, 239, 241, 244, 245, 250, 252, 261, 267, 268, 273, 276, 286, 287, 308, 317, 318, 321, 352, 377, 378, 379, 380, 381, 382, 435, 436, 451, 453, 456, 458, 481, 509, 510, 511, 512, 513, 514, 521, 528, 544, 547, 549, 550, 551, 552, 554, 556, 558, 559, 562, 563, 564, 567, 568, 573, 580, 608, 611, 672, 680, 687, 688, 690, 700, 701, 705, 717, 749, 760, 770, 782, 790, 794, 796, 800, 803, 809, 811, 814, 818, 823, 824, 833, 837, 838, 842, 851, 857, 876, 880, 916, 940, 944, 945, 946, 947, 948, 949, 1014, 1075, 1076, 1077, 1078, 1079, 1080, 1116, 1135, 1141, 1208, 1213, 1214, 1215, 1233, 1257, 1258], "remov": [4, 129, 130, 143, 170, 182, 264, 308, 441, 552, 652, 653, 654, 655, 656, 718, 770, 798, 876, 1182, 1183, 1184, 1185, 1186, 1209, 1233, 1260], "environ": [4, 30, 141, 143, 146, 148, 162, 165, 266, 308], "ani": [4, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 52, 53, 54, 62, 63, 65, 116, 117, 118, 119, 120, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 146, 148, 149, 156, 158, 159, 161, 163, 168, 172, 178, 184, 189, 191, 192, 194, 211, 213, 214, 215, 216, 219, 223, 233, 242, 243, 244, 256, 259, 261, 262, 263, 266, 267, 268, 271, 272, 274, 276, 277, 285, 308, 312, 317, 320, 321, 345, 366, 367, 368, 382, 383, 416, 417, 435, 436, 446, 447, 451, 454, 456, 458, 462, 471, 481, 488, 493, 500, 528, 529, 530, 536, 544, 547, 549, 551, 552, 554, 556, 558, 559, 562, 563, 567, 572, 575, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 623, 625, 636, 653, 654, 655, 656, 657, 659, 660, 662, 664, 672, 678, 679, 680, 687, 688, 689, 691, 701, 702, 703, 730, 732, 746, 747, 760, 770, 786, 791, 792, 799, 805, 806, 814, 815, 827, 842, 846, 847, 849, 856, 876, 880, 882, 886, 909, 929, 934, 949, 950, 986, 987, 1014, 1017, 1021, 1028, 1037, 1046, 1054, 1059, 1066, 1094, 1112, 1118, 1119, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1153, 1155, 1166, 1187, 1189, 1190, 1192, 1194, 1212, 1213, 1214, 1215, 1217, 1218, 1233, 1258, 1261], "local": [4, 35, 131, 133, 144, 145, 148, 308, 429, 570, 571, 770, 932, 933, 962, 963, 986, 989, 999, 1109, 1110, 1233, 1242], "non": [4, 33, 35, 36, 42, 47, 62, 63, 121, 150, 172, 179, 214, 225, 241, 247, 248, 252, 272, 273, 277, 282, 283, 308, 366, 367, 372, 376, 377, 390, 415, 467, 521, 529, 530, 569, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 626, 632, 639, 667, 671, 678, 679, 689, 691, 699, 700, 701, 703, 705, 709, 716, 734, 736, 739, 746, 747, 748, 752, 754, 770, 786, 795, 823, 832, 834, 835, 838, 846, 849, 852, 853, 876, 880, 882, 929, 939, 944, 951, 956, 985, 1032, 1087, 1094, 1108, 1118, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1141, 1156, 1162, 1169, 1197, 1214, 1218, 1233, 1251, 1258], "env": [4, 164], "back": [4, 47, 189, 201, 267, 268, 308, 542, 568, 665, 770, 810, 836, 876, 1014, 1195, 1215, 1233], "valu": [4, 10, 11, 12, 13, 17, 28, 30, 32, 33, 36, 41, 42, 45, 46, 47, 55, 56, 59, 72, 73, 82, 85, 93, 118, 119, 121, 122, 129, 130, 131, 132, 143, 149, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 170, 171, 172, 180, 184, 186, 189, 190, 191, 192, 199, 201, 202, 203, 207, 211, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 232, 234, 235, 236, 238, 241, 242, 243, 244, 245, 249, 252, 255, 257, 258, 259, 260, 262, 263, 267, 268, 272, 273, 276, 277, 278, 279, 286, 289, 290, 292, 295, 296, 298, 299, 308, 312, 316, 317, 318, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 377, 378, 381, 382, 383, 386, 388, 389, 394, 398, 408, 413, 430, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 490, 491, 492, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 514, 516, 517, 518, 519, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 546, 547, 548, 549, 550, 560, 561, 562, 563, 566, 568, 569, 572, 573, 575, 576, 578, 581, 582, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 611, 614, 615, 616, 617, 619, 620, 621, 623, 624, 626, 627, 628, 629, 631, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 649, 650, 651, 658, 667, 669, 672, 673, 675, 676, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 696, 699, 701, 703, 705, 706, 707, 708, 709, 719, 720, 725, 726, 727, 728, 730, 733, 734, 735, 736, 737, 738, 739, 740, 744, 745, 746, 747, 753, 754, 760, 770, 785, 786, 796, 799, 804, 805, 806, 810, 812, 813, 814, 815, 820, 821, 822, 823, 825, 826, 829, 830, 832, 836, 838, 841, 843, 844, 846, 849, 850, 859, 860, 862, 865, 866, 868, 869, 876, 882, 884, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 922, 923, 925, 926, 927, 928, 930, 936, 939, 941, 942, 943, 944, 949, 950, 951, 952, 954, 955, 960, 964, 978, 983, 1000, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057, 1058, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1080, 1082, 1083, 1084, 1085, 1088, 1089, 1094, 1095, 1096, 1098, 1099, 1101, 1103, 1104, 1105, 1107, 1108, 1111, 1112, 1113, 1114, 1118, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1137, 1138, 1141, 1145, 1146, 1147, 1148, 1150, 1153, 1154, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1179, 1180, 1181, 1188, 1197, 1200, 1204, 1205, 1206, 1207, 1214, 1215, 1216, 1220, 1222, 1224, 1233, 1241, 1246, 1248, 1250, 1251, 1253, 1254, 1258, 1260, 1261], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 72, 76, 84, 85, 88, 91, 92, 93, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 138, 139, 140, 143, 144, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 766, 770, 782, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1233, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1258, 1259, 1260], "contain": [5, 33, 34, 35, 36, 42, 47, 52, 87, 118, 121, 123, 131, 132, 133, 144, 145, 158, 159, 161, 163, 172, 177, 184, 185, 201, 209, 214, 230, 266, 267, 271, 272, 277, 289, 308, 320, 322, 345, 364, 365, 385, 459, 471, 500, 530, 623, 629, 631, 633, 634, 636, 638, 650, 651, 667, 688, 689, 690, 691, 701, 705, 732, 770, 786, 794, 797, 799, 800, 810, 828, 846, 849, 859, 876, 880, 882, 886, 887, 909, 1024, 1066, 1100, 1153, 1159, 1161, 1163, 1164, 1166, 1168, 1180, 1181, 1197, 1208, 1214, 1233, 1250], "save_to_fil": 5, "json_str": [5, 138, 139], "none": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 54, 56, 59, 62, 63, 85, 116, 118, 119, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 174, 179, 180, 184, 190, 191, 194, 199, 201, 202, 207, 211, 215, 216, 217, 219, 222, 225, 230, 231, 234, 241, 242, 245, 249, 252, 254, 255, 262, 264, 266, 267, 268, 271, 273, 274, 275, 276, 277, 278, 289, 293, 308, 320, 322, 323, 335, 336, 337, 344, 345, 357, 360, 372, 376, 377, 378, 381, 383, 388, 389, 397, 412, 415, 436, 437, 438, 439, 440, 441, 444, 445, 446, 452, 459, 460, 462, 465, 466, 467, 474, 475, 476, 477, 482, 484, 485, 492, 498, 500, 502, 509, 510, 511, 512, 513, 515, 521, 529, 530, 539, 542, 543, 545, 550, 563, 564, 565, 566, 568, 569, 575, 578, 579, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 608, 611, 612, 613, 614, 618, 619, 623, 624, 626, 628, 629, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 662, 664, 667, 668, 669, 670, 677, 684, 689, 690, 691, 693, 699, 701, 703, 705, 709, 711, 712, 713, 714, 715, 716, 718, 719, 726, 727, 728, 729, 730, 731, 732, 734, 736, 739, 745, 746, 747, 752, 754, 756, 757, 758, 760, 770, 789, 790, 792, 795, 796, 799, 801, 804, 805, 810, 813, 814, 815, 817, 819, 823, 826, 832, 836, 838, 839, 840, 841, 847, 848, 849, 854, 859, 863, 864, 876, 880, 882, 886, 887, 895, 896, 900, 901, 908, 909, 921, 938, 939, 944, 950, 951, 953, 954, 955, 963, 970, 971, 972, 976, 985, 1005, 1008, 1009, 1010, 1011, 1015, 1016, 1017, 1024, 1026, 1028, 1030, 1031, 1032, 1042, 1043, 1046, 1047, 1048, 1050, 1051, 1054, 1058, 1064, 1066, 1068, 1075, 1076, 1077, 1078, 1079, 1081, 1087, 1094, 1095, 1096, 1097, 1098, 1107, 1112, 1113, 1114, 1118, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1135, 1136, 1137, 1138, 1141, 1144, 1145, 1148, 1149, 1152, 1153, 1154, 1156, 1158, 1159, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1187, 1188, 1189, 1190, 1192, 1194, 1197, 1200, 1210, 1211, 1212, 1214, 1215, 1216, 1222, 1223, 1233, 1241, 1243, 1244, 1245, 1247, 1250, 1251, 1258], "written": [6, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 249, 308, 542, 836, 876], "leav": [6, 225, 308, 521, 823, 876], "directli": [6, 30, 54, 131, 159, 163, 168, 244, 266, 308, 437, 439, 440, 582, 745, 770, 792, 876, 1008, 1010, 1011, 1118, 1212, 1233, 1244, 1258, 1261], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 493, 632, 1059, 1162], "bool": [7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 47, 53, 54, 55, 84, 116, 117, 118, 119, 121, 122, 123, 126, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 170, 172, 173, 174, 175, 180, 182, 186, 191, 192, 193, 194, 198, 199, 200, 201, 205, 206, 208, 209, 210, 213, 215, 216, 223, 232, 234, 242, 243, 244, 245, 250, 253, 255, 256, 259, 261, 262, 264, 267, 268, 272, 273, 274, 275, 277, 278, 280, 282, 290, 292, 295, 298, 308, 319, 320, 321, 322, 323, 333, 336, 337, 340, 344, 345, 353, 358, 361, 362, 364, 365, 367, 368, 377, 378, 379, 380, 381, 382, 383, 390, 402, 417, 434, 435, 436, 437, 439, 440, 456, 458, 459, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 489, 493, 496, 498, 500, 509, 516, 522, 528, 529, 530, 534, 535, 536, 537, 538, 539, 543, 562, 563, 565, 567, 570, 571, 575, 578, 580, 588, 589, 591, 593, 595, 597, 599, 600, 602, 604, 608, 610, 612, 617, 619, 620, 623, 624, 625, 626, 627, 629, 634, 636, 643, 644, 645, 648, 649, 651, 657, 659, 660, 662, 664, 668, 670, 679, 681, 684, 687, 688, 689, 690, 691, 693, 696, 697, 698, 701, 702, 705, 706, 711, 712, 714, 715, 726, 727, 730, 732, 742, 745, 749, 752, 757, 758, 760, 761, 770, 786, 788, 789, 791, 792, 796, 798, 801, 803, 805, 806, 809, 810, 814, 815, 819, 823, 828, 837, 839, 841, 842, 846, 847, 848, 849, 852, 860, 862, 865, 868, 876, 880, 882, 886, 887, 897, 900, 901, 904, 908, 909, 917, 922, 924, 925, 927, 928, 930, 932, 934, 938, 944, 945, 946, 947, 948, 949, 950, 956, 968, 987, 1005, 1006, 1008, 1010, 1011, 1018, 1024, 1025, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1050, 1051, 1055, 1059, 1062, 1064, 1066, 1075, 1082, 1088, 1094, 1106, 1109, 1110, 1112, 1114, 1115, 1116, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1138, 1139, 1143, 1148, 1150, 1153, 1154, 1155, 1156, 1157, 1159, 1164, 1166, 1173, 1174, 1175, 1178, 1179, 1181, 1187, 1189, 1190, 1192, 1194, 1209, 1214, 1215, 1219, 1222, 1233, 1241, 1242, 1244, 1250, 1254, 1258], "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 53, 54, 55, 116, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 131, 133, 134, 135, 137, 140, 141, 143, 144, 146, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 168, 170, 173, 174, 175, 180, 182, 186, 191, 192, 194, 198, 199, 200, 201, 206, 208, 209, 210, 213, 215, 216, 217, 222, 223, 229, 230, 232, 234, 235, 242, 243, 244, 245, 247, 255, 256, 259, 261, 262, 264, 266, 267, 268, 271, 273, 274, 275, 276, 277, 278, 282, 288, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 318, 319, 320, 321, 322, 323, 334, 336, 337, 340, 344, 345, 353, 357, 361, 362, 364, 365, 367, 368, 377, 378, 379, 380, 381, 383, 390, 392, 395, 398, 400, 402, 409, 410, 412, 413, 415, 416, 417, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 434, 435, 436, 437, 439, 440, 447, 454, 456, 457, 458, 459, 462, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 489, 496, 498, 500, 516, 521, 528, 529, 530, 534, 535, 536, 537, 538, 539, 540, 543, 544, 562, 563, 565, 567, 570, 571, 575, 580, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 612, 617, 619, 620, 623, 624, 625, 626, 627, 629, 634, 636, 637, 638, 643, 644, 648, 649, 651, 657, 659, 660, 662, 664, 668, 670, 679, 681, 684, 687, 688, 689, 690, 691, 693, 696, 697, 698, 702, 711, 714, 720, 726, 732, 742, 745, 749, 752, 757, 760, 761, 770, 788, 789, 790, 791, 792, 796, 798, 801, 803, 805, 806, 809, 810, 814, 815, 817, 819, 823, 828, 834, 839, 841, 842, 847, 848, 849, 852, 858, 860, 862, 865, 866, 867, 868, 869, 870, 871, 876, 880, 882, 886, 887, 898, 900, 901, 904, 908, 909, 917, 924, 925, 927, 928, 930, 932, 934, 937, 938, 950, 956, 957, 958, 961, 964, 965, 966, 967, 968, 972, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1006, 1008, 1010, 1011, 1018, 1024, 1025, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1050, 1051, 1055, 1062, 1064, 1066, 1082, 1094, 1100, 1106, 1109, 1110, 1112, 1115, 1116, 1129, 1148, 1150, 1153, 1154, 1155, 1156, 1157, 1159, 1164, 1166, 1167, 1168, 1173, 1174, 1178, 1179, 1181, 1187, 1189, 1190, 1192, 1194, 1209, 1214, 1215, 1222, 1224, 1233, 1241, 1242, 1244, 1246, 1250, 1251, 1254, 1258, 1261], "ascii": [7, 20, 625, 635, 639, 640, 645, 647, 658, 667, 882, 1155, 1165, 1169, 1170, 1175, 1177, 1188, 1197], "charact": [7, 9, 12, 20, 26, 27, 28, 33, 34, 42, 128, 129, 130, 132, 143, 308, 412, 630, 632, 635, 639, 640, 641, 642, 643, 644, 647, 648, 649, 652, 653, 654, 655, 656, 658, 667, 828, 876, 882, 982, 1160, 1162, 1165, 1169, 1170, 1171, 1172, 1173, 1174, 1177, 1178, 1179, 1182, 1183, 1184, 1188, 1197, 1254], "displai": [7, 10, 11, 12, 13, 17, 19, 23, 25, 36, 180, 199, 308, 796, 801, 876], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 34, 35, 36, 116, 123, 126, 133, 134, 144, 145, 215, 234, 256, 261, 268, 276, 277, 308, 312, 749, 782, 814, 842, 849, 876, 1242, 1243, 1244, 1245, 1247, 1248, 1257, 1258], "outlin": 7, "fals": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 35, 36, 41, 42, 43, 44, 45, 47, 53, 54, 55, 117, 118, 119, 121, 122, 123, 129, 130, 131, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 170, 172, 173, 174, 175, 180, 186, 194, 198, 199, 200, 201, 205, 206, 208, 209, 210, 213, 215, 216, 217, 222, 223, 229, 230, 232, 234, 235, 242, 243, 244, 245, 247, 250, 253, 255, 256, 259, 261, 262, 264, 267, 268, 272, 273, 274, 277, 278, 280, 282, 290, 292, 295, 296, 298, 301, 308, 320, 321, 322, 333, 336, 337, 340, 344, 345, 353, 358, 361, 364, 365, 367, 368, 377, 378, 379, 380, 381, 382, 383, 390, 402, 417, 434, 435, 436, 437, 439, 440, 458, 459, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 489, 493, 496, 498, 500, 509, 516, 522, 528, 529, 530, 534, 536, 538, 540, 543, 562, 563, 565, 567, 570, 571, 575, 578, 588, 589, 591, 593, 595, 597, 599, 600, 602, 604, 608, 610, 612, 617, 619, 620, 623, 624, 625, 626, 629, 634, 636, 637, 643, 644, 645, 648, 649, 651, 657, 659, 660, 662, 679, 681, 684, 687, 688, 689, 690, 691, 693, 696, 697, 698, 701, 702, 705, 706, 711, 712, 714, 715, 726, 727, 730, 742, 745, 749, 752, 757, 758, 760, 761, 770, 786, 788, 789, 790, 791, 792, 796, 801, 803, 809, 810, 814, 815, 817, 819, 828, 834, 837, 839, 841, 842, 846, 847, 849, 852, 860, 862, 865, 866, 868, 871, 876, 880, 882, 886, 887, 897, 900, 901, 904, 908, 909, 917, 922, 924, 925, 927, 928, 930, 932, 934, 937, 938, 944, 945, 946, 947, 948, 949, 950, 956, 968, 987, 1005, 1006, 1008, 1010, 1011, 1018, 1019, 1023, 1024, 1025, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1050, 1051, 1055, 1059, 1062, 1064, 1066, 1075, 1082, 1088, 1100, 1106, 1109, 1110, 1112, 1114, 1115, 1116, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1139, 1143, 1148, 1150, 1153, 1154, 1155, 1156, 1159, 1164, 1166, 1167, 1173, 1174, 1175, 1178, 1179, 1181, 1187, 1189, 1190, 1192, 1209, 1214, 1215, 1219, 1222, 1224, 1233, 1242, 1244, 1250, 1254, 1258], "revert": [7, 9, 10], "utf8_full_condens": [7, 20, 123], "format": [7, 11, 15, 16, 20, 32, 33, 36, 37, 38, 42, 87, 127, 129, 130, 131, 135, 137, 143, 149, 188, 199, 213, 225, 243, 244, 249, 263, 306, 308, 312, 416, 418, 421, 542, 543, 657, 659, 660, 664, 716, 801, 802, 823, 836, 876, 988, 991, 1187, 1189, 1190, 1194, 1232, 1255], "style": [7, 20, 36, 131, 234, 308], "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 317, 632, 643, 653, 770, 882, 1162, 1173, 1174], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 317, 626, 632, 770, 1156, 1162, 1210, 1233], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 47, 49, 51, 55, 72, 117, 119, 138, 149, 156, 159, 173, 174, 175, 178, 180, 181, 182, 185, 190, 191, 194, 198, 199, 200, 201, 206, 207, 215, 216, 221, 222, 223, 224, 228, 234, 235, 236, 254, 255, 257, 259, 271, 279, 282, 287, 290, 292, 295, 296, 297, 298, 300, 301, 308, 316, 319, 325, 326, 327, 328, 329, 330, 348, 354, 359, 368, 370, 371, 373, 374, 375, 383, 384, 388, 389, 417, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 450, 451, 456, 458, 465, 466, 474, 475, 476, 477, 479, 481, 493, 504, 505, 517, 523, 524, 525, 526, 528, 531, 532, 533, 546, 549, 551, 560, 561, 562, 563, 569, 573, 575, 576, 577, 578, 582, 588, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 615, 616, 617, 621, 622, 671, 675, 676, 680, 685, 694, 695, 699, 700, 702, 704, 717, 718, 732, 735, 736, 737, 749, 751, 759, 766, 770, 788, 789, 796, 798, 804, 805, 809, 810, 813, 814, 815, 821, 822, 829, 841, 843, 850, 852, 854, 857, 860, 862, 865, 866, 867, 868, 870, 871, 876, 882, 889, 890, 891, 892, 893, 894, 912, 918, 923, 935, 936, 941, 942, 943, 950, 951, 954, 955, 987, 1008, 1009, 1010, 1011, 1012, 1016, 1020, 1028, 1030, 1031, 1059, 1070, 1071, 1083, 1089, 1090, 1091, 1092, 1108, 1112, 1114, 1118, 1123, 1125, 1126, 1128, 1129, 1130, 1132, 1133, 1134, 1146, 1147, 1151, 1206, 1207, 1221, 1233, 1241, 1249, 1250, 1253, 1256, 1258, 1261], "multi": [8, 36, 129, 130, 271, 308, 441, 631, 770, 1161], "automat": [8, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 143, 147, 159, 163, 165, 247, 256, 282, 308, 529, 582, 652, 653, 654, 749, 770, 834, 842, 852, 876, 880, 1118, 1182, 1183, 1184, 1217, 1233, 1242, 1244, 1247, 1258], "turn": [8, 42, 43, 44, 45, 53, 54, 129, 130, 143, 215, 216, 308, 665, 791, 792, 801, 803, 814, 815, 819, 828, 876, 1195], "struct": [8, 112, 123, 230, 247, 270, 275, 282, 308, 357, 383, 462, 521, 530, 553, 555, 557, 575, 585, 586, 633, 637, 649, 650, 684, 706, 707, 709, 731, 770, 834, 848, 852, 864, 876, 921, 950, 1087, 1094, 1112, 1121, 1163, 1167, 1179, 1180, 1214, 1233], "v": [8, 9, 41, 187, 308, 609, 689, 691, 770, 1137, 1233, 1244, 1245], "v2": [8, 135, 146], "out": [8, 14, 34, 42, 43, 44, 45, 98, 123, 151, 241, 244, 308, 344, 362, 496, 498, 624, 627, 634, 760, 832, 876, 908, 925, 1062, 1064, 1154, 1157, 1164], "separ": [9, 10, 24, 27, 32, 33, 42, 125, 126, 128, 129, 130, 134, 143, 232, 234, 264, 273, 275, 308, 342, 345, 494, 500, 530, 630, 701, 706, 707, 770, 848, 876, 906, 909, 1060, 1066, 1160, 1203, 1209, 1233, 1254], "decim": [9, 10, 11, 27, 28, 33, 36, 42, 129, 130, 143, 308, 312, 606, 661, 770, 876, 882, 1133, 1191, 1233, 1253], "set_thousands_separ": 9, "thousand": [9, 27], "group": [9, 27, 41, 45, 130, 173, 200, 201, 214, 230, 232, 234, 241, 244, 276, 278, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 318, 367, 382, 443, 449, 454, 457, 493, 529, 530, 539, 541, 568, 578, 586, 587, 619, 620, 624, 631, 632, 633, 634, 643, 644, 679, 684, 732, 770, 788, 809, 810, 832, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 880, 882, 949, 1059, 1122, 1154, 1161, 1162, 1163, 1164, 1173, 1174, 1222, 1233, 1241, 1249, 1257, 1258], "9876": 9, "54321": 9, "1010101": 9, "123456": [9, 882], "78": 9, "tbl_cell_numeric_align": [9, 10, 27], "right": [9, 10, 15, 16, 18, 27, 36, 63, 129, 130, 152, 153, 154, 155, 201, 215, 216, 241, 277, 308, 383, 437, 439, 440, 467, 510, 511, 512, 513, 575, 587, 590, 592, 594, 596, 598, 601, 603, 605, 609, 617, 699, 711, 712, 714, 715, 757, 758, 770, 810, 814, 815, 832, 849, 876, 950, 1008, 1010, 1011, 1032, 1076, 1077, 1078, 1079, 1112, 1137, 1148, 1233, 1248, 1252], "thousands_separ": [9, 10, 27], "decimal_separ": [9, 27], "float_precis": [9, 10, 27, 33, 36, 42, 308, 876], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 130, 151, 152, 154, 185, 199, 200, 214, 217, 265, 286, 308, 464, 543, 770, 791, 812, 876, 882, 1037, 1211, 1233, 1261], "876": 9, "543": 9, "010": [9, 662, 1192], "101": [9, 27, 394, 662, 882, 1192, 1261], "000": [9, 10, 27, 36, 308, 1261], "123": [9, 626, 632, 644, 667, 760, 882, 1156, 1162, 1197, 1210, 1233], "456": [9, 10, 394, 882, 960, 1210, 1233], "780": 9, "precis": [10, 11, 33, 36, 42, 63, 131, 213, 243, 244, 263, 266, 271, 308, 392, 661, 876, 882, 958, 1191], "int": [10, 12, 13, 14, 17, 25, 26, 33, 34, 36, 41, 42, 45, 49, 56, 63, 119, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 172, 174, 180, 187, 190, 191, 195, 197, 199, 202, 203, 204, 206, 211, 213, 214, 216, 218, 219, 229, 230, 239, 241, 242, 245, 251, 252, 254, 257, 260, 265, 269, 272, 276, 279, 281, 284, 285, 291, 302, 308, 317, 340, 344, 352, 354, 357, 359, 360, 366, 367, 382, 386, 390, 437, 439, 440, 444, 445, 446, 452, 454, 455, 457, 460, 461, 462, 483, 489, 491, 496, 497, 498, 499, 509, 514, 515, 517, 519, 520, 521, 523, 567, 569, 572, 573, 575, 578, 581, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 613, 618, 622, 631, 635, 637, 641, 642, 643, 647, 649, 650, 658, 661, 662, 667, 674, 678, 679, 685, 687, 693, 702, 704, 710, 713, 716, 722, 724, 726, 727, 741, 742, 745, 746, 747, 751, 752, 755, 756, 759, 761, 770, 786, 789, 796, 803, 804, 805, 808, 811, 815, 818, 828, 838, 840, 843, 845, 846, 850, 851, 855, 856, 861, 872, 876, 881, 882, 895, 896, 904, 908, 916, 918, 921, 923, 929, 930, 937, 938, 949, 952, 953, 956, 1007, 1008, 1010, 1011, 1015, 1016, 1017, 1021, 1022, 1026, 1027, 1028, 1046, 1048, 1049, 1055, 1057, 1062, 1063, 1064, 1065, 1075, 1080, 1081, 1083, 1085, 1086, 1087, 1089, 1100, 1101, 1103, 1104, 1105, 1107, 1108, 1111, 1112, 1114, 1119, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1144, 1149, 1152, 1161, 1165, 1167, 1171, 1172, 1173, 1177, 1179, 1180, 1188, 1191, 1192, 1197, 1204, 1205, 1211, 1218, 1223, 1233, 1244, 1247, 1258, 1261], "control": [10, 11, 36, 54, 55, 134, 157, 159, 255, 256, 266, 308, 582, 620, 749, 770, 792, 801, 841, 842, 876, 1118, 1212, 1233, 1244, 1247, 1258], "number": [10, 11, 12, 13, 14, 17, 25, 33, 34, 36, 41, 42, 45, 46, 47, 61, 62, 63, 77, 85, 105, 116, 118, 119, 120, 122, 125, 126, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 146, 147, 148, 150, 157, 159, 162, 164, 165, 166, 172, 174, 179, 187, 188, 190, 191, 199, 203, 204, 213, 214, 217, 218, 229, 230, 241, 245, 252, 257, 260, 272, 276, 279, 281, 289, 291, 293, 302, 308, 334, 350, 352, 357, 360, 366, 367, 376, 382, 383, 386, 390, 393, 401, 403, 405, 407, 408, 417, 430, 431, 433, 437, 438, 439, 440, 444, 445, 446, 452, 461, 474, 475, 482, 483, 491, 499, 502, 507, 509, 514, 517, 519, 521, 523, 568, 572, 575, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 613, 622, 635, 637, 639, 640, 643, 647, 649, 650, 658, 661, 674, 678, 679, 685, 698, 702, 703, 704, 716, 724, 729, 746, 747, 751, 755, 759, 770, 786, 789, 795, 802, 803, 804, 805, 811, 818, 828, 838, 843, 845, 846, 850, 851, 859, 861, 863, 872, 876, 881, 914, 916, 921, 929, 938, 949, 950, 952, 956, 959, 967, 969, 974, 977, 978, 987, 1000, 1001, 1003, 1007, 1008, 1009, 1010, 1011, 1015, 1016, 1017, 1027, 1048, 1049, 1057, 1065, 1068, 1073, 1075, 1080, 1085, 1087, 1100, 1101, 1112, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1141, 1144, 1152, 1165, 1167, 1169, 1170, 1173, 1177, 1179, 1180, 1188, 1191, 1205, 1218, 1223, 1233, 1248, 1253, 1261], "place": [10, 11, 33, 42, 183, 189, 205, 206, 234, 239, 244, 255, 280, 308, 312, 333, 345, 353, 500, 516, 619, 620, 696, 770, 841, 876, 888, 897, 909, 917, 1014, 1066, 1082, 1115, 1150, 1233], "float": [10, 11, 33, 36, 42, 66, 67, 129, 130, 143, 149, 152, 153, 154, 155, 156, 159, 163, 170, 180, 187, 190, 216, 236, 245, 266, 267, 300, 308, 340, 371, 383, 388, 389, 417, 434, 435, 436, 437, 439, 440, 445, 450, 451, 456, 458, 465, 469, 472, 474, 475, 476, 477, 481, 489, 509, 524, 528, 529, 531, 546, 560, 561, 562, 563, 573, 575, 576, 588, 589, 591, 593, 595, 597, 598, 600, 602, 604, 606, 608, 680, 743, 745, 770, 796, 804, 815, 829, 839, 870, 876, 882, 904, 930, 936, 950, 951, 953, 954, 955, 987, 1005, 1007, 1008, 1010, 1011, 1016, 1020, 1028, 1047, 1055, 1075, 1090, 1103, 1104, 1111, 1112, 1113, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1135, 1138, 1148, 1152, 1204, 1214, 1223, 1233, 1258, 1261], "point": [10, 11, 36, 37, 38, 42, 43, 44, 45, 53, 54, 63, 65, 66, 67, 126, 141, 148, 149, 159, 163, 190, 201, 217, 256, 261, 266, 271, 276, 277, 308, 312, 371, 382, 383, 388, 416, 417, 445, 450, 451, 462, 474, 475, 509, 530, 575, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 746, 747, 770, 791, 792, 804, 810, 819, 830, 842, 849, 876, 934, 936, 949, 950, 954, 986, 987, 1016, 1020, 1028, 1075, 1112, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1212, 1217, 1233, 1258], "standard": [10, 36, 257, 266, 271, 308, 403, 439, 600, 601, 617, 622, 638, 751, 766, 770, 843, 876, 969, 1010, 1148, 1152, 1168, 1233, 1249, 1261], "behaviour": [10, 47, 55, 184, 256, 308, 624, 631, 632, 634, 643, 644, 680, 749, 770, 799, 842, 876, 1154, 1161, 1162, 1164, 1173, 1174], "when": [10, 14, 17, 19, 23, 33, 34, 35, 36, 41, 42, 45, 46, 62, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 126, 129, 130, 131, 132, 134, 135, 137, 140, 141, 143, 144, 146, 147, 149, 152, 153, 154, 155, 159, 163, 172, 180, 185, 187, 189, 191, 194, 201, 215, 219, 233, 242, 244, 247, 248, 252, 255, 264, 266, 267, 271, 272, 274, 277, 283, 308, 352, 372, 385, 390, 437, 439, 440, 446, 514, 521, 540, 572, 582, 611, 619, 620, 625, 630, 635, 639, 640, 645, 647, 652, 653, 654, 657, 658, 696, 698, 706, 720, 770, 786, 796, 797, 805, 810, 814, 819, 834, 835, 838, 841, 846, 847, 849, 853, 876, 916, 939, 951, 956, 1007, 1008, 1010, 1011, 1014, 1017, 1080, 1118, 1136, 1138, 1141, 1155, 1160, 1165, 1169, 1170, 1175, 1177, 1182, 1183, 1184, 1187, 1188, 1209, 1214, 1233, 1247, 1258], "larger": [10, 42, 43, 44, 45, 53, 54, 451, 702, 770, 791, 792, 876], "should": [10, 34, 36, 42, 43, 44, 45, 55, 116, 118, 120, 122, 126, 133, 134, 138, 139, 143, 147, 149, 156, 157, 159, 163, 182, 213, 216, 219, 242, 243, 244, 255, 263, 264, 275, 294, 308, 318, 382, 385, 432, 438, 441, 474, 475, 493, 530, 542, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 609, 617, 620, 684, 696, 716, 718, 730, 732, 746, 747, 760, 766, 770, 797, 798, 803, 814, 815, 819, 836, 841, 848, 876, 882, 949, 1002, 1009, 1059, 1094, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1137, 1148, 1222, 1233, 1242], "ensur": [10, 36, 132, 158, 161, 200, 232, 242, 267, 308, 467, 529, 770, 809, 819, 876, 880, 882, 1214, 1233], "awar": [10, 131, 213, 243, 244, 263, 308, 438, 625, 645, 660, 770, 803, 876, 1009, 1155, 1175, 1190, 1233], "both": [10, 25, 33, 42, 46, 84, 85, 131, 176, 201, 215, 216, 226, 241, 242, 268, 277, 308, 323, 372, 383, 441, 467, 575, 587, 590, 592, 594, 596, 598, 601, 603, 605, 647, 711, 712, 714, 715, 757, 758, 766, 770, 781, 810, 814, 815, 824, 832, 849, 876, 882, 939, 1032, 1177, 1215, 1233, 1258, 1259], "limit": [10, 11, 45, 131, 132, 143, 165, 191, 308, 360, 446, 452, 770, 805, 811, 876, 1017, 1233, 1250, 1257], "represent": [10, 39, 40, 61, 62, 64, 77, 123, 265, 308, 393, 398, 401, 403, 404, 405, 406, 407, 408, 411, 413, 414, 417, 430, 431, 433, 677, 770, 801, 817, 876, 933, 959, 964, 967, 968, 969, 973, 974, 975, 977, 978, 981, 983, 984, 987, 1000, 1001, 1003, 1211, 1216, 1233], "look": [10, 201, 308, 361, 521, 810, 876, 924], "appli": [10, 20, 33, 36, 42, 55, 131, 143, 156, 159, 163, 180, 194, 219, 233, 255, 256, 266, 294, 308, 333, 393, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 411, 413, 414, 417, 419, 430, 431, 433, 439, 440, 529, 530, 572, 589, 590, 591, 592, 595, 596, 602, 603, 620, 643, 644, 657, 659, 660, 664, 696, 706, 707, 720, 731, 732, 744, 749, 760, 770, 796, 811, 818, 819, 827, 841, 842, 864, 876, 939, 959, 962, 963, 964, 967, 968, 969, 973, 974, 975, 977, 978, 981, 983, 984, 987, 989, 1000, 1001, 1003, 1010, 1011, 1094, 1124, 1125, 1127, 1131, 1173, 1174, 1187, 1189, 1190, 1194, 1233, 1241], "float64": [10, 33, 36, 42, 119, 129, 138, 156, 159, 176, 185, 187, 194, 246, 271, 282, 308, 325, 326, 327, 328, 329, 330, 368, 373, 374, 375, 384, 417, 438, 441, 474, 475, 577, 615, 616, 675, 676, 718, 742, 745, 761, 766, 770, 793, 800, 833, 852, 876, 882, 987, 1009, 1215, 1221, 1233], "dtype": [10, 36, 46, 50, 56, 62, 76, 84, 85, 94, 116, 118, 120, 122, 123, 129, 130, 131, 132, 134, 138, 139, 140, 143, 156, 157, 158, 159, 163, 170, 173, 176, 201, 216, 241, 265, 266, 267, 268, 271, 276, 285, 308, 368, 369, 380, 381, 432, 441, 454, 488, 496, 527, 529, 530, 536, 573, 580, 581, 587, 590, 592, 594, 596, 598, 601, 603, 605, 612, 637, 657, 673, 677, 683, 693, 718, 722, 726, 727, 729, 730, 731, 732, 742, 745, 752, 761, 770, 788, 793, 810, 815, 832, 856, 876, 881, 882, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 930, 931, 932, 933, 938, 947, 948, 951, 952, 1002, 1007, 1034, 1050, 1051, 1054, 1062, 1086, 1093, 1094, 1120, 1142, 1167, 1187, 1204, 1211, 1212, 1214, 1215, 1216, 1217, 1221, 1233, 1258, 1261], "doe": [10, 33, 35, 42, 47, 55, 105, 116, 118, 119, 120, 122, 123, 129, 130, 131, 132, 133, 134, 138, 139, 143, 144, 147, 149, 175, 182, 189, 192, 201, 202, 214, 215, 242, 243, 244, 274, 282, 285, 308, 311, 312, 432, 447, 451, 460, 521, 653, 654, 682, 766, 770, 790, 796, 798, 803, 806, 810, 814, 819, 847, 852, 856, 876, 940, 1002, 1014, 1018, 1025, 1026, 1143, 1233, 1237], "cover": 10, "nativ": [10, 34, 129, 131, 134, 135, 137, 141, 213, 219, 243, 244, 263, 267, 294, 308, 530, 732, 749, 770, 776, 842, 864, 876, 1094, 1214, 1233, 1258, 1261], "level": [10, 36, 41, 45, 126, 143, 146, 147, 148, 194, 219, 230, 256, 308, 312, 447, 770, 782, 811, 818, 842, 876, 1258], "larg": [10, 11, 14, 47, 131, 134, 140], "maximum": [10, 26, 33, 41, 42, 45, 63, 119, 122, 129, 130, 131, 134, 138, 140, 143, 147, 149, 157, 158, 159, 161, 163, 199, 201, 220, 221, 308, 338, 486, 531, 560, 570, 578, 635, 637, 640, 647, 658, 733, 734, 770, 810, 820, 876, 902, 970, 1052, 1095, 1103, 1109, 1114, 1165, 1167, 1170, 1177, 1188, 1233, 1249], "import": [10, 16, 28, 31, 33, 35, 36, 37, 38, 41, 47, 62, 116, 117, 120, 121, 129, 131, 132, 138, 139, 143, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 173, 180, 181, 182, 184, 199, 201, 214, 216, 225, 232, 234, 256, 264, 266, 271, 276, 278, 308, 311, 312, 384, 385, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 447, 536, 542, 588, 590, 592, 594, 596, 598, 601, 603, 605, 698, 710, 711, 712, 713, 714, 715, 716, 749, 757, 758, 766, 770, 782, 788, 792, 796, 797, 798, 799, 810, 815, 819, 823, 836, 876, 941, 943, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1009, 1035, 1038, 1040, 1041, 1123, 1146, 1206, 1233, 1237, 1242, 1256, 1258, 1261], "pi": [10, 384, 770, 941, 943, 1146, 1206, 1233, 1252, 1256], "e": [10, 31, 33, 35, 37, 38, 41, 42, 117, 126, 129, 135, 137, 146, 149, 161, 181, 199, 203, 212, 218, 260, 261, 267, 276, 308, 317, 385, 434, 438, 441, 467, 524, 530, 535, 536, 537, 539, 540, 541, 543, 544, 612, 617, 634, 653, 654, 718, 732, 749, 760, 770, 797, 817, 830, 876, 882, 1005, 1009, 1032, 1148, 1164, 1233, 1250, 1254, 1261], "const": 10, "15": [10, 36, 151, 180, 201, 206, 219, 241, 308, 382, 386, 410, 416, 429, 438, 572, 587, 602, 707, 713, 756, 757, 770, 796, 810, 832, 876, 882, 949, 952, 986, 999, 1009, 1233], "141592653589793": 10, "718281828459045": [10, 434, 524, 770, 1005, 1090, 1233], "fix": [10, 56, 65, 134, 157, 432, 716, 1002], "align": [10, 15, 16, 36, 47, 55, 308, 1259], "numer": [10, 16, 33, 36, 42, 133, 144, 173, 182, 216, 225, 234, 267, 268, 276, 308, 317, 368, 372, 451, 467, 526, 547, 549, 573, 581, 612, 633, 667, 672, 680, 770, 782, 788, 798, 815, 823, 876, 882, 930, 939, 951, 1032, 1142, 1163, 1197, 1214, 1233, 1253, 1261], "column": [10, 16, 17, 18, 21, 22, 24, 35, 36, 41, 45, 46, 47, 48, 55, 62, 76, 85, 88, 92, 116, 118, 119, 120, 121, 122, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 159, 172, 173, 176, 178, 179, 182, 183, 184, 185, 188, 192, 193, 196, 197, 199, 200, 201, 205, 206, 211, 212, 213, 215, 216, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 255, 257, 258, 259, 262, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 293, 308, 312, 319, 320, 322, 333, 342, 351, 353, 356, 367, 372, 376, 377, 383, 393, 394, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 411, 413, 414, 417, 418, 419, 421, 430, 431, 433, 441, 443, 447, 449, 462, 466, 467, 482, 488, 494, 496, 516, 520, 521, 530, 536, 537, 539, 541, 542, 551, 554, 556, 558, 559, 568, 575, 579, 581, 583, 585, 586, 587, 590, 592, 594, 596, 598, 601, 603, 605, 612, 619, 620, 623, 630, 634, 635, 636, 649, 650, 657, 658, 659, 660, 661, 662, 664, 669, 671, 679, 684, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 766, 770, 786, 788, 795, 798, 799, 800, 802, 806, 809, 810, 814, 815, 819, 820, 821, 822, 823, 825, 826, 829, 830, 832, 833, 834, 835, 836, 837, 841, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 863, 864, 876, 881, 882, 886, 887, 906, 915, 917, 920, 932, 933, 939, 944, 950, 959, 962, 963, 964, 967, 968, 969, 973, 974, 975, 977, 978, 981, 983, 984, 987, 988, 989, 991, 1000, 1001, 1003, 1013, 1025, 1028, 1031, 1054, 1060, 1062, 1082, 1086, 1112, 1119, 1122, 1142, 1153, 1160, 1164, 1166, 1179, 1180, 1187, 1189, 1190, 1191, 1192, 1194, 1200, 1203, 1209, 1210, 1222, 1233, 1248, 1250, 1251, 1253, 1254, 1256, 1259, 1260, 1261], "order": [10, 36, 42, 43, 44, 45, 47, 53, 59, 119, 131, 150, 152, 153, 154, 155, 172, 176, 177, 184, 185, 192, 200, 201, 215, 232, 233, 234, 241, 243, 245, 246, 250, 255, 266, 267, 272, 274, 278, 308, 333, 353, 358, 366, 367, 388, 389, 447, 492, 509, 516, 522, 568, 573, 578, 587, 608, 609, 610, 619, 620, 646, 653, 654, 655, 656, 670, 678, 679, 681, 682, 684, 696, 749, 760, 770, 781, 786, 794, 799, 800, 806, 809, 810, 814, 823, 832, 833, 837, 841, 842, 846, 847, 876, 881, 882, 897, 917, 922, 929, 934, 954, 955, 1018, 1044, 1058, 1075, 1082, 1088, 1114, 1120, 1135, 1137, 1139, 1150, 1176, 1201, 1218, 1219, 1220, 1222, 1233, 1241, 1244, 1250, 1257, 1258, 1261], "cleanli": [10, 199, 308, 1258], "line": [10, 20, 36, 129, 130, 134, 143, 199, 208, 210, 308, 311, 631, 1161], "up": [10, 36, 76, 132, 213, 216, 243, 244, 250, 263, 308, 371, 530, 635, 658, 770, 814, 815, 819, 837, 876, 882, 936, 1165, 1188, 1233], "xx": [10, 48, 50, 163, 180, 256, 308, 796, 876, 882, 1248, 1254, 1260], "yy": [10, 48, 50, 163, 180, 256, 308, 796, 876, 882, 1248, 1254, 1260], "11111111": 10, "44444444444": 10, "100000": [10, 27], "987654321": 10, "23456789": 10, "11": [10, 16, 41, 45, 151, 159, 171, 180, 216, 241, 308, 319, 409, 410, 412, 416, 429, 453, 465, 497, 545, 569, 578, 587, 588, 602, 618, 687, 753, 758, 766, 770, 785, 791, 792, 796, 811, 818, 828, 832, 845, 876, 882, 982, 986, 999, 1094, 1123, 1233, 1250], "111": [10, 1251], "100": [10, 17, 27, 36, 119, 122, 126, 129, 130, 131, 134, 138, 140, 143, 147, 252, 308, 582, 611, 625, 637, 645, 661, 715, 770, 838, 876, 882, 1091, 1118, 1124, 1125, 1127, 1141, 1155, 1167, 1175, 1191, 1233, 1251, 1261], "988": 10, "44": [10, 226, 308, 387, 770, 824, 876], "444": 10, "23": [10, 159, 180, 201, 241, 271, 308, 394, 398, 401, 413, 416, 431, 587, 590, 592, 594, 596, 598, 601, 603, 605, 713, 716, 756, 757, 758, 770, 796, 810, 832, 842, 876, 882, 960, 967, 1217, 1233, 1260, 1261], "789": [10, 882], "fmt": [11, 216, 308, 464, 721, 770, 812, 876], "floatfmt": 11, "mix": [11, 216, 267, 308, 749, 842, 876, 882, 951, 1233], "how": [11, 35, 36, 47, 55, 92, 132, 141, 143, 148, 184, 215, 216, 234, 276, 277, 308, 341, 386, 415, 465, 490, 491, 568, 581, 599, 657, 660, 698, 713, 760, 770, 799, 814, 849, 854, 876, 880, 905, 952, 985, 1056, 1057, 1129, 1187, 1190, 1233], "full": [11, 41, 45, 47, 55, 62, 87, 119, 122, 129, 130, 131, 133, 138, 143, 144, 145, 147, 149, 215, 277, 308, 635, 637, 657, 658, 659, 660, 664, 711, 712, 814, 819, 849, 876, 882, 1165, 1167, 1187, 1188, 1189, 1190, 1194, 1233, 1248, 1261], "scientif": 11, "notat": [11, 36, 308], "small": [11, 132, 217, 308, 416, 803, 876, 1261], "2304980958725870923": 11, "1e6": 11, "1e": [11, 152, 153, 154, 155], "230498": 11, "0000e": 11, "230498095872587": 11, "1000000": [11, 997], "00000001": [11, 687, 770], "plai": [12, 701], "sam": 12, "As": [12, 46, 84, 85, 116, 118, 119, 120, 122, 134, 138, 139, 147, 266, 271, 308, 521, 760, 876], "time": [12, 35, 52, 53, 54, 62, 64, 100, 133, 143, 144, 146, 159, 160, 163, 180, 189, 201, 216, 241, 278, 308, 340, 366, 367, 391, 392, 394, 395, 396, 399, 400, 409, 410, 412, 415, 416, 418, 420, 421, 429, 432, 438, 488, 489, 521, 586, 587, 590, 592, 594, 596, 598, 601, 603, 605, 613, 657, 660, 664, 677, 678, 679, 700, 701, 711, 712, 713, 714, 715, 716, 722, 757, 758, 770, 791, 792, 796, 810, 815, 828, 832, 876, 882, 904, 929, 957, 958, 960, 961, 965, 966, 982, 985, 986, 988, 990, 991, 999, 1002, 1009, 1014, 1054, 1055, 1122, 1144, 1187, 1190, 1194, 1216, 1218, 1233, 1241, 1247, 1255, 1261], "goe": 12, "By": [12, 14, 30, 47, 129, 130, 143, 201, 215, 216, 241, 243, 252, 257, 278, 279, 308, 352, 412, 416, 429, 514, 517, 523, 587, 590, 592, 594, 596, 598, 601, 603, 605, 611, 622, 685, 702, 704, 711, 712, 714, 715, 716, 730, 751, 757, 758, 759, 770, 791, 810, 814, 815, 832, 838, 843, 850, 876, 916, 982, 986, 999, 1080, 1141, 1152, 1223, 1233], "begin": [12, 36, 308, 437, 439, 440, 631, 658, 770, 1008, 1010, 1011, 1161, 1188, 1233], "beauti": 12, "friendship": 12, "len_byt": [12, 640, 1170], "len": [12, 36, 159, 163, 176, 214, 234, 285, 289, 294, 308, 376, 530, 539, 541, 585, 703, 726, 770, 793, 851, 856, 859, 864, 876, 881, 1121, 1233], "u32": [12, 131, 171, 173, 179, 231, 284, 285, 289, 293, 299, 301, 308, 318, 324, 331, 332, 333, 334, 335, 338, 339, 341, 350, 376, 377, 462, 482, 486, 487, 490, 502, 507, 550, 566, 578, 585, 586, 590, 592, 594, 596, 598, 601, 603, 605, 609, 626, 634, 639, 640, 677, 682, 684, 688, 692, 696, 697, 703, 705, 726, 729, 740, 770, 785, 788, 795, 826, 855, 856, 859, 863, 869, 871, 876, 882, 897, 898, 899, 902, 903, 905, 914, 930, 933, 944, 1028, 1052, 1053, 1056, 1068, 1073, 1114, 1121, 1122, 1137, 1156, 1164, 1169, 1170, 1216, 1220, 1222, 1233, 1241, 1249, 1250, 1254, 1258], "go": [12, 129, 130, 143, 629, 1159], "37": [12, 882], "bea": 12, "48": [12, 159, 241, 308, 587, 671, 770, 832, 876, 882], "fmt_str_length": [12, 712, 715], "50": [12, 27, 36, 180, 189, 199, 308, 372, 416, 429, 712, 770, 796, 876, 882, 939, 951, 999, 1233, 1248], "element": [13, 14, 25, 154, 155, 158, 161, 172, 179, 211, 234, 242, 255, 257, 272, 279, 308, 325, 326, 327, 328, 329, 330, 341, 342, 366, 367, 370, 373, 374, 375, 376, 378, 379, 380, 381, 382, 388, 389, 442, 443, 447, 460, 471, 482, 490, 492, 493, 494, 497, 502, 510, 511, 512, 513, 517, 523, 525, 526, 529, 530, 568, 569, 578, 581, 588, 589, 591, 593, 595, 597, 599, 600, 602, 604, 609, 614, 615, 616, 620, 621, 622, 649, 650, 661, 675, 676, 678, 679, 685, 696, 702, 704, 746, 747, 751, 759, 770, 786, 795, 841, 843, 846, 850, 876, 889, 890, 891, 892, 893, 894, 905, 906, 929, 935, 938, 941, 942, 943, 945, 946, 947, 948, 949, 954, 955, 1012, 1013, 1018, 1027, 1037, 1046, 1048, 1049, 1056, 1058, 1059, 1060, 1063, 1068, 1076, 1077, 1078, 1079, 1091, 1092, 1094, 1108, 1114, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1137, 1145, 1146, 1147, 1151, 1152, 1179, 1180, 1191, 1205, 1206, 1207, 1211, 1218, 1219, 1223, 1233, 1249, 1250], "empti": [13, 31, 33, 42, 96, 119, 129, 130, 134, 140, 143, 174, 175, 201, 225, 308, 623, 630, 730, 748, 789, 790, 810, 823, 876, 882, 938, 940, 1034, 1153, 1160, 1233], "alwai": [13, 33, 35, 42, 63, 65, 129, 172, 200, 215, 216, 219, 272, 294, 308, 366, 367, 529, 539, 657, 678, 679, 760, 770, 786, 814, 815, 819, 846, 876, 882, 929, 1094, 1187, 1218, 1233, 1241, 1242, 1258, 1261], "neg": [13, 61, 62, 63, 64, 129, 130, 135, 137, 141, 150, 203, 218, 241, 252, 254, 260, 285, 308, 352, 514, 515, 572, 573, 587, 611, 618, 635, 647, 658, 770, 832, 838, 840, 855, 856, 876, 882, 916, 1027, 1049, 1080, 1081, 1141, 1149, 1165, 1177, 1188, 1205, 1233], "result": [13, 33, 39, 40, 41, 42, 43, 44, 45, 47, 55, 120, 121, 122, 131, 132, 133, 134, 143, 146, 148, 149, 163, 189, 201, 202, 215, 216, 230, 234, 241, 244, 249, 250, 252, 266, 267, 268, 278, 285, 287, 293, 308, 390, 416, 418, 421, 429, 437, 438, 439, 440, 444, 451, 460, 467, 479, 520, 521, 529, 530, 542, 568, 573, 575, 582, 583, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 610, 611, 630, 648, 649, 660, 680, 684, 705, 706, 707, 713, 714, 715, 716, 730, 731, 742, 745, 746, 747, 749, 761, 770, 787, 791, 796, 810, 814, 819, 828, 832, 836, 837, 838, 856, 857, 863, 876, 882, 888, 986, 988, 991, 999, 1008, 1010, 1011, 1014, 1015, 1026, 1032, 1047, 1086, 1094, 1112, 1118, 1119, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1139, 1141, 1160, 1178, 1179, 1190, 1214, 1215, 1222, 1233, 1242, 1248, 1258, 1259, 1261], "being": [13, 37, 38, 42, 43, 44, 45, 53, 54, 63, 65, 126, 129, 130, 131, 141, 143, 148, 149, 173, 188, 256, 261, 264, 266, 271, 276, 277, 308, 312, 382, 383, 416, 462, 530, 575, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 698, 717, 746, 747, 770, 788, 791, 792, 802, 803, 842, 849, 876, 934, 949, 950, 986, 1028, 1112, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1160, 1209, 1212, 1217, 1233, 1261], "A": [13, 33, 36, 42, 53, 54, 59, 65, 123, 129, 130, 131, 132, 143, 145, 150, 165, 177, 185, 194, 201, 215, 216, 221, 223, 228, 234, 259, 262, 276, 277, 278, 282, 283, 308, 316, 388, 389, 394, 418, 421, 435, 436, 444, 456, 458, 469, 472, 474, 475, 481, 521, 528, 529, 540, 553, 562, 563, 584, 589, 591, 593, 595, 597, 600, 602, 604, 624, 625, 626, 631, 632, 633, 634, 635, 638, 640, 643, 644, 645, 647, 658, 667, 700, 716, 717, 721, 770, 794, 800, 810, 814, 815, 830, 849, 852, 853, 876, 882, 954, 955, 960, 988, 991, 1015, 1124, 1125, 1127, 1130, 1131, 1132, 1154, 1155, 1156, 1161, 1162, 1163, 1164, 1165, 1168, 1170, 1173, 1174, 1175, 1177, 1188, 1197, 1233, 1241, 1242, 1245, 1258], "content": [13, 613, 770, 1144, 1233], "final": [13, 36, 47, 148, 216, 308, 437, 439, 440, 770, 796, 803, 876, 880, 1008, 1010, 1011, 1233, 1259], "item": [13, 55, 130, 199, 242, 245, 308, 340, 344, 345, 386, 443, 489, 491, 498, 500, 509, 608, 650, 770, 904, 908, 909, 952, 1013, 1055, 1057, 1064, 1066, 1075, 1135, 1180, 1233], "num": [13, 36, 270, 308, 467, 770, 1032, 1233], "fmt_table_cell_list_len": 13, "10": [13, 16, 17, 27, 31, 33, 35, 36, 37, 38, 41, 45, 47, 55, 123, 132, 143, 151, 175, 180, 189, 198, 199, 201, 203, 205, 206, 207, 212, 216, 218, 229, 233, 234, 235, 239, 241, 247, 256, 260, 282, 287, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 319, 323, 331, 332, 333, 335, 372, 378, 381, 386, 390, 391, 393, 394, 396, 397, 399, 401, 404, 405, 406, 407, 409, 410, 411, 415, 416, 417, 419, 429, 432, 438, 459, 460, 461, 465, 471, 483, 491, 497, 499, 505, 515, 517, 519, 523, 525, 539, 541, 551, 566, 569, 572, 582, 587, 618, 662, 671, 674, 687, 698, 699, 706, 711, 713, 714, 717, 720, 722, 724, 730, 731, 755, 758, 770, 791, 792, 796, 810, 811, 813, 818, 827, 828, 832, 834, 844, 845, 852, 857, 860, 862, 865, 866, 867, 868, 869, 870, 871, 876, 882, 939, 952, 956, 957, 959, 960, 965, 974, 985, 999, 1002, 1005, 1009, 1027, 1037, 1049, 1057, 1065, 1071, 1081, 1083, 1085, 1089, 1091, 1094, 1108, 1118, 1136, 1138, 1192, 1205, 1212, 1214, 1217, 1233, 1241, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1261], "size": [14, 41, 45, 129, 130, 131, 156, 157, 158, 159, 163, 165, 187, 276, 308, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 693, 726, 727, 746, 747, 770, 791, 876, 1007, 1119, 1129, 1233, 1261], "overwrit": [14, 34, 35, 116, 118, 119, 120, 122, 126, 129, 130, 138, 139, 143, 147, 170, 277, 308, 319, 671, 770, 803, 849, 876], "chunk": [14, 45, 125, 129, 130, 133, 141, 143, 146, 147, 148, 159, 163, 189, 214, 229, 267, 308, 323, 579, 770, 876, 888, 937, 1014, 1023, 1100, 1115, 1208, 1214, 1233], "stream": [14, 37, 38, 42, 43, 44, 45, 53, 54, 137, 200, 215, 274, 308, 529, 770, 791, 792, 801, 803, 809, 814, 819, 823, 828, 839, 841, 847, 876], "engin": [14, 34, 131, 132, 134, 165, 200, 215, 219, 267, 274, 294, 308, 529, 749, 770, 809, 814, 819, 823, 847, 864, 876, 1094, 1214, 1233, 1244, 1258], "determin": [14, 33, 36, 42, 47, 55, 82, 126, 129, 130, 131, 134, 140, 141, 143, 148, 150, 172, 176, 194, 201, 213, 214, 219, 234, 241, 272, 273, 278, 308, 367, 402, 415, 462, 521, 539, 575, 581, 582, 617, 625, 635, 657, 658, 660, 661, 679, 713, 742, 745, 761, 770, 786, 793, 794, 800, 810, 832, 846, 851, 876, 968, 985, 1028, 1087, 1112, 1118, 1148, 1155, 1187, 1190, 1191, 1233], "thread": [14, 33, 42, 54, 125, 129, 130, 132, 165, 166, 255, 308, 493, 530, 620, 696, 770, 792, 841, 876, 917, 1059, 1082, 1150, 1233], "pool": [14, 54, 165, 166, 792, 876], "For": [14, 35, 36, 131, 132, 133, 134, 144, 145, 184, 189, 215, 216, 241, 266, 294, 308, 311, 409, 410, 437, 439, 440, 451, 521, 530, 540, 580, 617, 624, 631, 632, 633, 634, 635, 658, 706, 716, 720, 721, 766, 770, 799, 815, 832, 864, 876, 880, 1008, 1010, 1011, 1014, 1094, 1116, 1148, 1154, 1161, 1162, 1163, 1164, 1165, 1188, 1212, 1233, 1237], "some": [14, 30, 36, 46, 85, 119, 129, 130, 131, 134, 143, 170, 184, 244, 267, 308, 312, 766, 799, 876, 1037, 1233, 1261], "dataset": [14, 41, 65, 129, 130, 134, 140, 143, 149, 215, 271, 308, 479, 770, 782, 814, 819, 876, 1047, 1233, 1259], "esp": 14, "have": [14, 30, 36, 46, 47, 62, 85, 117, 127, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 181, 189, 213, 215, 216, 237, 241, 243, 244, 263, 271, 285, 308, 382, 385, 437, 439, 440, 530, 540, 578, 582, 587, 633, 770, 797, 814, 823, 832, 855, 856, 876, 880, 882, 949, 951, 1008, 1010, 1011, 1014, 1025, 1114, 1118, 1233, 1257, 1259, 1261], "too": [14, 803, 876], "optimist": 14, "lead": [14, 41, 123, 149, 223, 250, 252, 259, 308, 352, 454, 457, 514, 529, 530, 610, 611, 652, 654, 702, 770, 819, 837, 838, 864, 876, 916, 1080, 1094, 1139, 1141, 1182, 1184, 1233], "memori": [14, 45, 53, 54, 55, 116, 117, 120, 121, 122, 129, 130, 131, 133, 134, 135, 141, 143, 146, 147, 148, 170, 189, 219, 243, 244, 253, 267, 294, 308, 568, 579, 612, 770, 791, 792, 876, 1014, 1094, 1115, 1142, 1143, 1214, 1233], "error": [14, 35, 54, 102, 106, 108, 118, 119, 122, 129, 130, 143, 173, 234, 242, 267, 308, 319, 344, 345, 362, 390, 496, 498, 500, 551, 624, 627, 631, 633, 634, 637, 638, 657, 659, 660, 664, 770, 788, 792, 864, 876, 908, 909, 925, 956, 1062, 1064, 1066, 1154, 1157, 1161, 1163, 1164, 1167, 1168, 1187, 1189, 1190, 1194, 1214, 1233], "row": [14, 20, 25, 33, 34, 36, 41, 42, 45, 47, 48, 50, 55, 91, 97, 105, 113, 119, 120, 121, 122, 123, 126, 129, 130, 131, 134, 135, 137, 138, 140, 141, 143, 146, 147, 148, 149, 152, 153, 159, 172, 174, 184, 189, 192, 194, 195, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 225, 230, 241, 244, 245, 254, 260, 263, 265, 266, 271, 272, 274, 276, 277, 284, 285, 289, 291, 293, 294, 302, 308, 312, 333, 334, 342, 357, 367, 443, 451, 455, 461, 483, 494, 521, 568, 569, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 618, 620, 630, 637, 674, 679, 693, 696, 701, 703, 705, 720, 724, 726, 727, 729, 744, 746, 747, 755, 760, 770, 786, 789, 791, 799, 803, 806, 807, 808, 810, 811, 814, 815, 816, 818, 819, 823, 840, 845, 846, 847, 849, 855, 856, 859, 861, 863, 864, 872, 876, 897, 906, 1013, 1014, 1022, 1027, 1049, 1060, 1108, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1149, 1160, 1167, 1205, 1233, 1241, 1248, 1250, 1259, 1261], "per": [14, 33, 36, 42, 134, 157, 159, 172, 199, 230, 231, 248, 255, 272, 283, 297, 299, 300, 308, 344, 367, 493, 496, 498, 529, 530, 551, 552, 554, 556, 558, 559, 620, 679, 684, 696, 770, 786, 835, 841, 846, 853, 867, 869, 870, 876, 880, 908, 1059, 1062, 1064, 1222, 1233], "everi": [14, 33, 42, 129, 130, 143, 195, 201, 263, 278, 308, 336, 337, 338, 339, 342, 344, 350, 378, 379, 380, 381, 382, 416, 429, 443, 455, 486, 487, 491, 494, 497, 498, 499, 507, 510, 515, 519, 586, 630, 706, 707, 770, 803, 808, 810, 876, 900, 901, 902, 903, 906, 908, 914, 945, 946, 947, 948, 949, 986, 999, 1013, 1022, 1025, 1052, 1053, 1057, 1060, 1063, 1064, 1065, 1073, 1076, 1081, 1085, 1122, 1160, 1233], "process": [14, 33, 42, 43, 44, 45, 53, 54, 129, 130, 131, 143, 165, 243, 308, 791, 792, 876], "liter": [15, 16, 20, 35, 131, 162, 163, 164, 247, 248, 252, 277, 282, 283, 308, 319, 361, 372, 394, 435, 436, 444, 451, 456, 458, 467, 481, 528, 547, 549, 562, 563, 573, 582, 624, 626, 634, 643, 644, 671, 672, 680, 689, 691, 693, 699, 700, 701, 709, 710, 713, 726, 730, 734, 736, 739, 748, 752, 754, 756, 770, 805, 834, 835, 838, 849, 852, 853, 876, 882, 924, 939, 960, 1015, 1032, 1118, 1136, 1138, 1141, 1154, 1156, 1164, 1173, 1174, 1233], "left": [15, 16, 36, 47, 152, 153, 154, 155, 201, 215, 216, 241, 277, 308, 383, 437, 439, 440, 465, 467, 575, 587, 590, 592, 594, 596, 598, 601, 603, 605, 609, 677, 699, 706, 707, 711, 712, 714, 715, 720, 744, 757, 758, 760, 770, 810, 814, 815, 832, 849, 876, 950, 1008, 1010, 1011, 1032, 1112, 1137, 1216, 1233, 1244, 1248, 1252], "center": [15, 16, 36, 308, 437, 439, 440, 588, 589, 591, 593, 595, 597, 600, 602, 604, 770, 1008, 1010, 1011, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1233], "cell": [15, 16, 36, 308], "valueerror": [15, 20], "recognis": [15, 16, 20, 882], "column_abc": 15, "column_xyz": 15, "keyerror": 16, "datetim": [16, 33, 36, 42, 47, 87, 123, 133, 144, 159, 160, 161, 163, 173, 180, 199, 201, 214, 216, 241, 256, 278, 308, 311, 340, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 489, 587, 590, 592, 594, 596, 598, 601, 603, 605, 657, 660, 677, 698, 710, 711, 712, 714, 715, 716, 722, 730, 757, 758, 770, 788, 796, 810, 815, 832, 876, 882, 904, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1009, 1055, 1103, 1104, 1187, 1190, 1214, 1216, 1233, 1255], "date": [16, 36, 47, 62, 129, 130, 132, 134, 140, 143, 149, 173, 180, 199, 201, 214, 216, 241, 256, 308, 311, 340, 390, 392, 393, 394, 395, 398, 400, 402, 403, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 438, 489, 587, 590, 592, 594, 596, 598, 601, 603, 605, 657, 659, 677, 698, 711, 712, 714, 715, 722, 730, 756, 770, 788, 796, 810, 815, 832, 876, 882, 904, 956, 958, 959, 960, 961, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1009, 1055, 1103, 1104, 1187, 1189, 1216, 1233, 1252], "333": [16, 607, 770, 1134, 1233], "mno": [16, 20], "2023": [16, 36, 123, 151, 214, 308, 394, 716, 730, 882, 960], "29": [16, 151, 391, 409, 957, 979], "2001": [16, 392, 393, 398, 400, 402, 405, 408, 412, 413, 414, 416, 420, 429, 430, 431, 432, 590, 592, 594, 596, 598, 601, 603, 605, 657, 770, 882, 958, 959, 964, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 986, 990, 999, 1000, 1001, 1002, 1003, 1187], "null": [16, 33, 35, 41, 42, 45, 47, 55, 62, 118, 119, 122, 126, 129, 130, 139, 143, 147, 149, 156, 159, 163, 170, 172, 174, 179, 180, 184, 186, 191, 192, 194, 207, 215, 222, 223, 224, 231, 234, 236, 252, 255, 257, 258, 259, 262, 267, 268, 272, 275, 277, 279, 282, 289, 308, 320, 322, 323, 333, 336, 337, 344, 345, 352, 353, 360, 362, 366, 367, 368, 372, 376, 377, 378, 381, 386, 388, 389, 412, 415, 422, 423, 424, 425, 426, 427, 428, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 452, 459, 465, 466, 474, 475, 476, 477, 482, 484, 485, 491, 492, 495, 496, 498, 500, 501, 502, 510, 511, 512, 513, 514, 516, 521, 529, 530, 542, 550, 563, 564, 565, 566, 569, 579, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 614, 619, 620, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 647, 649, 650, 651, 657, 658, 660, 662, 667, 668, 669, 670, 677, 678, 679, 688, 689, 690, 691, 696, 699, 700, 701, 703, 705, 709, 713, 718, 729, 730, 734, 736, 739, 746, 747, 752, 754, 760, 770, 786, 789, 795, 796, 799, 805, 806, 813, 814, 826, 836, 838, 841, 846, 848, 849, 852, 854, 859, 876, 882, 886, 887, 897, 900, 901, 908, 909, 916, 917, 925, 929, 930, 938, 939, 944, 952, 954, 955, 985, 992, 993, 994, 995, 996, 997, 998, 1006, 1008, 1009, 1010, 1011, 1015, 1017, 1018, 1024, 1025, 1030, 1031, 1042, 1043, 1044, 1048, 1050, 1051, 1054, 1057, 1058, 1061, 1062, 1064, 1066, 1067, 1068, 1077, 1079, 1080, 1082, 1087, 1094, 1107, 1108, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1141, 1145, 1150, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1177, 1179, 1180, 1181, 1187, 1188, 1190, 1192, 1197, 1200, 1211, 1214, 1215, 1216, 1218, 1233, 1244, 1248, 1250, 1251, 1258, 1259, 1261], "07": [16, 129, 159, 180, 308, 390, 393, 394, 405, 415, 416, 429, 657, 710, 711, 713, 714, 722, 796, 876, 882, 956, 960, 985, 1187, 1255], "05": [16, 149, 152, 153, 154, 155, 159, 173, 180, 278, 308, 390, 393, 394, 395, 396, 397, 401, 404, 405, 406, 407, 409, 410, 411, 415, 417, 418, 419, 421, 422, 698, 710, 711, 713, 714, 788, 796, 815, 876, 882, 960, 961, 962, 963, 985, 986, 988, 989, 991, 992, 999, 1255], "visibl": [17, 187, 308, 1007, 1233], "eg": [17, 25, 36, 55, 132, 168, 266, 308, 416, 657, 660, 680, 770, 882, 1025, 1187, 1190, 1233], "low": [17, 131, 575, 770, 1112, 1233], "rang": [17, 36, 131, 132, 180, 187, 201, 214, 308, 324, 384, 390, 398, 408, 413, 414, 416, 429, 430, 465, 693, 698, 700, 710, 711, 712, 713, 714, 715, 726, 727, 756, 757, 758, 770, 796, 810, 876, 882, 951, 956, 964, 978, 983, 984, 986, 999, 1000, 1007, 1108, 1233, 1254], "98": [17, 206, 308, 366, 454, 457, 619, 661, 678, 770, 1191], "99": [17, 36, 190, 191, 206, 209, 277, 308, 318, 366, 444, 446, 454, 457, 619, 678, 760, 770, 804, 805, 849, 876, 1005, 1015, 1233, 1253], "tbl_col": 17, "95": [17, 318, 770, 882], "96": [17, 180, 308, 318, 770, 796, 876, 1047, 1233], "97": [17, 206, 308, 318, 770, 1047, 1233], "move": [18, 244, 308, 390, 437, 438, 439, 440, 589, 591, 595, 602, 770, 956, 1008, 1009, 1010, 1011, 1124, 1125, 1127, 1131, 1233], "inlin": [18, 244, 308, 624, 631, 632, 634, 643, 644, 1154, 1161, 1162, 1164, 1173, 1174, 1250], "parenthes": 18, "inform": [19, 23, 34, 52, 133, 141, 143, 144, 145, 148, 152, 154, 178, 180, 308, 311, 312, 479, 617, 624, 631, 632, 634, 643, 644, 770, 796, 828, 876, 880, 933, 1047, 1148, 1154, 1161, 1162, 1164, 1173, 1174, 1233, 1237], "below": [19, 35, 133, 134, 144, 145, 184, 234, 308, 446, 635, 658, 711, 712, 714, 715, 757, 758, 760, 766, 770, 799, 876, 1165, 1188], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_no_bord": 20, "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_horizontal_onli": 20, "ascii_markdown": 20, "utf8_ful": [20, 47, 123], "utf8_no_bord": 20, "utf8_borders_onli": 20, "utf8_horizontal_onli": 20, "noth": [20, 631, 638, 1161, 1168], "rounded_corn": 20, "border": 20, "includ": [20, 30, 33, 35, 36, 42, 52, 121, 131, 133, 144, 145, 159, 160, 176, 180, 187, 192, 232, 244, 271, 273, 276, 277, 308, 383, 417, 447, 451, 462, 467, 536, 575, 589, 591, 593, 595, 597, 599, 600, 602, 604, 648, 649, 652, 653, 698, 706, 746, 747, 770, 796, 806, 849, 876, 882, 950, 951, 987, 1007, 1018, 1028, 1032, 1112, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1178, 1179, 1182, 1233, 1258], "divid": [20, 383, 416, 429, 437, 439, 440, 451, 479, 575, 770, 950, 986, 999, 1008, 1010, 1011, 1047, 1112, 1233, 1253], "same": [20, 35, 36, 46, 47, 53, 54, 55, 84, 85, 100, 135, 143, 152, 153, 154, 155, 157, 168, 192, 200, 219, 234, 243, 244, 255, 274, 282, 283, 287, 294, 308, 316, 323, 356, 388, 389, 447, 451, 453, 454, 457, 520, 534, 538, 568, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 620, 630, 639, 670, 766, 770, 791, 792, 806, 809, 819, 841, 847, 852, 853, 857, 876, 882, 884, 920, 954, 955, 960, 1086, 1094, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1160, 1169, 1224, 1233, 1246, 1248, 1255], "dens": [20, 199, 308, 578, 770, 1114, 1233], "space": [20, 201, 308, 810, 876, 882], "horizont": [20, 55, 92, 194, 205, 221, 223, 228, 259, 276, 308, 689, 691, 700, 701, 706, 707, 709, 717, 720, 734, 736, 739, 744, 754, 854, 876], "markdown": 20, "compat": [20, 36, 41, 45, 86, 308, 624, 626, 631, 632, 633, 634, 643, 644, 876, 882, 1154, 1156, 1161, 1162, 1163, 1164, 1173, 1174, 1242, 1255, 1258], "utf8": [20, 129, 130, 143, 635, 647, 658, 1165, 1177, 1188], "No": [20, 665, 1195], "round": [20, 36, 49, 123, 131, 308, 371, 375, 450, 607, 675, 770, 936, 1020, 1134, 1233, 1252], "corner": [20, 36, 123, 308], "op": [20, 163, 308, 536, 581, 770, 876, 1233], "The": [20, 34, 35, 36, 41, 45, 46, 47, 52, 53, 56, 61, 62, 64, 65, 72, 76, 77, 85, 87, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 138, 139, 140, 141, 143, 147, 148, 149, 152, 153, 154, 155, 159, 160, 161, 163, 165, 172, 180, 183, 184, 185, 188, 189, 192, 199, 200, 201, 202, 207, 213, 216, 219, 226, 232, 241, 242, 243, 244, 247, 248, 256, 266, 267, 272, 275, 278, 282, 283, 285, 286, 287, 294, 308, 319, 360, 361, 362, 363, 366, 367, 383, 388, 389, 390, 398, 408, 412, 413, 416, 418, 429, 430, 441, 444, 447, 451, 452, 460, 492, 496, 529, 530, 542, 568, 575, 578, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 614, 617, 623, 627, 628, 631, 635, 636, 637, 641, 642, 643, 644, 652, 653, 654, 655, 656, 657, 658, 668, 671, 678, 679, 698, 718, 722, 730, 732, 746, 747, 748, 749, 752, 760, 762, 763, 765, 766, 770, 771, 772, 775, 777, 778, 779, 786, 796, 799, 801, 802, 806, 809, 810, 811, 813, 815, 818, 819, 824, 828, 832, 834, 835, 836, 842, 846, 848, 852, 853, 856, 857, 864, 876, 880, 881, 882, 885, 888, 924, 925, 926, 929, 938, 950, 951, 954, 955, 956, 964, 978, 982, 983, 986, 988, 999, 1000, 1014, 1015, 1018, 1026, 1058, 1062, 1094, 1112, 1114, 1118, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1145, 1148, 1153, 1157, 1158, 1165, 1166, 1167, 1171, 1172, 1173, 1174, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1214, 1218, 1225, 1227, 1229, 1233, 1234, 1238, 1239, 1240, 1241, 1246, 1258, 1259, 1261], "one": [20, 33, 34, 36, 42, 47, 97, 116, 118, 119, 120, 121, 122, 129, 130, 134, 138, 139, 140, 143, 162, 164, 168, 173, 191, 192, 199, 200, 201, 213, 225, 234, 241, 242, 243, 250, 252, 267, 270, 288, 308, 318, 352, 383, 446, 447, 451, 454, 457, 459, 514, 521, 526, 551, 552, 554, 556, 558, 559, 586, 587, 611, 619, 631, 632, 633, 645, 668, 732, 750, 760, 766, 770, 788, 805, 806, 809, 810, 823, 832, 837, 838, 854, 858, 876, 888, 916, 921, 950, 1017, 1024, 1080, 1087, 1092, 1112, 1122, 1141, 1161, 1162, 1163, 1175, 1198, 1214, 1233, 1237, 1247, 1248, 1250, 1253, 1260], "more": [20, 36, 41, 45, 47, 55, 84, 85, 113, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 138, 139, 140, 141, 144, 145, 152, 154, 159, 168, 178, 180, 192, 212, 213, 217, 219, 225, 230, 242, 243, 245, 256, 266, 267, 271, 274, 294, 308, 311, 312, 321, 358, 447, 451, 459, 479, 509, 522, 526, 529, 530, 567, 608, 617, 632, 639, 657, 659, 660, 681, 692, 703, 719, 725, 728, 735, 737, 740, 741, 750, 760, 766, 770, 796, 823, 842, 847, 876, 880, 882, 922, 933, 951, 1024, 1047, 1075, 1088, 1094, 1135, 1148, 1162, 1169, 1187, 1189, 1190, 1212, 1214, 1219, 1233, 1237, 1247, 1248, 1259, 1260, 1261], "semigraph": 20, "box": [20, 219, 308], "draw": [20, 25, 159, 163, 1261], "found": [20, 33, 36, 42, 88, 109, 112, 119, 123, 185, 256, 308, 609, 634, 638, 655, 656, 657, 660, 770, 842, 876, 1137, 1164, 1168, 1185, 1186, 1187, 1190, 1233, 1244, 1258], "unicod": [20, 635, 640, 647, 658, 882, 1165, 1170, 1177, 1188], "block": [20, 54, 200, 274, 308, 760, 792, 809, 830, 847, 855, 856, 864, 876, 1136, 1138, 1233], "http": [20, 36, 37, 38, 117, 131, 132, 135, 137, 170, 178, 308, 631, 633, 839, 876, 1161, 1163], "en": [20, 36, 308], "wikipedia": 20, "org": [20, 37, 38, 117, 131, 132, 135, 137, 170, 178, 308, 839, 876], "wiki": 20, "drawing_charact": 20, "box_draw": 20, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "hide": [21, 22, 23, 24, 36, 308], "etc": [21, 35, 36, 129, 133, 134, 135, 137, 144, 145, 146, 308, 770, 880, 882, 1136, 1138, 1233, 1255], "between": [24, 55, 87, 156, 157, 159, 163, 178, 236, 243, 300, 308, 345, 368, 386, 387, 467, 491, 500, 510, 511, 512, 513, 569, 575, 576, 597, 598, 623, 636, 694, 695, 698, 702, 704, 743, 746, 747, 770, 829, 870, 876, 909, 930, 933, 952, 953, 1032, 1057, 1066, 1076, 1077, 1078, 1079, 1108, 1112, 1113, 1128, 1153, 1166, 1233, 1256], "set_tbl_column_data_type_inlin": 24, "max": [25, 36, 41, 45, 126, 180, 191, 200, 221, 234, 241, 308, 312, 378, 446, 521, 529, 568, 578, 582, 587, 589, 590, 610, 650, 734, 750, 770, 796, 805, 809, 832, 876, 945, 951, 1017, 1087, 1114, 1124, 1139, 1180, 1233, 1241, 1250, 1252], "tbl_row": [25, 180, 308, 796, 876], "width": [26, 36, 56, 129, 130, 143, 308, 311, 520, 876, 1086], "id": [26, 36, 55, 126, 129, 145, 266, 273, 285, 294, 308, 586, 643, 644, 682, 770, 856, 864, 876, 882, 1122, 1220, 1233, 1258, 1259, 1261], "seq1": 26, "seq2": 26, "seq": 26, "atgataaaggag": 26, "gcaacgcatata": 26, "12": [26, 36, 47, 123, 129, 151, 159, 180, 201, 212, 216, 241, 256, 278, 308, 319, 380, 391, 393, 394, 398, 405, 408, 409, 410, 412, 413, 414, 416, 429, 430, 431, 438, 465, 497, 569, 577, 587, 602, 612, 626, 661, 707, 710, 713, 714, 715, 731, 756, 757, 758, 770, 796, 810, 811, 815, 818, 832, 839, 845, 876, 882, 957, 959, 960, 971, 972, 974, 978, 986, 999, 1009, 1094, 1133, 1156, 1191, 1233, 1253, 1255, 1258, 1261], "atg": 26, "ata": 26, "aag": 26, "gag": 26, "gca": 26, "acg": 26, "cat": [26, 46, 84, 85, 383, 575, 624, 626, 663, 666, 677, 701, 765, 770, 882, 950, 1028, 1112, 1154, 1156, 1193, 1196, 1229, 1233], "also": [27, 33, 36, 42, 46, 119, 131, 134, 135, 140, 143, 158, 159, 162, 163, 168, 185, 200, 201, 226, 230, 241, 243, 247, 255, 266, 277, 282, 285, 308, 378, 381, 390, 412, 415, 447, 467, 530, 536, 578, 582, 620, 643, 644, 652, 653, 668, 698, 706, 707, 710, 713, 720, 722, 744, 760, 769, 770, 776, 809, 810, 824, 832, 834, 841, 849, 852, 854, 856, 876, 882, 956, 985, 1032, 1114, 1118, 1156, 1173, 1174, 1182, 1233, 1237, 1242, 1244, 1247, 1258, 1259], "char": [27, 632, 1162], "omit": [27, 119, 123, 157, 168, 230, 244, 266, 271, 308, 726, 727, 757, 758, 882, 1259], "set_decimal_separ": 27, "x": [27, 47, 55, 76, 93, 117, 123, 129, 130, 132, 143, 156, 157, 159, 170, 187, 205, 208, 210, 215, 225, 234, 243, 244, 273, 276, 308, 311, 317, 319, 321, 340, 345, 377, 384, 435, 436, 451, 456, 458, 460, 481, 488, 500, 526, 528, 529, 530, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 567, 573, 581, 582, 586, 614, 617, 649, 671, 672, 677, 680, 687, 689, 691, 694, 695, 706, 707, 709, 720, 730, 731, 734, 736, 739, 744, 749, 754, 760, 770, 814, 819, 823, 840, 842, 876, 882, 909, 933, 944, 1017, 1094, 1118, 1145, 1148, 1179, 1212, 1216, 1217, 1233, 1244, 1245, 1248, 1253, 1258, 1260], "1234567": 27, "987654": [27, 882], "10101": 27, "y": [27, 47, 55, 76, 93, 117, 123, 156, 157, 159, 170, 187, 208, 210, 215, 225, 234, 243, 244, 273, 276, 308, 311, 317, 319, 321, 340, 345, 418, 421, 435, 436, 456, 458, 481, 488, 500, 528, 530, 550, 552, 554, 556, 558, 559, 562, 563, 567, 581, 582, 586, 657, 659, 660, 671, 680, 687, 689, 691, 694, 695, 709, 716, 730, 734, 736, 739, 749, 754, 770, 814, 823, 840, 842, 876, 882, 909, 933, 988, 991, 1118, 1187, 1189, 1190, 1233, 1248, 1255, 1260], "1234": [27, 607, 770, 1134, 1233], "7654321": 27, "234": 27, "567": 27, "987": 27, "654": [27, 749, 842, 876], "00": [27, 36, 62, 173, 180, 201, 278, 308, 391, 392, 395, 399, 409, 410, 412, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 590, 592, 594, 596, 598, 601, 603, 605, 657, 660, 664, 713, 714, 715, 716, 756, 757, 758, 770, 788, 796, 810, 815, 876, 882, 957, 958, 961, 962, 963, 965, 966, 967, 972, 973, 977, 979, 980, 981, 982, 985, 986, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1187, 1190, 1194], "321": [27, 1261], "strip": [28, 652, 653, 654, 655, 656, 1182, 1183, 1184, 1254], "trail": [28, 199, 308, 652, 653, 1182, 1183], "zero": [28, 36, 116, 117, 127, 129, 130, 135, 137, 141, 158, 161, 170, 191, 201, 213, 242, 256, 261, 267, 268, 308, 446, 521, 526, 609, 617, 667, 680, 770, 789, 805, 810, 876, 938, 1017, 1087, 1148, 1197, 1208, 1214, 1215, 1233, 1253, 1258], "enabl": [28, 29, 41, 45, 46, 84, 85, 152, 153, 154, 155, 167, 247, 268, 282, 308, 320, 322, 582, 610, 625, 645, 684, 766, 770, 791, 834, 852, 876, 886, 887, 1118, 1139, 1155, 1175, 1215, 1222, 1233], "d": [28, 31, 33, 35, 36, 37, 38, 41, 119, 149, 199, 201, 202, 203, 206, 215, 218, 260, 261, 271, 276, 280, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 317, 319, 377, 400, 418, 421, 467, 572, 612, 626, 632, 643, 644, 649, 657, 659, 660, 699, 716, 722, 749, 770, 810, 814, 842, 860, 862, 865, 866, 867, 868, 869, 870, 871, 876, 882, 933, 944, 966, 988, 991, 1032, 1054, 1156, 1162, 1173, 1174, 1179, 1187, 1189, 1190, 1201, 1233, 1248, 1250, 1251, 1254, 1255], "01000": 28, "67890": 28, "scale": [28, 63, 187, 308, 530, 572, 661, 770, 882, 1007, 1191, 1233], "trim_decimal_zero": 28, "01": [28, 47, 61, 62, 159, 173, 180, 199, 201, 216, 241, 278, 308, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 657, 659, 660, 664, 698, 710, 711, 712, 713, 714, 715, 716, 770, 788, 796, 810, 832, 876, 882, 956, 958, 960, 961, 962, 963, 966, 967, 972, 973, 977, 979, 980, 981, 982, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1187, 1189, 1190, 1194], "6789": [28, 882], "addit": [29, 32, 34, 35, 36, 119, 128, 133, 134, 144, 145, 157, 159, 161, 163, 184, 188, 200, 232, 247, 248, 255, 268, 275, 282, 283, 287, 308, 317, 399, 441, 444, 568, 620, 624, 631, 632, 634, 643, 644, 668, 671, 696, 699, 700, 701, 718, 748, 749, 752, 766, 770, 802, 809, 834, 835, 841, 848, 852, 853, 857, 876, 882, 957, 965, 1015, 1154, 1161, 1162, 1164, 1173, 1174, 1215, 1233, 1237, 1242, 1258], "verbos": [29, 152, 154, 168, 632, 1162], "debug": [29, 791, 803, 819, 876, 1261], "log": [29, 49, 367, 434, 526, 549, 573, 679, 770, 1005, 1233, 1252], "do_polars_oper": 29, "if_set": 30, "env_onli": 30, "dict": [30, 34, 35, 36, 41, 45, 48, 50, 52, 116, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 159, 193, 213, 232, 238, 242, 243, 244, 262, 263, 266, 271, 273, 308, 770, 830, 876, 880, 882, 1233, 1245], "show": [30, 36, 180, 184, 199, 217, 231, 308, 462, 770, 796, 799, 828, 839, 876, 1028, 1233, 1246, 1257], "variabl": [30, 72, 141, 143, 146, 148, 162, 165, 225, 264, 308, 823, 876, 1209, 1233, 1242, 1244, 1258], "chang": [30, 37, 38, 42, 43, 44, 45, 47, 53, 54, 63, 65, 126, 129, 130, 131, 141, 148, 149, 256, 261, 266, 271, 276, 277, 284, 308, 312, 382, 383, 386, 416, 462, 530, 568, 569, 575, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 746, 747, 770, 791, 792, 842, 849, 855, 876, 880, 882, 933, 934, 949, 950, 986, 1028, 1108, 1112, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1143, 1212, 1217, 1233], "restrict": [30, 650, 1180], "dictionari": [30, 36, 52, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 132, 136, 138, 139, 142, 143, 147, 213, 232, 242, 243, 244, 262, 263, 266, 271, 308, 876], "those": [30, 36, 129, 244, 268, 277, 308, 451, 578, 631, 732, 770, 849, 876, 882, 1114, 1161, 1215, 1233], "been": [30, 36, 166, 170, 289, 308, 453, 530, 545, 578, 770, 859, 1114, 1233], "set_fmt_float": 30, "via": [30, 129, 130, 131, 141, 143, 146, 147, 148, 181, 213, 243, 308, 385, 530, 633, 770, 797, 876, 1163], "set_stat": 30, "all_stat": 30, "io": [31, 33, 36, 37, 38, 127, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 181, 308, 385, 453, 542, 770, 797, 836, 876], "byte": [31, 33, 36, 37, 38, 41, 42, 45, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 187, 308, 635, 639, 640, 647, 658, 876, 1007, 1165, 1169, 1170, 1177, 1188, 1233, 1254], "compress": [31, 37, 38, 41, 43, 45, 308, 585, 770, 876, 1121, 1233], "avrocompress": [31, 308], "uncompress": [31, 37, 38, 41, 45, 135, 146, 308, 876], "write": [31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 128, 130, 135, 168, 176, 261, 308, 372, 545, 770, 817, 839, 876, 882, 939, 1233], "apach": [31, 37, 38, 41, 127, 131, 132, 135, 137, 145, 308], "avro": [31, 127, 308, 782], "writabl": [31, 33, 37, 38, 39, 40, 41, 249, 267, 308, 1214, 1233], "like": [31, 33, 35, 37, 38, 39, 40, 41, 54, 117, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 181, 201, 208, 210, 215, 244, 249, 266, 267, 308, 385, 391, 453, 493, 529, 544, 578, 631, 653, 654, 684, 766, 770, 787, 792, 797, 810, 876, 880, 957, 1059, 1114, 1161, 1222, 1233], "object": [31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 55, 76, 93, 117, 118, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 157, 159, 160, 170, 176, 181, 200, 201, 216, 217, 232, 241, 244, 249, 256, 266, 267, 268, 308, 385, 542, 711, 712, 714, 715, 730, 749, 757, 758, 770, 782, 797, 810, 815, 832, 842, 876, 882, 1208, 1233, 1242, 1244, 1247, 1258, 1260], "snappi": [31, 41, 45, 308, 876], "deflat": [31, 308], "pathlib": [31, 33, 37, 38, 41, 143, 308], "foo": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 173, 176, 177, 178, 182, 183, 184, 185, 186, 189, 192, 194, 196, 197, 198, 202, 203, 204, 205, 206, 207, 209, 215, 218, 219, 220, 221, 222, 223, 224, 227, 228, 231, 234, 236, 238, 239, 242, 245, 246, 247, 249, 251, 254, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 273, 274, 275, 279, 280, 281, 286, 308, 369, 383, 385, 412, 455, 461, 464, 483, 534, 536, 538, 539, 540, 541, 542, 543, 544, 575, 583, 623, 626, 628, 630, 632, 633, 636, 646, 648, 650, 652, 653, 654, 655, 656, 663, 666, 674, 692, 702, 703, 704, 719, 723, 724, 725, 728, 729, 733, 735, 737, 738, 740, 741, 743, 748, 751, 755, 759, 760, 766, 770, 788, 793, 794, 798, 799, 800, 806, 812, 813, 814, 826, 830, 833, 834, 847, 848, 851, 854, 876, 881, 882, 931, 950, 982, 1066, 1112, 1119, 1156, 1158, 1160, 1162, 1163, 1176, 1180, 1185, 1186, 1193, 1196, 1233, 1246, 1248, 1249, 1250, 1251, 1254], "bar": [31, 33, 35, 37, 38, 39, 40, 41, 126, 138, 139, 173, 176, 177, 178, 182, 183, 184, 185, 186, 189, 192, 194, 196, 197, 198, 203, 205, 206, 207, 209, 215, 218, 219, 220, 221, 222, 223, 224, 227, 228, 231, 234, 236, 238, 239, 242, 245, 246, 247, 249, 254, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 274, 275, 279, 280, 281, 286, 308, 369, 385, 464, 534, 536, 538, 539, 540, 541, 542, 543, 544, 617, 626, 628, 630, 632, 633, 646, 648, 650, 655, 656, 692, 702, 703, 704, 719, 724, 725, 728, 729, 733, 735, 737, 738, 740, 741, 748, 751, 755, 759, 760, 766, 770, 788, 793, 794, 798, 799, 800, 806, 812, 813, 814, 826, 830, 833, 834, 847, 848, 851, 876, 881, 882, 931, 1066, 1148, 1156, 1158, 1160, 1162, 1163, 1176, 1180, 1185, 1186, 1233, 1246, 1248, 1249, 1250, 1251, 1254], "ham": [31, 33, 35, 37, 38, 41, 173, 176, 177, 178, 182, 183, 184, 185, 186, 192, 197, 202, 203, 205, 215, 218, 220, 222, 224, 227, 231, 236, 238, 239, 242, 245, 246, 247, 254, 257, 258, 260, 264, 265, 267, 268, 269, 274, 279, 280, 308, 369, 543, 766, 788, 793, 794, 798, 799, 800, 806, 814, 826, 830, 833, 834, 847, 854, 876, 931, 1248, 1249], "dirpath": [31, 33, 37, 38, 41, 143, 308], "new_fil": [31, 33, 37, 38, 41, 308], "t": [32, 33, 35, 42, 55, 128, 129, 134, 140, 143, 201, 216, 219, 233, 274, 276, 308, 382, 391, 399, 415, 434, 437, 439, 440, 493, 530, 572, 631, 634, 643, 644, 654, 657, 660, 760, 770, 810, 827, 847, 876, 882, 949, 985, 1005, 1008, 1010, 1011, 1059, 1094, 1161, 1164, 1173, 1174, 1183, 1184, 1187, 1190, 1233, 1244, 1245], "kwarg": [32, 46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 128, 131, 132, 159, 161, 163, 178, 192, 233, 268, 308, 572, 770, 806, 827, 876, 880, 1215, 1233, 1245, 1258], "copi": [32, 116, 117, 128, 170, 174, 175, 214, 261, 267, 268, 282, 308, 444, 770, 789, 790, 852, 876, 938, 940, 1015, 1208, 1213, 1214, 1215, 1233, 1258], "csv": [32, 33, 42, 43, 44, 45, 128, 129, 130, 134, 143, 308, 782, 876], "system": [32, 129, 130, 308, 395, 961], "clipboard": [32, 128, 308, 782], "write_csv": [32, 130, 143, 308], "past": [32, 308, 819, 876], "excel": [32, 36, 128, 134, 308, 782], "similar": [32, 41, 128, 165, 194, 216, 252, 308, 352, 418, 421, 514, 568, 611, 671, 729, 760, 770, 803, 815, 838, 876, 916, 988, 991, 1080, 1141, 1233], "spreadsheet": [32, 128, 134, 140, 234, 308], "softwar": [32, 128, 308], "field": [32, 33, 35, 42, 76, 109, 112, 119, 275, 308, 357, 521, 530, 553, 555, 557, 585, 632, 633, 637, 649, 650, 670, 671, 684, 706, 707, 731, 752, 770, 848, 876, 921, 1087, 1094, 1121, 1163, 1179, 1180, 1201, 1203, 1233, 1255], "symbol": [32, 33, 42, 308, 770, 876], "argument": [32, 35, 41, 128, 129, 133, 141, 143, 144, 159, 161, 163, 178, 182, 188, 200, 201, 216, 232, 233, 241, 247, 248, 255, 268, 275, 278, 282, 283, 287, 308, 416, 429, 441, 447, 467, 529, 568, 572, 587, 620, 652, 653, 654, 671, 688, 694, 695, 696, 699, 700, 701, 703, 705, 718, 748, 752, 760, 766, 770, 798, 802, 809, 810, 827, 832, 834, 835, 841, 848, 852, 853, 857, 876, 880, 882, 986, 999, 1032, 1182, 1183, 1184, 1215, 1233, 1253, 1254], "pass": [32, 34, 35, 36, 41, 47, 91, 118, 126, 128, 131, 132, 134, 141, 143, 149, 152, 154, 157, 159, 161, 163, 172, 178, 182, 200, 201, 203, 218, 232, 233, 241, 247, 252, 255, 260, 268, 271, 272, 278, 282, 286, 287, 308, 311, 352, 367, 390, 400, 412, 415, 444, 464, 514, 529, 530, 568, 572, 582, 587, 611, 620, 652, 653, 654, 679, 688, 696, 698, 705, 722, 752, 760, 766, 770, 786, 798, 809, 810, 812, 819, 827, 832, 834, 838, 839, 841, 846, 852, 857, 864, 876, 880, 881, 916, 956, 966, 985, 1015, 1027, 1049, 1080, 1094, 1118, 1141, 1182, 1183, 1184, 1205, 1215, 1233, 1237, 1245, 1258], "read_clipboard": [32, 308], "read": [32, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 181, 189, 308, 385, 453, 760, 770, 797, 803, 876, 1014, 1233], "comma": [32, 33, 129, 130, 143, 308], "include_bom": [33, 42, 308, 876], "include_head": [33, 36, 42, 130, 273, 308, 876], "line_termin": [33, 42, 308, 876], "quote_char": [33, 42, 129, 130, 143, 308, 876], "batch_siz": [33, 42, 129, 130, 131, 147, 149, 271, 308, 876], "1024": [33, 41, 42, 45, 129, 130, 131, 147, 308, 876], "datetime_format": [33, 42, 308, 876], "date_format": [33, 42, 308, 876], "time_format": [33, 42, 308, 876], "null_valu": [33, 42, 129, 130, 143, 308, 876], "quote_styl": [33, 42, 308, 876], "csvquotestyl": [33, 42, 308, 876], "If": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 52, 53, 54, 55, 63, 116, 117, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 160, 161, 162, 170, 184, 189, 199, 201, 203, 211, 212, 213, 216, 218, 219, 223, 230, 232, 234, 241, 243, 244, 245, 249, 252, 254, 256, 259, 260, 263, 264, 266, 267, 273, 274, 276, 277, 286, 308, 320, 322, 345, 352, 357, 368, 390, 394, 395, 409, 410, 418, 421, 447, 462, 467, 479, 500, 509, 514, 515, 521, 529, 530, 536, 542, 543, 568, 573, 575, 578, 580, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 611, 613, 617, 618, 623, 632, 633, 634, 635, 636, 637, 647, 648, 649, 650, 652, 653, 654, 657, 658, 659, 660, 664, 667, 684, 688, 690, 693, 697, 698, 701, 702, 705, 706, 711, 712, 714, 715, 716, 719, 720, 726, 727, 728, 730, 732, 742, 745, 746, 747, 752, 757, 758, 760, 761, 770, 791, 792, 799, 801, 810, 814, 815, 819, 823, 830, 832, 836, 838, 840, 842, 847, 849, 864, 876, 880, 882, 886, 887, 909, 916, 921, 930, 939, 956, 960, 961, 979, 980, 988, 991, 1014, 1025, 1027, 1028, 1032, 1046, 1047, 1049, 1066, 1075, 1080, 1081, 1087, 1094, 1112, 1114, 1116, 1118, 1119, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1137, 1139, 1141, 1144, 1148, 1149, 1153, 1162, 1163, 1164, 1165, 1166, 1167, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1187, 1188, 1189, 1190, 1194, 1197, 1205, 1208, 1212, 1214, 1222, 1233, 1241, 1242, 1244, 1251, 1258], "instead": [33, 35, 39, 40, 47, 54, 55, 118, 119, 122, 129, 130, 131, 134, 140, 141, 143, 149, 156, 157, 158, 159, 163, 171, 172, 199, 212, 213, 216, 219, 230, 232, 242, 243, 244, 247, 248, 249, 252, 266, 267, 268, 272, 283, 284, 286, 308, 311, 312, 333, 352, 367, 368, 383, 397, 438, 441, 451, 514, 529, 542, 575, 611, 623, 630, 639, 640, 643, 644, 652, 653, 654, 655, 656, 667, 679, 686, 693, 695, 697, 703, 711, 712, 714, 715, 716, 726, 727, 742, 745, 749, 752, 757, 758, 761, 770, 785, 786, 792, 801, 834, 835, 836, 838, 846, 853, 854, 855, 876, 882, 897, 916, 925, 930, 950, 963, 971, 972, 1009, 1025, 1080, 1112, 1136, 1138, 1141, 1150, 1153, 1160, 1169, 1170, 1173, 1174, 1182, 1183, 1184, 1197, 1214, 1215, 1233, 1237, 1241, 1242, 1246, 1258, 1259], "whether": [33, 42, 120, 122, 126, 163, 167, 186, 212, 216, 250, 255, 308, 320, 322, 336, 337, 402, 417, 459, 484, 485, 610, 620, 696, 770, 819, 837, 841, 876, 882, 886, 887, 900, 901, 932, 934, 968, 987, 1006, 1024, 1050, 1051, 1233, 1244, 1258], "utf": [33, 42, 75, 308, 876], "bom": [33, 42, 308, 876], "header": [33, 36, 41, 42, 45, 123, 129, 130, 134, 143, 185, 234, 273, 308, 876], "end": [33, 36, 42, 129, 130, 143, 201, 308, 361, 364, 365, 391, 416, 441, 515, 624, 629, 632, 635, 641, 647, 651, 652, 653, 656, 693, 698, 710, 711, 712, 713, 714, 715, 718, 726, 727, 757, 758, 760, 766, 770, 810, 811, 818, 828, 876, 882, 927, 957, 986, 1044, 1081, 1159, 1162, 1165, 1171, 1177, 1181, 1182, 1183, 1188, 1233, 1254], "each": [33, 36, 42, 47, 56, 63, 72, 130, 131, 134, 147, 152, 153, 154, 155, 157, 177, 179, 185, 192, 199, 200, 201, 214, 216, 219, 232, 241, 243, 245, 266, 271, 275, 277, 278, 286, 287, 289, 291, 293, 294, 302, 308, 333, 367, 383, 416, 429, 447, 470, 473, 499, 502, 509, 519, 526, 530, 568, 575, 578, 585, 586, 593, 597, 608, 613, 620, 632, 635, 639, 640, 647, 649, 650, 658, 679, 693, 696, 701, 726, 727, 752, 760, 770, 791, 794, 795, 800, 806, 810, 815, 828, 832, 848, 849, 857, 859, 861, 863, 864, 872, 876, 897, 937, 950, 986, 999, 1036, 1039, 1065, 1068, 1075, 1085, 1112, 1114, 1121, 1122, 1135, 1144, 1162, 1165, 1169, 1170, 1177, 1179, 1180, 1188, 1203, 1233, 1258, 1259, 1261], "quot": [33, 34, 42, 129, 130, 132, 143, 308, 876], "specifi": [33, 35, 36, 42, 47, 88, 91, 94, 109, 112, 134, 140, 160, 172, 173, 187, 188, 191, 200, 201, 215, 232, 241, 242, 244, 247, 248, 252, 255, 266, 272, 275, 282, 283, 287, 308, 367, 372, 437, 439, 440, 441, 446, 568, 581, 582, 589, 591, 593, 595, 597, 600, 602, 604, 611, 620, 671, 679, 696, 699, 700, 701, 711, 712, 714, 715, 716, 718, 748, 752, 757, 758, 766, 770, 786, 788, 802, 805, 809, 810, 814, 832, 834, 835, 838, 841, 846, 848, 852, 853, 857, 876, 882, 939, 1007, 1008, 1010, 1011, 1017, 1118, 1141, 1212, 1233, 1248, 1260], "defin": [33, 36, 42, 62, 131, 138, 156, 157, 159, 173, 184, 188, 201, 219, 230, 233, 241, 277, 294, 308, 467, 496, 530, 572, 575, 586, 587, 590, 592, 594, 596, 598, 601, 603, 605, 635, 640, 647, 658, 711, 712, 714, 715, 732, 752, 757, 758, 770, 788, 799, 802, 810, 827, 832, 849, 864, 876, 881, 882, 1032, 1062, 1094, 1112, 1122, 1165, 1170, 1177, 1188, 1233], "chrono": [33, 42, 87, 308, 418, 421, 657, 659, 660, 664, 876, 988, 991, 1187, 1189, 1190, 1194], "rust": [33, 41, 42, 87, 99, 135, 137, 141, 219, 294, 308, 633, 876, 880, 1094, 1163, 1233], "crate": [33, 42, 87, 308, 624, 626, 631, 632, 633, 634, 643, 644, 657, 659, 660, 664, 876, 882, 1154, 1156, 1161, 1162, 1163, 1164, 1173, 1174, 1187, 1189, 1190, 1194], "fraction": [33, 42, 152, 153, 154, 155, 245, 308, 417, 509, 569, 608, 657, 660, 770, 876, 987, 1075, 1108, 1135, 1187, 1190, 1233], "second": [33, 42, 143, 146, 152, 153, 154, 155, 201, 216, 241, 278, 308, 401, 404, 406, 407, 411, 412, 416, 428, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 643, 644, 657, 660, 713, 714, 715, 716, 756, 757, 758, 760, 770, 810, 815, 832, 876, 882, 982, 986, 998, 999, 1009, 1173, 1174, 1187, 1190, 1233, 1254, 1255, 1259, 1261], "infer": [33, 42, 63, 76, 91, 116, 118, 119, 120, 121, 122, 129, 130, 131, 134, 138, 139, 140, 141, 143, 147, 148, 219, 308, 529, 530, 583, 637, 657, 659, 660, 661, 664, 716, 730, 745, 770, 876, 1094, 1119, 1167, 1187, 1189, 1190, 1191, 1194, 1233], "timeunit": [33, 42, 62, 64, 308, 392, 394, 420, 432, 660, 713, 714, 715, 716, 876, 882, 958, 960, 990, 1002, 1190], "frame": [33, 34, 36, 42, 47, 54, 55, 119, 130, 134, 140, 152, 153, 173, 174, 180, 213, 214, 219, 226, 230, 233, 242, 243, 244, 256, 271, 276, 277, 308, 749, 788, 789, 796, 824, 827, 842, 849, 876, 882, 938, 1233, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1257, 1261], "datatyp": [33, 42, 116, 118, 119, 120, 122, 124, 134, 136, 138, 139, 142, 147, 160, 161, 163, 185, 194, 249, 308, 368, 441, 612, 677, 718, 730, 766, 770, 782, 800, 836, 876, 881, 882, 930, 951, 1094, 1142, 1216, 1233], "repres": [33, 36, 42, 61, 62, 64, 73, 77, 82, 116, 118, 120, 121, 122, 131, 256, 257, 266, 267, 279, 286, 308, 451, 474, 475, 517, 523, 529, 622, 635, 640, 647, 658, 685, 688, 702, 704, 716, 718, 730, 731, 732, 741, 746, 747, 751, 759, 766, 770, 842, 843, 850, 876, 882, 1136, 1152, 1165, 1170, 1177, 1188, 1214, 1223, 1233, 1258], "necessari": [33, 34, 42, 46, 85, 134, 267, 308, 876, 1214, 1233], "non_numer": [33, 42, 308, 876], "never": [33, 42, 131, 215, 216, 242, 308, 814, 815, 876], "strategi": [33, 42, 47, 55, 129, 156, 157, 158, 159, 160, 161, 163, 191, 201, 215, 216, 229, 277, 308, 446, 521, 530, 770, 805, 810, 814, 815, 849, 876, 1017, 1087, 1233], "put": [33, 42, 308, 312, 876], "around": [33, 42, 308, 876], "thei": [33, 36, 42, 46, 54, 55, 84, 85, 119, 143, 168, 216, 217, 244, 308, 645, 653, 654, 770, 876, 880, 882], "record": [33, 38, 42, 126, 137, 149, 308, 815, 876], "termin": [33, 42, 308, 876], "indistinguish": [33, 42, 308, 876], "even": [33, 42, 129, 308, 438, 572, 575, 770, 876, 882, 1009, 1112, 1233], "invalid": [33, 42, 107, 129, 130, 143, 308, 368, 637, 638, 662, 680, 770, 876, 925, 930, 1167, 1168, 1192, 1233], "g": [33, 42, 126, 129, 133, 135, 137, 144, 146, 149, 161, 170, 181, 212, 267, 276, 308, 317, 385, 438, 441, 530, 612, 718, 770, 797, 830, 876, 1009, 1233, 1261], "pars": [33, 42, 128, 129, 130, 132, 134, 139, 140, 143, 146, 147, 172, 200, 247, 248, 252, 255, 272, 282, 283, 287, 308, 367, 372, 467, 568, 582, 620, 637, 661, 662, 671, 679, 689, 691, 696, 699, 700, 701, 709, 722, 734, 736, 739, 748, 750, 752, 754, 760, 770, 786, 809, 834, 835, 838, 841, 846, 852, 853, 857, 876, 939, 1032, 1118, 1141, 1167, 1191, 1192, 1233, 1241], "valid": [33, 36, 42, 62, 131, 135, 137, 141, 163, 168, 182, 187, 215, 308, 382, 624, 626, 631, 632, 633, 634, 638, 643, 644, 760, 770, 798, 814, 876, 882, 949, 1007, 1025, 1154, 1156, 1161, 1162, 1163, 1164, 1168, 1173, 1174, 1233, 1241, 1242], "integ": [33, 36, 42, 61, 62, 64, 68, 69, 70, 71, 77, 78, 79, 80, 81, 150, 157, 159, 162, 164, 184, 201, 241, 264, 267, 308, 321, 371, 417, 450, 451, 567, 573, 575, 580, 586, 587, 599, 635, 658, 662, 687, 693, 722, 726, 727, 745, 770, 799, 810, 832, 876, 882, 936, 987, 1020, 1112, 1116, 1122, 1129, 1136, 1165, 1188, 1192, 1214, 1233, 1253, 1258, 1261], "aren": [33, 42, 308, 876], "strictli": [33, 42, 46, 85, 308, 803, 876], "table_nam": [34, 36, 256, 308, 842, 876], "connect": [34, 129, 131, 132, 135, 137, 141, 143, 146, 148, 149, 308, 783], "connectionorcursor": [34, 131, 308], "if_table_exist": [34, 308], "dbwritemod": [34, 308], "fail": [34, 35, 117, 133, 135, 139, 141, 143, 144, 146, 147, 148, 170, 267, 274, 308, 334, 419, 521, 657, 659, 660, 664, 770, 847, 876, 1094, 1187, 1189, 1190, 1194, 1214, 1233], "dbwriteengin": [34, 308], "engine_opt": [34, 134, 308], "databas": [34, 115, 131, 132, 308, 782], "new": [34, 35, 36, 134, 143, 168, 181, 195, 205, 206, 219, 230, 231, 238, 249, 256, 266, 271, 273, 275, 276, 277, 282, 283, 308, 319, 394, 443, 453, 455, 465, 536, 552, 553, 568, 582, 586, 643, 644, 649, 650, 668, 670, 671, 749, 766, 770, 782, 808, 830, 842, 848, 849, 852, 853, 864, 876, 882, 885, 960, 1013, 1022, 1105, 1117, 1118, 1122, 1173, 1174, 1179, 1180, 1198, 1201, 1210, 1212, 1217, 1233, 1258, 1260], "version": [34, 35, 52, 133, 134, 144, 151, 156, 157, 158, 159, 163, 166, 170, 171, 181, 202, 249, 256, 266, 267, 271, 284, 289, 308, 397, 409, 410, 432, 453, 460, 536, 545, 623, 625, 630, 671, 686, 695, 744, 749, 770, 785, 801, 842, 854, 855, 859, 876, 882, 963, 971, 972, 979, 980, 1002, 1025, 1026, 1153, 1155, 1160, 1212, 1214, 1217, 1233], "20": [34, 35, 36, 129, 134, 151, 156, 157, 158, 159, 163, 166, 171, 180, 181, 189, 205, 206, 226, 233, 235, 239, 249, 256, 266, 267, 271, 284, 289, 308, 331, 332, 333, 386, 393, 396, 397, 401, 404, 405, 406, 407, 411, 416, 417, 419, 429, 432, 453, 460, 465, 536, 545, 572, 590, 592, 594, 596, 598, 601, 603, 605, 630, 671, 686, 713, 722, 730, 749, 757, 770, 785, 796, 801, 824, 827, 842, 855, 859, 876, 882, 952, 959, 963, 974, 986, 999, 1002, 1012, 1025, 1160, 1212, 1214, 1217, 1233, 1248, 1249, 1251], "26": [34, 151, 156, 157, 158, 159, 163, 180, 308, 399, 430, 796, 876, 965], "instanti": [34, 36, 131, 161, 247, 266, 282, 308, 834, 852, 876, 881, 1212, 1233], "uri": [34, 35, 131, 132, 133, 144, 145, 308], "qualifi": [34, 308], "creat": [34, 36, 46, 85, 116, 120, 122, 129, 130, 131, 132, 135, 137, 141, 144, 145, 157, 158, 159, 160, 161, 162, 163, 164, 174, 175, 201, 231, 234, 241, 266, 267, 278, 282, 285, 308, 312, 394, 416, 429, 438, 521, 579, 587, 590, 592, 594, 596, 598, 601, 603, 605, 700, 710, 711, 712, 713, 714, 715, 716, 756, 757, 758, 766, 770, 789, 790, 796, 801, 810, 832, 852, 856, 876, 938, 940, 950, 960, 986, 999, 1009, 1105, 1112, 1115, 1212, 1214, 1233, 1257, 1258, 1261], "append": [34, 35, 159, 189, 215, 216, 308, 579, 760, 770, 814, 815, 876, 1014, 1233], "your": [34, 36, 46, 47, 85, 129, 130, 131, 132, 134, 149, 213, 219, 243, 244, 247, 263, 282, 287, 294, 308, 395, 438, 453, 529, 530, 633, 657, 659, 660, 667, 732, 770, 811, 818, 819, 834, 852, 857, 864, 876, 961, 1009, 1094, 1163, 1187, 1189, 1190, 1197, 1233, 1261], "special": [34, 129, 130, 132, 143, 271, 285, 308, 588, 632, 643, 644, 770, 856, 876, 1094, 1123, 1162, 1173, 1174, 1233], "sqlalchemi": [34, 131, 151, 308], "adbc": [34, 131, 132, 308], "against": [34, 93, 129, 131, 256, 308, 493, 634, 749, 842, 876, 1059, 1164, 1241, 1258, 1260, 1261], "postgresql": [34, 131, 132, 308, 568, 770], "user": [34, 131, 132, 219, 233, 294, 308, 529, 530, 572, 610, 732, 770, 827, 864, 876, 880, 1094, 1139, 1233], "server": [34, 131, 132, 308], "port": [34, 129, 131, 132, 135, 137, 146, 308], "sqlite": [34, 131, 308], "db": [34, 131, 132, 308], "replac": [34, 35, 129, 130, 143, 190, 191, 239, 273, 282, 283, 308, 394, 415, 445, 529, 530, 644, 645, 660, 770, 804, 852, 853, 876, 960, 985, 1016, 1136, 1138, 1174, 1175, 1190, 1233, 1252], "insert": [34, 129, 130, 135, 137, 141, 143, 146, 147, 148, 206, 273, 275, 308, 609, 623, 636, 667, 770, 848, 876, 1137, 1153, 1166, 1197, 1233], "mode": [34, 35, 42, 43, 44, 45, 53, 54, 152, 154, 234, 256, 308, 632, 742, 745, 761, 770, 791, 792, 876, 1162, 1233, 1241, 1242, 1258], "alreadi": [34, 35, 92, 266, 308, 382, 493, 684, 770, 839, 876, 949, 1059, 1222, 1233], "suppli": [34, 36, 116, 118, 119, 120, 122, 131, 138, 139, 147, 192, 242, 266, 308, 447, 572, 770, 806, 876, 1212, 1233], "unset": [34, 158, 293, 308, 415, 521, 863, 985, 1241], "associ": [34, 36, 47, 132, 134, 158, 161, 244, 308, 881, 1243, 1245], "panda": [34, 117, 121, 126, 151, 201, 268, 308, 409, 410, 677, 749, 770, 810, 876, 979, 980, 1215, 1216, 1233, 1242, 1244, 1258], "to_sql": [34, 308], "though": [34, 131, 201, 308, 766, 810, 876], "eventu": [34, 308], "phase": [34, 276, 308], "favour": [34, 308], "solut": [34, 308], "cursor": [34, 131, 308], "adbc_ingest": [34, 308], "affect": [34, 152, 153, 154, 155, 308], "driver": [34, 131, 132, 308], "provid": [34, 36, 129, 130, 132, 133, 134, 141, 143, 144, 145, 148, 159, 163, 192, 211, 256, 266, 308, 362, 363, 441, 462, 521, 529, 530, 627, 628, 631, 637, 638, 653, 654, 655, 656, 722, 752, 770, 782, 806, 842, 876, 925, 926, 1028, 1046, 1094, 1157, 1158, 1161, 1167, 1168, 1212, 1233, 1245, 1251, 1255, 1258, 1261], "otherwis": [34, 131, 134, 158, 161, 165, 219, 226, 244, 247, 266, 271, 294, 308, 357, 362, 372, 383, 437, 438, 439, 440, 521, 530, 539, 568, 572, 573, 575, 580, 624, 627, 630, 634, 635, 640, 647, 658, 684, 688, 716, 719, 728, 732, 760, 770, 824, 834, 864, 876, 921, 925, 939, 950, 1008, 1009, 1010, 1011, 1087, 1094, 1112, 1116, 1136, 1138, 1154, 1157, 1160, 1164, 1165, 1170, 1177, 1188, 1222, 1233, 1251], "temporari": [34, 308], "target_t": [34, 308], "pyodbc": [34, 308], "wa": [34, 52, 91, 152, 232, 266, 267, 286, 308, 582, 645, 716, 770, 882, 1118, 1175, 1214, 1233], "fast_executemani": [34, 308], "improv": [34, 45, 135, 146, 308, 529, 770, 876], "perform": [34, 41, 43, 45, 47, 89, 94, 96, 101, 103, 110, 117, 129, 130, 131, 135, 141, 143, 146, 147, 148, 170, 200, 201, 216, 219, 237, 241, 243, 244, 267, 294, 308, 451, 521, 529, 530, 568, 587, 625, 639, 640, 645, 657, 659, 660, 770, 810, 815, 832, 841, 855, 856, 876, 1094, 1155, 1169, 1170, 1175, 1187, 1189, 1190, 1214, 1233], "pyodbc_uri": [34, 308], "mssql": [34, 308], "1433": [34, 308], "odbc": [34, 131, 308], "18": [34, 123, 180, 226, 241, 308, 381, 416, 429, 432, 465, 551, 587, 671, 770, 796, 824, 828, 832, 876, 882, 1002, 1249, 1256, 1258], "create_engin": [34, 308], "deltalak": [35, 133, 144, 151, 308], "deltat": [35, 308], "ignor": [35, 131, 158, 159, 163, 223, 259, 277, 308, 320, 322, 345, 386, 415, 437, 439, 440, 491, 500, 560, 561, 623, 636, 688, 690, 701, 770, 849, 876, 882, 886, 887, 909, 952, 985, 1008, 1010, 1011, 1057, 1066, 1103, 1104, 1153, 1166, 1233], "merg": [35, 215, 216, 226, 308, 814, 815, 824, 876], "overwrite_schema": [35, 308], "storage_opt": [35, 129, 133, 135, 137, 141, 143, 144, 145, 146, 148, 308], "delta_write_opt": [35, 308], "delta_merge_opt": [35, 308], "tablemerg": [35, 308], "delta": [35, 133, 144, 257, 279, 308, 517, 523, 600, 601, 604, 605, 622, 685, 702, 704, 746, 747, 751, 759, 770, 782, 843, 850, 876, 1130, 1132, 1152, 1223, 1233], "handl": [35, 53, 54, 55, 90, 123, 129, 130, 143, 149, 308, 386, 491, 630, 667, 770, 791, 792, 876, 880, 952, 1057, 1160, 1197, 1233], "throw": [35, 118, 119, 122, 173, 182, 308, 637, 638, 788, 798, 876, 1167, 1168, 1233], "add": [35, 36, 130, 189, 201, 219, 282, 283, 284, 285, 308, 383, 554, 555, 556, 557, 575, 671, 716, 720, 760, 770, 810, 814, 852, 853, 854, 855, 856, 876, 1014, 1233], "anyth": [35, 242, 308], "updat": [35, 180, 308, 796, 876], "deprec": [35, 156, 157, 158, 159, 163, 166, 171, 267, 284, 289, 308, 397, 432, 453, 545, 623, 630, 686, 695, 703, 770, 785, 801, 854, 855, 859, 876, 963, 971, 972, 1002, 1025, 1153, 1160, 1214, 1233], "sinc": [35, 61, 62, 77, 131, 133, 143, 144, 146, 156, 157, 158, 159, 163, 166, 171, 267, 284, 289, 308, 397, 400, 432, 453, 529, 545, 623, 630, 686, 695, 722, 770, 785, 801, 841, 854, 855, 859, 876, 963, 966, 971, 972, 1002, 1025, 1153, 1160, 1214, 1233], "14": [35, 151, 180, 219, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 391, 396, 397, 401, 404, 406, 407, 411, 417, 419, 465, 578, 713, 756, 757, 770, 796, 860, 862, 865, 866, 867, 868, 869, 870, 871, 876, 882, 957, 986], "schema_mod": [35, 308], "extra": [35, 129, 130, 133, 135, 137, 143, 144, 145, 146, 189, 201, 308, 770, 810, 876, 880, 1014, 1233], "storag": [35, 129, 133, 135, 137, 141, 143, 144, 145, 146, 308], "backend": [35, 131, 132, 133, 144, 145, 308], "cloud": [35, 131, 133, 141, 143, 144, 145, 146, 148, 149, 308], "configur": [35, 133, 144, 145, 168, 308], "authent": [35, 133, 144, 145, 308], "see": [35, 36, 37, 38, 53, 54, 62, 131, 132, 133, 134, 135, 137, 141, 143, 144, 145, 148, 152, 153, 154, 155, 159, 163, 178, 201, 215, 233, 234, 308, 311, 312, 372, 446, 479, 529, 617, 624, 631, 632, 634, 635, 643, 644, 658, 711, 712, 714, 715, 744, 757, 758, 766, 770, 791, 792, 810, 876, 880, 882, 933, 939, 1047, 1148, 1154, 1161, 1162, 1164, 1165, 1173, 1174, 1188, 1233, 1237, 1261], "here": [35, 36, 41, 116, 118, 119, 120, 122, 131, 132, 133, 138, 139, 141, 143, 144, 145, 147, 148, 157, 159, 163, 308, 390, 529, 530, 633, 638, 698, 770, 839, 876, 882, 956, 1168], "gc": [35, 133, 144, 145, 308], "azur": [35, 133, 141, 143, 144, 145, 148, 308], "keyword": [35, 133, 141, 144, 159, 163, 178, 200, 233, 242, 247, 248, 268, 282, 283, 287, 308, 447, 572, 671, 748, 752, 760, 770, 809, 827, 834, 835, 852, 853, 857, 876, 1215, 1233, 1245], "while": [35, 54, 130, 133, 134, 144, 159, 163, 168, 213, 225, 273, 277, 308, 640, 792, 823, 849, 876, 1025, 1170, 1233], "lake": [35, 133, 144, 308, 782], "typeerror": [35, 308], "unsupport": [35, 308], "arrowinvaliderror": [35, 308], "could": [35, 82, 89, 173, 308, 706, 716, 720, 788, 796, 799, 876, 1025, 1233], "primit": [35, 308, 471, 770], "tablenotfounderror": [35, 308], "doesn": [35, 129, 143, 201, 216, 308, 434, 770, 810, 876, 1005, 1233], "action": [35, 308], "trigger": [35, 268, 308, 770, 880, 1215, 1233], "protocol": [35, 117, 132, 170, 308], "categor": [35, 46, 65, 84, 85, 86, 152, 153, 154, 155, 215, 264, 308, 369, 383, 575, 582, 677, 770, 882, 931, 932, 933, 934, 950, 1112, 1118, 1216, 1233], "convert": [35, 87, 117, 121, 133, 134, 140, 144, 170, 262, 263, 264, 265, 266, 267, 268, 270, 271, 308, 356, 357, 384, 395, 418, 421, 520, 521, 529, 552, 577, 633, 657, 659, 660, 661, 662, 664, 669, 770, 876, 880, 920, 921, 933, 961, 988, 991, 1086, 1087, 1163, 1187, 1189, 1190, 1191, 1192, 1194, 1200, 1203, 1211, 1212, 1213, 1214, 1215, 1217, 1233, 1255, 1256, 1258], "normal": [35, 126, 201, 308, 434, 479, 617, 684, 770, 810, 876, 1005, 1047, 1148, 1222, 1233], "nullabl": [35, 308], "To": [35, 54, 190, 308, 372, 388, 389, 445, 446, 624, 630, 631, 632, 634, 643, 644, 653, 654, 655, 656, 665, 770, 804, 876, 939, 954, 955, 1016, 1025, 1154, 1160, 1161, 1162, 1164, 1173, 1174, 1195, 1214, 1233, 1258], "pyarrow": [35, 41, 116, 121, 129, 132, 133, 135, 137, 141, 144, 149, 151, 261, 267, 268, 308, 749, 782, 1208, 1214, 1215, 1233, 1242, 1244, 1258], "ha": [35, 36, 47, 54, 121, 131, 143, 166, 170, 278, 284, 289, 308, 366, 367, 382, 453, 529, 540, 545, 635, 658, 668, 678, 679, 719, 728, 766, 770, 792, 855, 859, 864, 876, 929, 938, 949, 951, 1025, 1165, 1188, 1218, 1233], "last": [35, 143, 146, 152, 153, 154, 155, 203, 216, 218, 234, 244, 255, 260, 267, 274, 302, 308, 333, 344, 353, 382, 398, 409, 413, 430, 473, 498, 516, 519, 521, 551, 552, 554, 556, 558, 559, 619, 620, 635, 650, 658, 674, 696, 755, 766, 770, 815, 841, 845, 847, 872, 876, 882, 897, 908, 917, 949, 964, 979, 983, 1000, 1027, 1039, 1049, 1064, 1082, 1085, 1150, 1165, 1180, 1188, 1205, 1214, 1233, 1252, 1254], "filesystem": [35, 133, 144, 145, 308], "table_path": [35, 133, 144, 145, 308], "match": [35, 36, 55, 62, 105, 116, 118, 119, 120, 122, 131, 138, 139, 147, 152, 153, 154, 155, 173, 191, 215, 216, 242, 277, 308, 536, 537, 582, 599, 624, 625, 626, 629, 631, 632, 634, 637, 638, 643, 644, 645, 651, 657, 659, 660, 760, 766, 770, 788, 805, 814, 815, 849, 876, 882, 1006, 1118, 1129, 1154, 1155, 1156, 1159, 1161, 1162, 1164, 1167, 1168, 1173, 1174, 1175, 1181, 1187, 1189, 1190, 1233, 1254], "old": [35, 238, 308, 582, 770, 830, 876, 1118, 1233], "existing_table_path": [35, 308], "store": [35, 129, 145, 189, 213, 243, 308, 369, 585, 770, 931, 1014, 1121, 1233], "bucket": [35, 133, 144, 145, 148, 308, 416, 429, 462, 770, 986, 999, 1028, 1233], "prefix": [35, 129, 130, 143, 168, 308, 319, 365, 537, 552, 555, 556, 558, 559, 651, 654, 655, 667, 770, 882, 928, 1181, 1185, 1197], "aws_region": [35, 144, 148, 308], "the_aws_region": [35, 308], "aws_access_key_id": [35, 133, 144, 148, 308], "the_aws_access_key_id": [35, 133, 144, 145, 308], "aws_secret_access_kei": [35, 133, 144, 148, 308], "the_aws_secret_access_kei": [35, 133, 144, 145, 308], "pa": [35, 116, 149, 308, 749], "check": [35, 62, 93, 129, 130, 143, 152, 153, 154, 155, 167, 186, 211, 215, 308, 340, 361, 364, 365, 459, 467, 471, 489, 624, 629, 634, 651, 770, 814, 819, 876, 904, 924, 927, 928, 1006, 1024, 1034, 1037, 1044, 1046, 1055, 1154, 1159, 1164, 1181, 1233], "doc": [35, 37, 38, 132, 135, 137, 152, 154, 178, 308], "predic": [35, 42, 43, 44, 45, 53, 54, 143, 146, 147, 148, 149, 192, 211, 242, 308, 447, 686, 720, 760, 770, 791, 792, 801, 803, 806, 819, 828, 830, 839, 855, 856, 876, 1018, 1136, 1138, 1233], "source_alia": [35, 308], "target_alia": [35, 308], "when_matched_update_al": [35, 308], "when_not_matched_insert_al": [35, 308], "execut": [35, 46, 55, 131, 132, 217, 256, 308, 385, 493, 684, 749, 770, 787, 797, 819, 828, 842, 876, 880, 1059, 1222, 1233, 1242, 1243, 1244, 1246, 1258, 1260], "workbook": [36, 134, 140, 308], "worksheet": [36, 134, 140, 308], "posit": [36, 182, 188, 200, 232, 247, 248, 252, 255, 275, 282, 283, 287, 308, 352, 437, 439, 440, 441, 514, 568, 573, 575, 611, 620, 633, 634, 643, 644, 662, 671, 694, 695, 696, 699, 700, 701, 718, 748, 752, 766, 770, 798, 802, 809, 834, 835, 838, 841, 848, 852, 853, 857, 876, 882, 916, 1008, 1010, 1011, 1080, 1112, 1141, 1163, 1192, 1233, 1259], "tupl": [36, 56, 132, 134, 140, 213, 219, 232, 242, 243, 244, 251, 271, 286, 308, 583, 770, 828, 839, 876, 881, 882, 1119, 1233], "a1": [36, 48, 50, 308], "table_styl": [36, 308], "column_format": [36, 308], "columnformatdict": [36, 308], "dtype_format": [36, 308], "oneormoredatatyp": [36, 157, 308], "conditional_format": [36, 308], "conditionalformatdict": [36, 308], "header_format": [36, 308], "column_tot": [36, 308], "columntotalsdefinit": [36, 308], "column_width": [36, 308], "columnwidthsdefinit": [36, 308], "row_tot": [36, 308], "rowtotalsdefinit": [36, 308], "row_height": [36, 308], "sparklin": [36, 308], "sequenc": [36, 47, 76, 116, 118, 119, 120, 122, 126, 129, 130, 131, 134, 138, 139, 140, 143, 147, 157, 158, 159, 160, 161, 172, 180, 188, 189, 215, 216, 225, 230, 232, 233, 234, 244, 255, 264, 266, 271, 272, 276, 277, 278, 308, 357, 367, 383, 454, 471, 521, 529, 572, 575, 582, 620, 655, 656, 670, 679, 696, 706, 707, 720, 722, 731, 732, 741, 744, 750, 770, 786, 796, 802, 814, 815, 823, 827, 841, 846, 849, 876, 882, 921, 950, 951, 1014, 1087, 1112, 1118, 1201, 1233], "formula": [36, 308, 434, 770, 1005, 1233], "autofilt": [36, 308], "autofit": [36, 308], "hidden_column": [36, 308], "selectortyp": [36, 308, 882], "hide_gridlin": [36, 308], "sheet_zoom": [36, 308], "freeze_pan": [36, 308], "bytesio": [36, 37, 38, 41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 308, 385, 770, 797, 876], "open": [36, 127, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 181, 308, 385, 770, 797, 876], "xlsxwriter": [36, 151, 308], "close": [36, 131, 201, 241, 256, 308, 383, 467, 526, 575, 587, 590, 592, 594, 596, 598, 601, 603, 605, 617, 711, 712, 714, 715, 757, 758, 770, 810, 832, 842, 876, 950, 1032, 1112, 1148, 1233], "xlsx": [36, 134, 308], "work": [36, 63, 65, 130, 149, 248, 283, 308, 320, 322, 358, 371, 372, 441, 450, 493, 522, 529, 530, 551, 552, 554, 556, 558, 559, 568, 635, 639, 640, 647, 658, 681, 770, 835, 853, 876, 882, 886, 887, 922, 936, 939, 1020, 1059, 1088, 1165, 1169, 1170, 1177, 1188, 1219, 1233], "directori": [36, 41, 141, 308, 880], "sheet1": [36, 308], "medium": [36, 308], "kei": [36, 41, 45, 47, 52, 55, 141, 143, 145, 148, 201, 213, 215, 216, 226, 232, 234, 238, 240, 243, 244, 277, 286, 308, 447, 530, 582, 752, 770, 803, 810, 814, 815, 824, 830, 831, 849, 876, 882, 1118, 1233, 1248], "follow": [36, 41, 52, 129, 130, 131, 133, 143, 144, 145, 152, 201, 216, 219, 233, 241, 267, 278, 308, 412, 416, 429, 438, 529, 572, 573, 578, 587, 590, 592, 594, 596, 598, 599, 601, 603, 605, 670, 680, 695, 711, 712, 714, 715, 732, 757, 758, 760, 762, 763, 765, 770, 771, 772, 775, 777, 778, 779, 810, 815, 827, 832, 876, 882, 982, 986, 999, 1009, 1114, 1136, 1138, 1214, 1225, 1227, 1229, 1233, 1234, 1238, 1239, 1240, 1261], "first_column": [36, 308], "last_column": [36, 308], "banded_column": [36, 308], "banded_row": [36, 308], "sheet": [36, 134, 140, 308], "chart": [36, 308, 828, 876], "subsequ": [36, 237, 268, 308, 521, 749, 760, 801, 876, 1215, 1233, 1247], "colnam": [36, 143, 308], "given": [36, 47, 93, 98, 115, 116, 118, 119, 120, 122, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 143, 146, 147, 148, 154, 155, 156, 157, 159, 161, 162, 163, 164, 187, 188, 190, 201, 211, 219, 232, 233, 242, 243, 244, 252, 255, 271, 277, 308, 340, 352, 357, 367, 372, 391, 395, 418, 420, 421, 434, 438, 462, 467, 489, 514, 521, 524, 530, 568, 572, 578, 581, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609, 611, 632, 633, 641, 642, 657, 660, 667, 670, 679, 718, 719, 728, 731, 732, 745, 746, 747, 770, 802, 810, 819, 827, 838, 841, 849, 864, 876, 881, 882, 904, 916, 921, 939, 957, 961, 988, 990, 991, 1005, 1007, 1009, 1028, 1032, 1046, 1055, 1080, 1087, 1090, 1093, 1094, 1105, 1114, 1119, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1137, 1141, 1162, 1163, 1171, 1172, 1187, 1190, 1197, 1221, 1224, 1233, 1241, 1243, 1248, 1250, 1253, 1254, 1258, 1260, 1261], "dd": [36, 308, 1254], "mm": [36, 308], "yyyi": [36, 308], "overridden": [36, 116, 118, 120, 122, 138, 139, 165, 308, 876], "basi": [36, 134, 159, 308], "param": [36, 116, 118, 119, 120, 122, 129, 130, 138, 139, 143, 158, 159, 163, 242, 308, 876], "condit": [36, 184, 192, 242, 308, 447, 467, 629, 651, 697, 720, 760, 770, 799, 806, 876, 1032, 1233, 1248, 1252, 1257], "typenam": [36, 308], "3_color_scal": [36, 308], "data_bar": [36, 308], "make": [36, 55, 76, 116, 121, 129, 130, 133, 134, 135, 137, 141, 146, 226, 230, 237, 267, 278, 308, 439, 440, 462, 558, 559, 568, 581, 649, 770, 824, 876, 880, 1010, 1011, 1028, 1179, 1214, 1233], "icon": [36, 308], "multipl": [36, 53, 54, 55, 100, 129, 130, 134, 140, 143, 146, 147, 148, 157, 159, 163, 182, 187, 189, 192, 200, 201, 205, 214, 232, 234, 244, 247, 250, 255, 277, 282, 287, 308, 367, 496, 535, 540, 548, 549, 568, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 620, 668, 679, 696, 703, 720, 731, 733, 738, 744, 750, 753, 760, 766, 770, 791, 792, 798, 806, 809, 810, 834, 837, 841, 849, 852, 857, 864, 876, 888, 917, 1007, 1014, 1062, 1082, 1099, 1118, 1119, 1150, 1233, 1245, 1250], "singl": [36, 47, 53, 54, 55, 128, 129, 130, 131, 132, 133, 134, 141, 143, 148, 157, 173, 182, 183, 184, 189, 196, 202, 211, 219, 232, 242, 244, 255, 266, 267, 286, 308, 341, 372, 390, 412, 454, 457, 460, 490, 496, 529, 530, 579, 582, 583, 585, 620, 623, 635, 636, 640, 647, 658, 686, 696, 700, 701, 727, 731, 732, 750, 758, 766, 770, 788, 791, 792, 798, 799, 841, 876, 882, 905, 939, 956, 982, 1014, 1026, 1056, 1062, 1115, 1118, 1119, 1121, 1153, 1165, 1166, 1170, 1177, 1188, 1208, 1214, 1233, 1243], "across": [36, 47, 132, 202, 221, 223, 228, 259, 308, 460, 689, 691, 706, 707, 709, 734, 736, 739, 754, 770, 1026, 1233], "effect": [36, 194, 201, 308, 399, 451, 530, 553, 555, 557, 770, 810, 855, 856, 876, 957, 965], "heatmap": [36, 308], "min": [36, 41, 45, 180, 191, 228, 234, 241, 308, 379, 446, 568, 578, 587, 595, 596, 739, 748, 770, 796, 805, 832, 876, 880, 946, 951, 1017, 1114, 1127, 1233, 1250, 1252, 1255, 1261], "entir": [36, 53, 54, 134, 140, 308, 791, 792, 876], "made": [36, 131, 308], "abov": [36, 152, 216, 234, 308, 760], "than": [36, 42, 43, 44, 45, 53, 54, 90, 113, 120, 122, 129, 130, 131, 134, 140, 143, 149, 174, 200, 213, 215, 216, 219, 232, 242, 243, 245, 276, 294, 308, 451, 453, 456, 458, 467, 481, 509, 528, 529, 530, 543, 575, 586, 608, 617, 635, 639, 641, 642, 650, 658, 667, 702, 732, 770, 791, 792, 809, 814, 815, 864, 876, 1032, 1075, 1094, 1112, 1122, 1135, 1148, 1165, 1169, 1171, 1172, 1180, 1188, 1197, 1214, 1233, 1261], "bold": [36, 308], "font_color": [36, 308], "702963": [36, 308], "total": [36, 187, 289, 308, 422, 423, 424, 425, 426, 427, 428, 482, 502, 770, 859, 992, 993, 994, 995, 996, 997, 998, 1007, 1048, 1068, 1233], "export": [36, 213, 214, 243, 244, 263, 266, 308, 766, 882], "sum": [36, 187, 194, 200, 201, 211, 234, 241, 259, 287, 308, 380, 381, 385, 434, 447, 521, 530, 539, 541, 542, 543, 544, 582, 587, 602, 603, 686, 688, 706, 708, 709, 720, 732, 744, 754, 770, 791, 792, 797, 801, 803, 809, 810, 826, 828, 832, 836, 839, 857, 876, 880, 882, 947, 948, 1005, 1007, 1131, 1233, 1241, 1248, 1250, 1252, 1258], "must": [36, 65, 117, 118, 133, 144, 145, 149, 180, 188, 201, 216, 226, 241, 242, 308, 383, 521, 575, 582, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 760, 770, 796, 802, 810, 815, 819, 824, 832, 839, 876, 880, 950, 951, 1112, 1118, 1233], "funcnam": [36, 308], "averag": [36, 308, 437, 438, 439, 440, 578, 770, 1008, 1009, 1010, 1011, 1114, 1233, 1249], "count_num": [36, 308], "count": [36, 149, 171, 180, 201, 230, 231, 241, 273, 278, 284, 299, 308, 324, 341, 350, 377, 390, 438, 462, 482, 490, 502, 507, 530, 550, 566, 587, 626, 682, 684, 692, 698, 705, 729, 740, 770, 785, 796, 810, 826, 832, 855, 869, 876, 882, 905, 914, 944, 951, 956, 1009, 1028, 1048, 1056, 1068, 1073, 1101, 1107, 1156, 1220, 1222, 1233, 1241, 1252], "std_dev": [36, 308], "var": [36, 164, 308, 604, 605, 770, 876, 1233, 1249], "pixel": [36, 308], "unit": [36, 62, 64, 152, 153, 154, 155, 159, 163, 187, 308, 392, 394, 400, 420, 432, 438, 444, 527, 540, 657, 660, 683, 713, 714, 715, 716, 722, 770, 828, 876, 880, 882, 958, 960, 966, 990, 1002, 1007, 1009, 1015, 1093, 1187, 1190, 1221, 1233, 1261], "hand": [36, 129, 130, 143, 308, 510, 511, 512, 513, 1076, 1077, 1078, 1079], "side": [36, 201, 241, 308, 467, 510, 511, 512, 513, 587, 590, 592, 594, 596, 598, 601, 603, 605, 609, 711, 712, 714, 715, 757, 758, 770, 810, 832, 876, 880, 1032, 1076, 1077, 1078, 1079, 1137, 1233], "call": [36, 46, 53, 54, 121, 130, 131, 134, 152, 153, 154, 155, 159, 163, 168, 172, 200, 201, 217, 219, 241, 256, 267, 272, 307, 308, 366, 367, 378, 381, 390, 530, 551, 552, 554, 556, 558, 559, 613, 678, 679, 698, 703, 766, 770, 786, 791, 792, 801, 803, 809, 810, 828, 832, 839, 842, 846, 875, 876, 880, 882, 929, 956, 1094, 1144, 1214, 1218, 1233, 1242, 1246, 1258], "ad": [36, 119, 134, 201, 273, 277, 282, 283, 308, 323, 444, 706, 707, 770, 810, 849, 852, 853, 876, 882, 1015, 1233], "wise": [36, 47, 131, 194, 308, 325, 326, 327, 328, 329, 330, 373, 374, 375, 442, 525, 614, 615, 616, 675, 676, 720, 744, 770, 889, 890, 891, 892, 893, 894, 941, 942, 943, 1012, 1091, 1092, 1145, 1146, 1147, 1206, 1207, 1233], "particip": [36, 308], "distinct": [36, 163, 232, 286, 308, 358, 470, 473, 522, 578, 586, 716, 770, 922, 1036, 1039, 1088, 1114, 1122, 1233, 1249, 1257, 1259, 1261], "referenc": [36, 308, 670, 1242, 1258], "differ": [36, 87, 90, 111, 129, 134, 149, 152, 154, 189, 201, 202, 213, 241, 243, 244, 263, 266, 267, 273, 308, 386, 398, 412, 413, 415, 430, 436, 451, 460, 491, 510, 512, 521, 530, 560, 561, 563, 582, 657, 682, 719, 722, 728, 770, 801, 810, 832, 876, 882, 933, 952, 964, 982, 983, 985, 1000, 1014, 1026, 1057, 1076, 1078, 1094, 1103, 1104, 1118, 1187, 1233, 1255, 1258], "row_index": [36, 308], "height": [36, 126, 159, 184, 308], "intersect": [36, 308, 511, 882, 1077, 1257], "bodi": [36, 308, 312], "start": [36, 127, 129, 130, 132, 135, 137, 140, 141, 143, 146, 147, 148, 165, 195, 200, 201, 217, 254, 278, 284, 285, 308, 361, 364, 365, 390, 398, 408, 413, 416, 429, 430, 441, 455, 497, 515, 586, 590, 592, 594, 596, 598, 601, 603, 605, 618, 624, 629, 632, 642, 647, 651, 652, 654, 655, 658, 667, 693, 698, 706, 710, 711, 712, 713, 714, 715, 718, 720, 726, 727, 757, 758, 760, 766, 770, 808, 809, 810, 828, 840, 855, 856, 876, 882, 928, 956, 958, 961, 964, 966, 967, 973, 975, 977, 978, 981, 983, 986, 990, 999, 1000, 1022, 1063, 1081, 1122, 1149, 1159, 1162, 1172, 1177, 1181, 1182, 1184, 1188, 1197, 1233, 1248, 1254, 1261], "unless": [36, 47, 118, 266, 271, 308, 652, 653, 745, 876, 1182, 1255], "marker": [36, 308], "compliant": [36, 308], "case": [36, 46, 47, 54, 91, 116, 118, 119, 120, 122, 131, 138, 139, 147, 148, 165, 189, 201, 213, 219, 234, 241, 243, 244, 263, 266, 267, 308, 391, 438, 529, 539, 540, 552, 587, 624, 625, 632, 634, 643, 644, 645, 770, 792, 810, 832, 876, 880, 882, 957, 1009, 1014, 1154, 1155, 1162, 1164, 1173, 1174, 1175, 1212, 1233], "three": [36, 241, 270, 308, 383, 575, 587, 609, 635, 658, 770, 832, 876, 921, 950, 1087, 1112, 1165, 1188, 1233], "avail": [36, 37, 38, 41, 45, 125, 131, 132, 133, 144, 145, 157, 168, 234, 256, 261, 307, 308, 578, 749, 762, 763, 765, 769, 770, 771, 772, 775, 776, 777, 778, 779, 782, 803, 842, 875, 876, 880, 882, 951, 1114, 1225, 1227, 1229, 1233, 1234, 1238, 1239, 1240], "insert_befor": [36, 308], "insert_aft": [36, 308], "respect": [36, 308, 625, 645, 882, 1155, 1175, 1217, 1233], "direct": [36, 132, 141, 145, 148, 152, 252, 266, 276, 308, 352, 514, 611, 770, 838, 876, 916, 1080, 1141, 1233], "far": [36, 308], "strongli": [36, 165, 219, 242, 294, 308, 530, 770, 1094, 1233], "advis": [36, 46, 85, 217, 308], "structur": [36, 37, 38, 93, 96, 110, 126, 189, 233, 244, 261, 267, 308, 572, 770, 827, 876, 1014, 1233, 1258], "wherev": [36, 219, 294, 308, 530, 770, 1094, 1233], "possibl": [36, 41, 45, 91, 93, 118, 119, 122, 129, 134, 156, 159, 163, 200, 213, 219, 243, 274, 294, 308, 527, 530, 539, 588, 650, 683, 770, 809, 841, 847, 876, 1094, 1123, 1180, 1233], "simpl": [36, 230, 308], "colx": [36, 308, 558, 559, 882, 1247, 1261], "coli": [36, 308, 558, 559, 882, 1261], "after": [36, 55, 119, 127, 129, 130, 135, 137, 141, 143, 146, 147, 148, 172, 189, 272, 275, 307, 308, 366, 367, 441, 568, 578, 667, 678, 679, 770, 786, 846, 848, 876, 929, 1014, 1114, 1197, 1218, 1233, 1247], "befor": [36, 61, 62, 129, 131, 134, 143, 149, 152, 153, 154, 155, 165, 168, 189, 201, 216, 256, 266, 271, 275, 308, 380, 381, 382, 529, 568, 569, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 630, 667, 673, 746, 747, 770, 810, 812, 815, 848, 876, 880, 947, 948, 949, 1014, 1108, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1160, 1197, 1204, 1233, 1248], "most": [36, 116, 129, 130, 132, 143, 152, 153, 154, 155, 267, 308, 540, 548, 569, 650, 770, 1099, 1108, 1180, 1214, 1233, 1244, 1258], "mandatori": [36, 308], "return_dtyp": [36, 219, 308, 529, 530, 582, 687, 731, 732, 770, 1094, 1118, 1233], "latter": [36, 189, 308, 1014, 1233], "appropri": [36, 149, 267, 308, 578, 770, 1114, 1233], "pure": [36, 308, 536], "actual": [36, 119, 159, 163, 244, 308, 1143, 1233, 1255, 1260], "indic": [36, 61, 62, 64, 77, 91, 101, 127, 129, 130, 131, 135, 137, 141, 143, 148, 156, 157, 163, 201, 241, 244, 250, 252, 264, 308, 334, 352, 454, 462, 468, 469, 470, 472, 473, 474, 475, 476, 477, 496, 514, 534, 535, 536, 537, 538, 587, 590, 592, 594, 596, 598, 601, 603, 605, 609, 611, 614, 696, 697, 741, 770, 810, 832, 837, 838, 876, 880, 882, 916, 1021, 1028, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1062, 1080, 1136, 1137, 1141, 1145, 1209, 1233, 1261], "calcul": [36, 41, 45, 47, 180, 201, 257, 279, 308, 386, 437, 438, 439, 440, 479, 491, 510, 517, 523, 527, 599, 617, 622, 683, 685, 702, 704, 746, 747, 751, 759, 770, 796, 810, 843, 850, 876, 951, 952, 1008, 1009, 1010, 1011, 1047, 1057, 1076, 1129, 1148, 1152, 1223, 1233], "individu": [36, 45, 168, 241, 266, 267, 271, 308, 530, 632, 770, 791, 832, 876, 882, 937, 1162, 1233], "gridlin": [36, 308], "zoom": [36, 308], "freez": [36, 308], "pane": [36, 308], "top": [36, 256, 272, 308, 679, 770, 842, 846, 876, 1258], "index": [36, 98, 117, 121, 124, 129, 130, 135, 137, 141, 143, 146, 147, 148, 151, 170, 195, 197, 201, 206, 211, 213, 234, 239, 241, 242, 243, 252, 254, 266, 267, 269, 277, 278, 284, 285, 308, 318, 331, 332, 333, 335, 338, 339, 344, 352, 357, 438, 454, 455, 457, 486, 487, 496, 497, 498, 514, 515, 521, 587, 590, 592, 594, 596, 598, 601, 603, 605, 609, 611, 618, 624, 631, 634, 635, 647, 658, 668, 696, 726, 729, 770, 808, 810, 832, 838, 840, 849, 855, 856, 876, 882, 895, 896, 897, 898, 899, 902, 903, 908, 916, 921, 1009, 1021, 1022, 1046, 1052, 1053, 1062, 1063, 1064, 1080, 1081, 1087, 1105, 1136, 1137, 1141, 1149, 1161, 1164, 1165, 1177, 1188, 1233, 1250, 1254], "thu": [36, 189, 308, 702, 1014, 1233], "altern": [36, 308, 766, 1251], "a2": [36, 48, 50, 308], "occur": [36, 53, 54, 91, 100, 106, 308, 341, 490, 548, 578, 770, 791, 792, 801, 803, 828, 839, 876, 905, 1056, 1099, 1114, 1214, 1233], "equival": [36, 116, 118, 119, 120, 122, 133, 138, 139, 147, 201, 211, 230, 308, 317, 321, 435, 436, 438, 451, 456, 458, 481, 528, 547, 549, 562, 563, 564, 567, 573, 640, 672, 680, 687, 770, 810, 876, 1009, 1046, 1170, 1193, 1195, 1196, 1233, 1242, 1250], "top_row": [36, 308], "top_col": [36, 308], "base": [36, 60, 102, 104, 161, 184, 192, 201, 241, 308, 391, 399, 434, 437, 438, 439, 440, 447, 462, 466, 524, 525, 529, 530, 573, 575, 582, 587, 590, 592, 594, 596, 598, 601, 603, 605, 662, 770, 799, 806, 810, 832, 876, 882, 957, 965, 1005, 1008, 1009, 1010, 1011, 1028, 1031, 1090, 1091, 1094, 1112, 1118, 1192, 1224, 1233, 1248, 1253, 1261], "scroll": [36, 308], "region": [36, 145, 308], "initi": [36, 76, 168, 308, 706, 720, 760, 1258], "5th": [36, 308], "properti": [36, 170, 176, 177, 185, 193, 204, 246, 251, 281, 285, 308, 312, 793, 794, 800, 833, 851, 856, 876, 881, 882, 1233, 1261], "readthedoc": [36, 308], "html": [36, 37, 38, 117, 131, 135, 137, 170, 178, 308], "definit": [36, 308, 479, 770, 881, 882, 1047, 1233], "take": [36, 126, 134, 140, 159, 160, 168, 194, 195, 201, 223, 226, 233, 234, 238, 308, 333, 390, 412, 447, 454, 455, 496, 497, 553, 555, 557, 620, 696, 698, 717, 719, 728, 770, 808, 810, 824, 830, 876, 897, 956, 982, 1021, 1022, 1062, 1063, 1224, 1233, 1250], "care": [36, 250, 308, 530, 610, 770, 837, 876, 1139, 1233], "rel": [36, 132, 133, 144, 145, 152, 153, 154, 155, 308, 412, 437, 439, 440, 684, 770, 982, 1008, 1010, 1011, 1222, 1233], "working_with_conditional_format": [36, 308], "similarli": [36, 119, 201, 216, 241, 278, 308, 412, 416, 429, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 757, 758, 770, 810, 815, 832, 876, 982, 986, 999], "well": [36, 129, 130, 131, 143, 308, 467, 749, 770, 1032, 1233, 1258], "adjac": [36, 308], "two": [36, 46, 84, 85, 118, 120, 122, 132, 194, 216, 225, 226, 234, 243, 270, 288, 294, 308, 312, 318, 387, 394, 451, 454, 457, 521, 575, 619, 694, 695, 702, 704, 746, 747, 749, 770, 823, 824, 858, 864, 876, 882, 921, 953, 960, 1087, 1112, 1233, 1247, 1248, 1251, 1259], "help": [36, 152, 153, 154, 155, 308, 311, 803, 876, 1233, 1237], "where": [36, 47, 91, 131, 132, 134, 184, 189, 192, 201, 213, 225, 243, 256, 257, 266, 271, 277, 279, 308, 334, 431, 434, 436, 438, 447, 517, 523, 529, 563, 581, 609, 617, 620, 622, 645, 685, 697, 702, 704, 746, 747, 749, 751, 759, 760, 770, 799, 806, 810, 823, 842, 843, 849, 850, 876, 898, 1001, 1005, 1009, 1014, 1018, 1137, 1148, 1152, 1175, 1223, 1224, 1233, 1241, 1257, 1258, 1260], "appear": [36, 59, 119, 154, 155, 308, 682, 770, 882, 1220, 1233, 1259], "working_with_sparklin": [36, 308], "inject": [36, 47, 308], "locat": [36, 189, 239, 269, 275, 308, 609, 770, 848, 876, 1014, 1021, 1136, 1137, 1233], "syntax": [36, 107, 192, 219, 230, 308, 624, 631, 632, 634, 643, 644, 726, 727, 766, 806, 839, 876, 1154, 1161, 1162, 1164, 1173, 1174, 1233, 1255], "correctli": [36, 308, 529, 770], "microsoft": [36, 308], "com": [36, 132, 308, 437, 439, 440, 631, 632, 633, 770, 1008, 1010, 1011, 1161, 1162, 1163, 1233], "u": [36, 62, 64, 148, 161, 216, 308, 392, 394, 400, 420, 432, 657, 660, 689, 691, 713, 714, 715, 716, 722, 882, 958, 960, 966, 990, 1002, 1187, 1190, 1245, 1255], "offic": [36, 308], "f5ed2452": [36, 308], "2337": [36, 308], "4f71": [36, 308], "bed3": [36, 308], "c8ae6d2b276": [36, 308], "basic": [36, 308, 1261], "random": [36, 37, 135, 150, 157, 202, 245, 308, 460, 509, 578, 608, 613, 684, 770, 782, 1026, 1075, 1114, 1135, 1144, 1222, 1233], "uniform": [36, 308, 575, 770, 1112, 1233], "dtm": [36, 308, 394, 882, 960], "500": [36, 277, 308, 396, 397, 401, 404, 406, 407, 411, 417, 419, 803, 849, 876, 973, 975, 981, 1124, 1125, 1127, 1233], "val": [36, 240, 308, 530, 572, 677, 760, 770, 831, 876], "10_000": [36, 308], "20_000": [36, 308], "30_000": [36, 308], "increas": [36, 47, 129, 140, 141, 148, 308, 382, 586, 770, 949, 1122, 1233], "b4": [36, 308], "light": [36, 308], "twice": [36, 308], "titl": [36, 308, 1241], "explicit": [36, 91, 131, 143, 157, 256, 277, 308, 744, 842, 849, 876], "integr": [36, 271, 308, 1261], "multi_fram": [36, 308], "wb": [36, 308], "coordin": [36, 308], "advanc": [36, 134, 234, 308, 357, 521, 551, 554, 556, 558, 559, 921, 1087, 1261], "min_color": [36, 308], "76933c": [36, 308], "mid_color": [36, 308], "c4d79b": [36, 308], "max_color": [36, 308], "ebf1d": [36, 308], "data_bar_2010": [36, 308], "bar_color": [36, 308], "9bbb59": [36, 308], "bar_negative_color_sam": [36, 308], "bar_negative_border_color_sam": [36, 308], "white": [36, 308], "w": [36, 131, 201, 244, 308, 626, 631, 633, 689, 691, 810, 876, 882, 1156, 1161, 1163, 1183, 1244, 1245], "get_worksheet_by_nam": [36, 308], "fmt_titl": [36, 308], "add_format": [36, 308], "4f6228": [36, 308], "font_siz": [36, 308], "ital": [36, 308], "customis": [36, 308], "trend": [36, 308], "win_loss": [36, 308], "subtl": [36, 308], "tone": [36, 308], "hidden": [36, 308], "q1": [36, 308], "55": [36, 49, 308], "35": [36, 308, 386, 713, 770, 952, 1233], "q2": [36, 308], "30": [36, 180, 189, 201, 205, 233, 239, 262, 282, 308, 331, 332, 333, 386, 394, 396, 397, 401, 404, 406, 407, 408, 409, 411, 414, 415, 416, 417, 419, 422, 429, 430, 460, 536, 612, 713, 730, 756, 757, 770, 796, 801, 810, 827, 852, 876, 882, 952, 960, 979, 985, 986, 992, 999, 1025, 1233, 1248, 1249, 1251, 1253, 1255, 1256, 1259, 1261], "60": [36, 126, 189, 308, 401, 406, 407, 417, 428, 451, 603, 657, 770, 983, 987, 998, 1116, 1187, 1233, 1256], "q3": [36, 308], "40": [36, 180, 189, 216, 233, 308, 416, 429, 460, 523, 661, 671, 770, 796, 827, 876, 882, 969, 999, 1089, 1191, 1248, 1249, 1251], "80": [36, 308], "q4": [36, 308], "75": [36, 180, 308, 321, 567, 575, 589, 591, 593, 595, 600, 602, 604, 732, 770, 796, 876, 882, 951, 1028, 1047, 1112, 1233, 1256, 1261], "account": [36, 123, 132, 145, 308, 412, 437, 439, 440, 770, 982, 1008, 1010, 1011, 1233], "flavour": [36, 131, 308], "0_": [36, 308], "just": [36, 121, 131, 143, 225, 308, 823, 876, 882], "unifi": [36, 266, 271, 308, 882], "2_color_scal": [36, 308], "95b3d7": [36, 308], "ffffff": [36, 308], "standardis": [36, 308], "z": [36, 55, 76, 123, 157, 187, 208, 210, 215, 225, 243, 244, 273, 276, 308, 317, 319, 321, 460, 488, 530, 552, 554, 556, 558, 559, 567, 581, 582, 625, 632, 645, 657, 660, 689, 691, 709, 734, 736, 739, 745, 749, 754, 770, 814, 823, 840, 842, 876, 882, 1017, 1118, 1155, 1162, 1175, 1187, 1190, 1233, 1244, 1248, 1258, 1260], "score": [36, 308], "conjunct": [36, 84, 131, 134, 140, 157, 308, 726, 729], "a123": [36, 308], "b345": [36, 308], "c567": [36, 308], "d789": [36, 308], "e101": [36, 308], "45": [36, 180, 241, 308, 394, 416, 429, 587, 603, 626, 632, 669, 695, 713, 730, 756, 757, 770, 796, 832, 876, 882, 960, 986, 999, 1156, 1162, 1200, 1253, 1256, 1259, 1261], "85": [36, 308, 1047, 1233, 1261], "font": [36, 308], "consola": [36, 308], "stdev": [36, 308, 1249], "ipccompress": [37, 38, 308], "futur": [37, 38, 54, 134, 170, 180, 250, 261, 308, 792, 796, 837, 876], "arrow": [37, 38, 43, 116, 131, 132, 135, 137, 146, 213, 243, 244, 261, 263, 267, 308, 876, 1208, 1214, 1233], "ipc": [37, 38, 43, 135, 136, 137, 146, 149, 308, 782, 876], "binari": [37, 131, 308, 361, 362, 363, 364, 365, 627, 882, 924, 925, 927, 928, 1157], "feather": [37, 135, 146, 308, 782], "access": [37, 48, 49, 50, 51, 135, 141, 143, 145, 146, 148, 170, 176, 213, 242, 243, 256, 308, 633, 668, 793, 842, 854, 876, 881, 1163, 1261], "lz4": [37, 38, 41, 43, 45, 308, 876], "zstd": [37, 38, 41, 43, 45, 308, 876], "intern": [37, 38, 131, 150, 213, 261, 308, 451, 770, 1242], "might": [37, 38, 129, 130, 143, 165, 261, 267, 308, 530, 682, 770, 841, 876], "implement": [37, 38, 41, 117, 131, 170, 202, 219, 261, 294, 308, 311, 312, 460, 530, 551, 552, 554, 556, 558, 559, 668, 732, 770, 864, 1026, 1094, 1136, 1138, 1233, 1237], "consid": [37, 38, 42, 43, 44, 45, 53, 54, 63, 65, 84, 85, 126, 129, 130, 131, 141, 143, 148, 149, 152, 153, 154, 155, 172, 184, 186, 212, 219, 225, 243, 256, 261, 266, 271, 272, 274, 276, 277, 308, 312, 367, 372, 382, 383, 416, 451, 462, 529, 530, 536, 550, 551, 554, 556, 558, 559, 575, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 679, 706, 720, 746, 747, 766, 770, 786, 791, 792, 799, 811, 818, 823, 842, 846, 847, 849, 864, 876, 882, 932, 934, 939, 949, 950, 986, 1006, 1028, 1094, 1112, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1138, 1212, 1217, 1233, 1242], "unstabl": [37, 38, 42, 43, 44, 45, 53, 54, 63, 65, 114, 126, 131, 141, 148, 149, 256, 261, 266, 271, 276, 277, 308, 312, 382, 383, 416, 462, 530, 575, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 746, 747, 770, 791, 792, 842, 849, 876, 934, 949, 950, 986, 1028, 1112, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1212, 1217, 1233], "It": [37, 38, 42, 43, 44, 45, 46, 53, 54, 63, 65, 85, 126, 141, 148, 149, 180, 226, 233, 256, 261, 266, 271, 276, 277, 285, 294, 308, 312, 382, 383, 416, 462, 530, 539, 575, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 746, 747, 766, 770, 787, 791, 792, 796, 819, 824, 842, 849, 856, 864, 876, 934, 949, 950, 986, 1028, 1112, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1138, 1212, 1217, 1233], "break": [37, 38, 42, 43, 44, 45, 53, 54, 63, 65, 126, 141, 148, 149, 256, 261, 266, 271, 276, 277, 308, 312, 382, 383, 416, 462, 530, 575, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 746, 747, 770, 791, 792, 842, 849, 876, 934, 949, 950, 986, 1028, 1112, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1212, 1217, 1233], "batch": [38, 53, 54, 125, 130, 131, 137, 147, 149, 243, 271, 308, 791, 792, 819, 876], "iobas": [39, 40, 138, 139, 181, 249, 308, 385, 542, 545, 770, 797, 836, 876], "serial": [39, 40, 181, 308, 385, 545, 770, 797, 876], "write_ndjson": [39, 308], "newlin": [40, 139, 147, 308], "delimit": [40, 42, 139, 147, 234, 264, 308, 623, 636, 876, 1153, 1166, 1209, 1233], "parquetcompress": [41, 308], "compression_level": [41, 45, 308, 876], "statist": [41, 45, 129, 130, 141, 148, 180, 308, 439, 440, 479, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 617, 770, 796, 876, 951, 1010, 1011, 1047, 1129, 1148, 1233], "row_group_s": [41, 45, 308, 876], "data_page_s": [41, 308], "use_pyarrow": [41, 45, 129, 135, 137, 141, 267, 308, 876, 1214, 1233], "pyarrow_opt": [41, 133, 141, 144, 308], "parquet": [41, 45, 141, 142, 148, 308, 782, 876], "gzip": [41, 45, 308, 876], "lzo": [41, 45, 308, 876], "brotli": [41, 45, 308, 876], "choos": [41, 43, 45, 201, 234, 308, 810, 876], "good": [41, 43, 45, 213, 308, 876, 1253], "fast": [41, 43, 45, 162, 164, 308, 444, 610, 770, 876, 880, 1015, 1139, 1233, 1261], "decompress": [41, 43, 45, 308, 876], "backward": [41, 45, 191, 216, 308, 360, 390, 410, 446, 770, 805, 815, 876, 956, 980, 1017, 1233], "guarante": [41, 45, 129, 130, 172, 180, 202, 272, 274, 308, 366, 367, 460, 678, 679, 770, 786, 796, 803, 846, 847, 876, 929, 1025, 1026, 1218, 1233], "deal": [41, 45, 213, 308, 320, 322, 415, 578, 657, 660, 688, 689, 690, 691, 713, 770, 876, 886, 887, 985, 1114, 1187, 1190, 1233], "older": [41, 45, 308, 876], "reader": [41, 45, 125, 129, 130, 134, 135, 137, 141, 308, 876], "higher": [41, 45, 180, 236, 300, 308, 576, 597, 598, 743, 770, 796, 829, 870, 876, 951, 1113, 1128, 1233], "mean": [41, 45, 129, 130, 135, 143, 180, 191, 200, 201, 216, 223, 234, 241, 278, 287, 308, 412, 416, 429, 443, 446, 451, 587, 590, 591, 592, 594, 596, 598, 601, 603, 605, 617, 623, 631, 636, 711, 712, 714, 715, 716, 736, 757, 758, 760, 770, 796, 805, 809, 810, 815, 819, 832, 857, 876, 951, 982, 986, 999, 1013, 1017, 1025, 1125, 1148, 1153, 1161, 1166, 1233, 1249, 1250], "smaller": [41, 45, 187, 308, 803, 876, 1007, 1233], "disk": [41, 42, 43, 44, 45, 135, 308, 839, 876], "22": [41, 45, 151, 159, 308, 398, 413, 416, 429, 431, 432, 588, 590, 592, 594, 596, 598, 601, 603, 605, 657, 713, 766, 770, 876, 882, 986, 999, 1002, 1123, 1187, 1233, 1255, 1261], "behavior": [41, 45, 184, 215, 216, 308, 344, 453, 496, 498, 630, 719, 728, 770, 799, 814, 815, 876, 908, 1062, 1064, 1160], "disabl": [41, 45, 46, 84, 85, 160, 213, 308, 791, 876], "combin": [41, 45, 53, 54, 55, 192, 201, 202, 216, 241, 278, 308, 321, 334, 429, 438, 451, 567, 582, 587, 652, 653, 654, 711, 712, 714, 715, 757, 758, 760, 770, 791, 792, 801, 803, 810, 815, 828, 832, 839, 876, 986, 999, 1009, 1118, 1182, 1183, 1184, 1233, 1248, 1259], "minimum": [41, 45, 157, 158, 159, 161, 163, 194, 227, 228, 308, 437, 439, 440, 546, 561, 571, 578, 738, 739, 770, 825, 876, 976, 1008, 1010, 1011, 1104, 1110, 1114, 1233, 1249, 1261], "distinct_count": [41, 45, 308, 876], "uniqu": [41, 45, 47, 156, 157, 158, 161, 163, 171, 210, 215, 230, 234, 244, 299, 308, 324, 335, 350, 383, 478, 507, 550, 575, 657, 659, 660, 664, 682, 684, 692, 740, 770, 785, 814, 869, 876, 880, 899, 914, 950, 1045, 1073, 1101, 1112, 1187, 1189, 1190, 1194, 1220, 1222, 1233, 1248, 1250], "null_count": [41, 45, 180, 184, 308, 382, 770, 796, 876, 949, 951, 1233], "512": [41, 131, 213, 308, 573, 770, 1108, 1233], "page": [41, 45, 135, 141, 146, 148, 308, 770, 782, 876, 1233, 1257], "At": [41, 308], "moment": [41, 178, 308, 479, 617, 770, 1047, 1148, 1233], "write_t": [41, 308], "partition_col": [41, 132, 308], "write_to_dataset": [41, 308], "spark": [41, 308], "partit": [41, 132, 133, 141, 144, 148, 149, 214, 232, 308, 568, 770], "we": [41, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 180, 181, 201, 216, 241, 278, 308, 385, 412, 416, 429, 462, 493, 521, 529, 530, 587, 590, 592, 594, 596, 598, 601, 603, 605, 633, 662, 710, 711, 712, 713, 714, 715, 730, 757, 758, 760, 770, 796, 797, 810, 815, 819, 832, 876, 982, 986, 999, 1028, 1059, 1094, 1163, 1192, 1233, 1244], "use_pyarrow_write_to_dataset": [41, 308], "first": [41, 47, 129, 130, 134, 135, 137, 141, 143, 152, 153, 154, 155, 199, 201, 203, 216, 218, 219, 229, 233, 234, 241, 260, 264, 265, 273, 274, 278, 285, 291, 308, 333, 335, 344, 382, 386, 410, 412, 416, 432, 451, 461, 470, 483, 491, 493, 498, 499, 521, 529, 530, 540, 572, 573, 587, 609, 620, 624, 630, 631, 634, 635, 637, 638, 643, 644, 658, 699, 706, 720, 724, 760, 766, 770, 791, 810, 811, 815, 818, 827, 832, 847, 854, 856, 861, 876, 882, 897, 908, 949, 951, 952, 980, 982, 986, 1002, 1027, 1036, 1049, 1057, 1059, 1064, 1065, 1087, 1094, 1137, 1150, 1160, 1161, 1163, 1164, 1165, 1167, 1168, 1173, 1174, 1188, 1205, 1209, 1211, 1214, 1233, 1251, 1252, 1254, 1259, 1261], "watermark": [41, 308], "partitioned_object": [41, 308], "maintain_ord": [42, 43, 44, 45, 200, 232, 234, 255, 274, 278, 288, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 318, 358, 367, 454, 457, 522, 530, 620, 679, 681, 696, 770, 792, 801, 803, 809, 828, 839, 841, 847, 858, 860, 862, 865, 866, 867, 868, 869, 870, 871, 876, 922, 1088, 1219, 1233], "type_coercion": [42, 43, 44, 45, 53, 54, 791, 792, 801, 803, 828, 839, 876], "predicate_pushdown": [42, 43, 44, 45, 53, 54, 791, 792, 801, 803, 819, 828, 839, 876], "projection_pushdown": [42, 43, 44, 45, 53, 54, 791, 792, 801, 803, 819, 828, 839, 876], "simplify_express": [42, 43, 44, 45, 53, 54, 791, 792, 801, 803, 828, 839, 876], "slice_pushdown": [42, 43, 44, 45, 53, 54, 791, 792, 801, 803, 819, 828, 839, 876], "no_optim": [42, 43, 44, 45, 53, 54, 791, 792, 803, 819, 828, 876], "evalu": [42, 43, 44, 45, 190, 192, 216, 308, 321, 334, 336, 337, 382, 447, 464, 484, 485, 521, 567, 688, 690, 693, 697, 711, 712, 714, 715, 717, 726, 727, 742, 745, 752, 757, 758, 760, 761, 770, 791, 806, 812, 814, 815, 876, 898, 900, 901, 949, 1018, 1050, 1051, 1224, 1233, 1251], "queri": [42, 43, 44, 45, 53, 54, 131, 132, 135, 143, 146, 147, 148, 189, 217, 233, 256, 308, 529, 530, 638, 749, 770, 791, 792, 801, 803, 811, 818, 828, 839, 842, 855, 856, 864, 876, 1014, 1094, 1168, 1233, 1241, 1242, 1244, 1248, 1257, 1259, 1260], "ram": [42, 43, 44, 45, 876], "maintain": [42, 43, 44, 45, 255, 308, 358, 522, 609, 620, 681, 696, 770, 796, 841, 876, 922, 1088, 1137, 1219, 1233], "slightli": [42, 43, 44, 45, 87, 451, 770, 876, 1255], "faster": [42, 43, 44, 45, 131, 134, 189, 267, 276, 308, 530, 682, 770, 876, 1014, 1094, 1233], "coercion": [42, 43, 44, 45, 53, 54, 581, 770, 791, 792, 801, 803, 828, 839, 876], "optim": [42, 43, 44, 45, 53, 54, 141, 143, 146, 147, 148, 213, 217, 233, 237, 243, 274, 308, 787, 791, 792, 801, 803, 819, 828, 839, 847, 855, 856, 864, 876, 935, 1136, 1233], "pushdown": [42, 43, 44, 45, 53, 54, 791, 792, 801, 803, 819, 828, 830, 839, 855, 856, 876, 1136, 1138, 1233], "project": [42, 43, 44, 45, 53, 54, 143, 145, 146, 147, 148, 619, 620, 770, 791, 792, 801, 803, 819, 828, 830, 839, 876], "run": [42, 43, 44, 45, 53, 54, 62, 131, 159, 162, 163, 164, 200, 217, 219, 234, 248, 274, 283, 294, 308, 382, 493, 529, 530, 585, 586, 640, 748, 770, 791, 792, 801, 803, 809, 819, 823, 828, 835, 839, 847, 853, 876, 882, 949, 1059, 1094, 1121, 1122, 1170, 1233, 1258, 1261], "simplifi": [42, 43, 44, 45, 53, 54, 791, 792, 801, 803, 828, 839, 876], "slice": [42, 43, 44, 45, 48, 53, 54, 187, 203, 214, 260, 308, 499, 519, 530, 539, 541, 588, 589, 591, 593, 595, 597, 600, 602, 604, 635, 658, 770, 791, 792, 801, 803, 819, 828, 839, 876, 880, 1007, 1027, 1065, 1085, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1165, 1188, 1205, 1233, 1254], "off": [42, 43, 44, 45, 53, 54, 129, 130, 143, 215, 216, 308, 390, 698, 791, 792, 801, 803, 814, 815, 819, 828, 876, 956], "certain": [42, 43, 44, 45, 54, 133, 144, 206, 278, 308, 653, 654, 766, 791, 792, 828, 876, 1233], "lf": [42, 43, 44, 45, 50, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 855, 856, 859, 863, 876, 1249, 1258, 1261], "scan_csv": [42, 43, 44, 45, 129, 130, 876], "my_larger_than_ram_fil": [42, 43, 44, 45, 876], "ndjson": [44, 876], "data_pagesize_limit": [45, 876], "reduc": [45, 129, 130, 141, 143, 146, 147, 148, 243, 295, 296, 298, 301, 308, 612, 707, 720, 770, 865, 866, 868, 871, 876, 1096, 1111, 1142, 1204, 1233], "pressur": [45, 129, 130, 141, 143, 147, 148, 612, 770, 876, 1142, 1233], "speed": [45, 250, 308, 530, 770, 837, 876, 1261], "context": [46, 84, 85, 165, 230, 256, 308, 318, 447, 493, 529, 530, 539, 619, 620, 684, 703, 705, 719, 722, 728, 729, 732, 741, 745, 748, 769, 770, 781, 782, 842, 854, 876, 1059, 1222, 1233, 1247, 1258, 1260], "manag": [46, 84, 85, 781, 782, 1247, 1258], "global": [46, 84, 85, 134, 150, 159, 167, 256, 308, 582, 749, 770, 842, 876, 932, 933, 1118, 1233, 1242, 1244, 1257], "cach": [46, 53, 54, 84, 85, 111, 135, 143, 146, 148, 152, 153, 154, 155, 167, 582, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 657, 659, 660, 664, 770, 781, 791, 792, 801, 803, 828, 839, 876, 932, 1118, 1187, 1189, 1190, 1194, 1233], "under": [46, 48, 49, 50, 51, 84, 85, 256, 308, 762, 763, 765, 766, 771, 772, 775, 777, 778, 779, 842, 876, 1225, 1227, 1229, 1234, 1238, 1239, 1240], "physic": [46, 59, 85, 129, 130, 216, 308, 677, 770, 787, 814, 815, 876, 933, 1216, 1233], "equal": [46, 85, 129, 130, 131, 143, 152, 153, 154, 155, 201, 216, 226, 255, 308, 383, 429, 435, 436, 438, 456, 481, 521, 563, 575, 581, 588, 589, 591, 593, 595, 597, 600, 602, 604, 620, 641, 642, 667, 696, 746, 747, 760, 766, 770, 810, 815, 824, 841, 876, 950, 986, 1009, 1087, 1112, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1171, 1172, 1197, 1233, 1251, 1261], "concaten": [46, 55, 84, 85, 194, 233, 308, 572, 623, 636, 700, 701, 770, 827, 876, 937, 1100, 1153, 1166, 1233, 1254], "join": [46, 47, 53, 54, 55, 85, 192, 216, 277, 308, 447, 465, 568, 623, 749, 770, 791, 792, 801, 803, 806, 815, 828, 839, 849, 854, 876, 1153, 1242, 1244, 1250, 1257, 1258], "introduc": [46, 85, 657, 659, 660, 1187, 1189, 1190], "overhead": [46, 85, 143, 146, 147, 148], "amount": [46, 64, 85, 143, 146, 530, 716, 770, 1249], "depend": [46, 52, 85, 131, 151, 338, 339, 486, 487, 530, 539, 575, 578, 716, 719, 722, 728, 770, 902, 903, 1052, 1053, 1112, 1114, 1233, 1261], "categori": [46, 65, 85, 264, 308, 369, 383, 462, 575, 770, 931, 950, 1028, 1112, 1209, 1233], "nest": [46, 123, 126, 160, 161, 187, 308, 782, 1007, 1233, 1258, 1261], "clear": [46, 84, 175, 308, 790, 876, 940, 1233], "outermost": 46, "exit": [46, 84, 168, 1247, 1258], "construct": [46, 84, 85, 91, 116, 118, 119, 120, 121, 122, 123, 126, 131, 308, 453, 742, 745, 761, 766, 770, 797, 876, 932, 1233, 1247], "s1": [46, 84, 85, 154, 155, 194, 308, 921, 1006, 1023, 1046, 1054, 1087, 1115, 1224, 1233], "color": [46, 84, 85, 294, 361, 362, 363, 364, 365, 627, 684, 770, 864, 924, 925, 926, 927, 928, 1157, 1222, 1233, 1254], "red": [46, 84, 85, 294, 684, 770, 864, 1222, 1233], "green": [46, 84, 85, 294, 684, 770, 864, 1222, 1233], "blue": [46, 84, 85, 361, 362, 363, 364, 365, 684, 770, 1222, 1233], "concat": [46, 84, 85, 92, 130, 216, 308, 854, 876, 937, 1023, 1100, 1115, 1233, 1252], "decor": [46, 48, 49, 50, 51, 159, 163, 219, 308, 530, 770, 781, 782, 1094, 1233], "dure": [46, 91, 129, 130, 143, 168, 189, 308, 1014, 1233], "afterward": [46, 760], "construct_categor": 46, "arg": [46, 57, 58, 60, 61, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 192, 233, 308, 333, 572, 696, 721, 770, 806, 827, 876, 880, 1094, 1233, 1245], "frametyp": [47, 1258], "joinstrategi": [47, 215, 308, 814, 876], "descend": [47, 250, 255, 308, 333, 353, 516, 578, 610, 619, 620, 684, 696, 770, 837, 841, 876, 897, 917, 1044, 1082, 1114, 1139, 1150, 1222, 1233], "common": [47, 53, 54, 55, 91, 129, 130, 143, 277, 308, 552, 776, 791, 792, 801, 803, 828, 839, 849, 876], "fill": [47, 55, 174, 190, 191, 252, 276, 308, 312, 360, 378, 381, 445, 446, 452, 465, 466, 589, 591, 593, 595, 597, 600, 602, 604, 611, 721, 742, 745, 761, 770, 804, 805, 838, 854, 876, 1016, 1017, 1030, 1031, 1105, 1124, 1125, 1127, 1130, 1131, 1132, 1141, 1233], "sort": [47, 48, 172, 201, 216, 226, 233, 234, 241, 250, 272, 278, 291, 302, 308, 333, 366, 367, 438, 447, 530, 568, 587, 610, 620, 678, 679, 684, 686, 696, 732, 770, 786, 801, 810, 815, 824, 827, 828, 832, 837, 839, 846, 861, 872, 876, 882, 897, 929, 1009, 1044, 1139, 1218, 1219, 1222, 1233, 1248, 1259, 1261], "origin": [47, 129, 130, 143, 184, 192, 274, 308, 388, 389, 415, 416, 429, 447, 492, 530, 551, 568, 580, 581, 582, 583, 585, 626, 631, 638, 694, 695, 770, 799, 806, 847, 876, 954, 955, 985, 986, 999, 1018, 1058, 1118, 1119, 1121, 1156, 1161, 1168, 1233], "In": [47, 54, 131, 133, 144, 145, 148, 159, 163, 168, 187, 189, 201, 216, 219, 230, 241, 267, 308, 529, 530, 587, 770, 792, 810, 832, 876, 1007, 1014, 1115, 1233], "duplic": [47, 92, 208, 215, 216, 274, 277, 308, 319, 468, 551, 575, 770, 814, 815, 847, 849, 876, 1033, 1112, 1233, 1259], "outer": [47, 55, 277, 308, 849, 876], "suitabl": [47, 55, 131, 157, 219, 308, 530, 609, 770, 1094, 1137, 1233], "get": [47, 54, 136, 142, 149, 172, 176, 177, 185, 193, 196, 198, 201, 203, 204, 208, 210, 211, 218, 221, 228, 229, 234, 241, 242, 246, 251, 254, 260, 268, 272, 281, 291, 302, 308, 318, 331, 332, 333, 335, 343, 346, 358, 367, 369, 378, 379, 380, 381, 390, 400, 448, 454, 461, 478, 480, 483, 495, 501, 522, 531, 532, 533, 539, 541, 546, 560, 561, 570, 571, 576, 586, 587, 618, 622, 630, 673, 674, 678, 679, 681, 685, 696, 698, 719, 724, 728, 732, 733, 734, 735, 737, 738, 739, 741, 751, 755, 759, 770, 786, 791, 792, 794, 800, 807, 810, 811, 816, 818, 832, 833, 840, 845, 846, 851, 861, 872, 876, 880, 881, 895, 896, 897, 898, 899, 907, 910, 922, 931, 937, 945, 946, 947, 948, 956, 966, 1004, 1019, 1023, 1027, 1032, 1033, 1045, 1049, 1061, 1067, 1088, 1095, 1097, 1098, 1100, 1102, 1103, 1104, 1109, 1110, 1113, 1122, 1149, 1152, 1160, 1205, 1209, 1215, 1219, 1223, 1233], "speedup": [47, 213, 219, 308, 530, 770, 1094, 1233], "receiv": [47, 131, 143, 219, 233, 294, 308, 530, 572, 770, 827, 876, 1261], "now": [47, 241, 267, 308, 832, 876, 1214, 1233], "One": [47, 180, 230, 234, 266, 271, 308, 321, 567, 692, 703, 719, 725, 728, 735, 737, 740, 741, 750, 770, 796, 876, 882, 951, 1233], "whose": [47, 216, 234, 308, 441, 718, 770, 815, 876, 882], "post": 47, "constrain": [47, 184, 308, 799, 876, 882], "newli": 47, "boolean": [47, 159, 172, 192, 194, 255, 272, 308, 320, 321, 322, 336, 337, 340, 361, 364, 365, 367, 402, 447, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 484, 485, 489, 565, 567, 570, 571, 620, 637, 679, 686, 687, 696, 697, 752, 760, 770, 786, 806, 841, 846, 876, 882, 886, 887, 898, 900, 901, 904, 924, 968, 1018, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1050, 1051, 1055, 1106, 1109, 1110, 1138, 1154, 1224, 1233, 1251], "know": [47, 131, 234, 308, 521, 529, 770], "df1": [47, 55, 152, 153, 186, 189, 226, 256, 280, 308, 824, 876, 1244, 1246, 1247, 1248, 1258], "2022": [47, 173, 180, 199, 308, 394, 416, 429, 657, 711, 712, 714, 715, 716, 722, 788, 796, 876, 882, 960, 969, 986, 999, 1187], "df2": [47, 55, 152, 153, 186, 189, 280, 308, 1244, 1246, 1247, 1248, 1258], "df3": [47, 308], "set_tbl_format": 47, "09": [47, 129, 180, 241, 308, 390, 394, 409, 410, 587, 661, 710, 711, 713, 758, 770, 796, 832, 876, 882, 956, 1191], "02": [47, 173, 180, 199, 201, 241, 278, 308, 390, 392, 394, 400, 409, 410, 412, 415, 420, 423, 426, 428, 432, 587, 590, 592, 594, 596, 598, 601, 603, 605, 606, 657, 659, 660, 664, 698, 710, 711, 712, 713, 714, 715, 716, 770, 788, 796, 810, 832, 876, 882, 921, 958, 960, 962, 963, 966, 967, 972, 973, 977, 979, 980, 981, 985, 986, 989, 990, 993, 996, 998, 999, 1087, 1187, 1189, 1190, 1194, 1255], "03": [47, 123, 129, 173, 201, 216, 241, 278, 308, 392, 394, 395, 400, 409, 410, 412, 415, 416, 418, 420, 421, 422, 423, 426, 428, 429, 432, 438, 451, 587, 590, 592, 594, 596, 598, 601, 603, 605, 659, 664, 710, 711, 712, 713, 714, 715, 716, 770, 788, 810, 832, 876, 882, 958, 960, 961, 966, 967, 972, 973, 979, 980, 981, 985, 986, 988, 990, 991, 992, 993, 996, 998, 1189, 1194], "af1": 47, "af2": 47, "af3": 47, "keep": [47, 129, 130, 143, 146, 274, 277, 278, 308, 453, 529, 544, 552, 582, 699, 770, 847, 849, 876, 1118, 1233], "easili": [47, 247, 271, 282, 287, 308, 752, 766, 834, 852, 857, 876], "dot": [47, 766, 770, 839, 876, 1233], "product": [47, 178, 215, 308, 380, 387, 770, 803, 814, 876, 947, 953, 1233], "fill_nul": [47, 190, 308, 445, 770, 804, 854, 876, 1016, 1233], "sum_horizont": [47, 308, 753], "167": 47, "47": [47, 180, 308, 603, 770, 796, 876, 882], "callabl": [48, 49, 50, 51, 143, 194, 219, 233, 238, 294, 308, 357, 521, 529, 530, 552, 553, 572, 588, 706, 707, 720, 731, 732, 744, 770, 819, 827, 830, 864, 876, 921, 1087, 1094, 1123, 1233], "by_first_letter_of_column_nam": 48, "f": [48, 130, 131, 199, 214, 261, 267, 273, 276, 308, 317, 357, 521, 612, 630, 657, 660, 700, 770, 882, 921, 1087, 1160, 1187, 1190, 1250], "fromkei": [48, 50], "by_first_letter_of_column_valu": 48, "starts_with": [48, 308, 312, 361, 364, 536, 624, 629, 749, 842, 876, 882, 1159, 1252], "to_seri": [48, 196, 308, 657, 697, 745, 1187], "xy": [48, 50], "yz": [48, 50], "b1": [48, 50], "b2": [48, 50], "orient": [48, 50, 91, 120, 122, 230, 308, 876, 1241], "pow_n": 49, "powersofn": 49, "next": [49, 201, 216, 241, 278, 308, 360, 390, 412, 416, 429, 578, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 757, 758, 770, 810, 815, 832, 876, 956, 982, 986, 999, 1114, 1233], "p": [49, 233, 308, 572, 752, 770, 827, 876, 882, 1164, 1165, 1245], "ceil": [49, 770, 1233, 1252], "previou": [49, 168, 390, 551, 552, 554, 556, 558, 559, 569, 670, 770, 956, 1108, 1233], "floor": [49, 451, 770, 1233, 1252], "nearest": [49, 180, 216, 236, 300, 308, 371, 450, 465, 576, 597, 598, 743, 770, 796, 815, 829, 870, 876, 936, 951, 1020, 1030, 1113, 1128, 1233, 1253], "24": [49, 151, 201, 216, 219, 241, 256, 278, 308, 380, 382, 398, 412, 413, 416, 423, 429, 431, 549, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 716, 757, 758, 770, 810, 815, 832, 876, 949, 982, 986, 993, 999, 1046, 1233, 1254, 1260], "001": [49, 667, 716, 994, 995, 997, 1197], "next_pow2": 49, "prev_pow2": 49, "nearest_pow2": 49, "32": [49, 61, 66, 69, 79, 211, 216, 241, 308, 549, 587, 612, 770, 832, 876, 953, 983, 1108, 1128, 1233, 1249, 1254], "128": [49, 63, 1108, 1233], "_lf": 50, "split_by_column_dtyp": 50, "collect_schema": [50, 308, 794, 800, 827, 833, 851, 876], "collect": [50, 53, 54, 143, 144, 145, 149, 159, 160, 163, 184, 217, 234, 256, 261, 274, 275, 308, 441, 471, 530, 700, 718, 722, 749, 752, 770, 785, 786, 788, 789, 792, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 834, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 876, 882, 1037, 1233, 1242, 1243, 1244, 1247, 1248, 1258, 1259, 1261], "collect_al": [50, 54, 791, 792, 876], "31": [51, 180, 181, 249, 256, 308, 393, 394, 398, 405, 409, 412, 422, 630, 657, 710, 713, 722, 730, 749, 796, 876, 882, 957, 959, 960, 964, 974, 979, 992, 1160, 1187, 1255, 1261], "42": [51, 180, 202, 226, 241, 308, 587, 770, 796, 824, 832, 876, 1026, 1233, 1248, 1260], "961": 51, "1764": 51, "4160": 51, "detail": [52, 117, 131, 132, 152, 154, 170, 201, 308, 810, 876, 1261], "build": [52, 117, 882, 1261], "compil": [52, 338, 339, 486, 487, 902, 903, 1052, 1053], "host": [52, 129, 135, 137, 146, 148], "git": 52, "flag": [52, 156, 267, 308, 610, 624, 631, 632, 634, 643, 644, 770, 801, 819, 876, 882, 1139, 1154, 1161, 1162, 1164, 1173, 1174, 1214, 1233, 1254], "lazy_fram": [53, 54], "iter": [53, 54, 55, 65, 116, 131, 162, 164, 172, 182, 192, 200, 201, 212, 213, 214, 241, 242, 243, 244, 247, 248, 255, 272, 273, 282, 283, 286, 287, 308, 367, 382, 390, 447, 568, 620, 671, 679, 689, 691, 696, 698, 699, 700, 701, 709, 734, 736, 739, 748, 752, 754, 760, 766, 770, 786, 798, 806, 809, 810, 832, 834, 835, 841, 846, 852, 853, 857, 876, 880, 881, 949, 956, 1136, 1233, 1261], "comm_subplan_elim": [53, 54, 791, 792, 801, 803, 828, 839, 876], "comm_subexpr_elim": [53, 54, 791, 792, 801, 803, 828, 839, 876], "cluster_with_column": [53, 54, 791, 792, 801, 803, 828, 839, 876], "comput": [53, 55, 89, 187, 200, 216, 268, 274, 287, 300, 308, 316, 325, 326, 327, 328, 329, 330, 347, 348, 349, 354, 355, 359, 370, 373, 374, 375, 378, 379, 380, 381, 387, 434, 442, 479, 503, 504, 505, 506, 510, 511, 512, 513, 517, 523, 524, 525, 526, 548, 568, 569, 574, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 614, 615, 616, 617, 621, 675, 676, 684, 689, 691, 694, 695, 696, 702, 704, 717, 736, 746, 747, 760, 770, 791, 809, 812, 814, 815, 847, 854, 857, 870, 876, 884, 889, 890, 891, 892, 893, 894, 911, 912, 913, 918, 919, 923, 935, 941, 942, 943, 945, 946, 947, 948, 953, 1005, 1007, 1012, 1047, 1069, 1070, 1071, 1072, 1076, 1077, 1078, 1079, 1083, 1089, 1090, 1091, 1092, 1099, 1108, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1145, 1146, 1147, 1148, 1151, 1206, 1207, 1215, 1222, 1233, 1253, 1256], "graph": [53, 131, 217, 308, 791, 812, 854, 876], "parallel": [53, 55, 125, 132, 141, 148, 201, 216, 217, 233, 248, 283, 308, 382, 493, 684, 760, 770, 782, 810, 814, 815, 835, 853, 864, 876, 949, 1059, 1222, 1233], "threadpool": 53, "Will": [53, 54, 791, 792, 801, 803, 828, 839, 876, 1233], "try": [53, 54, 110, 129, 130, 135, 141, 143, 146, 148, 791, 792, 801, 803, 828, 839, 876], "branch": [53, 54, 791, 792, 801, 803, 828, 839, 876], "subplan": [53, 54, 791, 792, 801, 803, 828, 839, 876], "union": [53, 54, 55, 513, 791, 792, 801, 803, 828, 839, 876, 882, 1079, 1257, 1258], "subexpress": [53, 54, 791, 792, 801, 803, 828, 839, 876], "reus": [53, 54, 791, 792, 801, 803, 828, 839, 876], "sequenti": [53, 54, 248, 283, 308, 791, 792, 801, 803, 828, 835, 839, 853, 876], "independ": [53, 54, 156, 159, 163, 271, 308, 791, 792, 801, 803, 828, 839, 876], "explain": [53, 54, 791, 792, 876, 1257], "gevent": [54, 151, 792, 876], "await": [54, 131, 792, 876], "_geventdataframeresult": [54, 792, 876], "asynchron": [54, 131, 792, 876], "them": [54, 116, 118, 119, 120, 122, 131, 132, 138, 139, 140, 141, 143, 147, 148, 188, 189, 201, 216, 226, 241, 271, 278, 308, 345, 438, 467, 500, 560, 561, 568, 587, 700, 711, 712, 714, 715, 757, 758, 770, 792, 802, 810, 815, 824, 832, 876, 882, 909, 1009, 1014, 1066, 1103, 1104, 1233, 1250, 1258], "schedul": [54, 792, 876], "insid": [54, 792, 876], "almost": [54, 219, 294, 308, 657, 659, 660, 792, 876, 1094, 1187, 1189, 1190, 1233], "instantli": [54, 792, 876], "asyncio": [54, 131, 792, 876], "want": [54, 119, 121, 134, 189, 219, 230, 241, 256, 308, 390, 447, 529, 530, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 625, 639, 645, 698, 706, 720, 742, 745, 761, 770, 792, 811, 818, 842, 876, 882, 956, 1014, 1094, 1155, 1169, 1175, 1233, 1247], "releas": [54, 134, 530, 770, 792, 876, 1261], "greenlet": [54, 792, 876], "task": [54, 792, 876], "wrapper": [54, 792, 876], "event": [54, 792, 876], "asyncresult": [54, 792, 876], "timeout": [54, 792, 876], "collect_async": [54, 876], "set_except": [54, 792, 876], "rerais": [54, 792, 876], "polarstyp": 55, "concatmethod": 55, "vertic": [55, 189, 276, 280, 308, 623, 636, 1153, 1166], "rechunk": [55, 116, 121, 129, 130, 133, 135, 137, 141, 143, 146, 147, 148, 189, 308, 770, 937, 1014, 1023, 1100, 1233], "vertical_relax": 55, "diagon": [55, 273, 308], "diagonal_relax": 55, "vstack": [55, 189, 308], "addition": [55, 242, 308, 882], "coerc": [55, 581, 770], "supertyp": [55, 191, 267, 271, 308, 323, 770, 805, 876, 880, 1233], "mismatch": [55, 108, 139, 147, 152, 154], "find": [55, 197, 308, 609, 624, 625, 770, 1137, 1155, 1233], "miss": [55, 129, 130, 143, 190, 308, 360, 437, 439, 440, 445, 452, 474, 475, 521, 770, 804, 876, 1008, 1010, 1011, 1016, 1233], "stack": [55, 205, 280, 308, 1242], "length": [55, 56, 72, 140, 143, 157, 161, 199, 201, 241, 254, 308, 311, 382, 416, 429, 515, 521, 540, 582, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 618, 635, 639, 640, 641, 642, 647, 658, 667, 742, 745, 746, 747, 761, 770, 810, 828, 832, 840, 876, 880, 937, 949, 960, 986, 999, 1081, 1087, 1105, 1118, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1149, 1165, 1169, 1170, 1171, 1172, 1177, 1188, 1197, 1233, 1250, 1252], "don": [55, 201, 216, 219, 274, 276, 308, 382, 493, 530, 770, 810, 847, 876, 882, 949, 1059, 1094, 1233], "auto": [55, 116, 118, 119, 120, 122, 138, 139, 141, 147, 148, 273, 308, 876, 1261], "logic": [55, 219, 294, 308, 311, 312, 320, 322, 385, 530, 677, 688, 689, 690, 691, 732, 770, 797, 801, 814, 836, 864, 876, 886, 887, 1094, 1214, 1216, 1233, 1237], "align_fram": 55, "pattern": [55, 87, 129, 130, 143, 146, 147, 148, 213, 308, 537, 624, 625, 626, 631, 632, 633, 634, 643, 644, 645, 864, 882, 1136, 1138, 1154, 1155, 1156, 1161, 1162, 1163, 1164, 1173, 1174, 1175, 1233, 1254], "collis": 55, "need": [55, 86, 95, 123, 129, 130, 132, 201, 241, 244, 253, 308, 521, 587, 612, 661, 716, 742, 745, 761, 770, 810, 832, 876, 1142, 1191, 1233, 1261], "sure": [55, 116, 121, 129, 130, 133, 135, 137, 141, 237, 308, 770, 880], "contigu": [55, 116, 121, 129, 130, 133, 135, 137, 141, 143, 146, 147, 148, 237, 267, 308], "relev": 55, "df_h1": 55, "l1": 55, "l2": 55, "df_h2": 55, "r1": 55, "r2": 55, "r3": 55, "df_d1": 55, "df_d2": 55, "df_a1": 55, "df_a2": 55, "df_a3": 55, "inner": [56, 72, 158, 215, 277, 308, 345, 356, 387, 500, 520, 530, 581, 677, 749, 770, 814, 836, 849, 876, 909, 920, 953, 1066, 1086, 1094, 1216, 1233, 1248, 1258], "polarsdatatyp": [56, 72, 129, 130, 143, 156, 157, 158, 159, 160, 163, 173, 219, 266, 271, 308, 368, 441, 529, 530, 582, 637, 718, 730, 731, 732, 742, 745, 761, 766, 770, 788, 876, 882, 930, 1094, 1118, 1167, 1233], "pythondatatyp": [56, 72], "within": [56, 72, 152, 153, 154, 155, 200, 201, 202, 216, 241, 278, 308, 460, 578, 620, 770, 810, 815, 832, 876, 1026, 1233, 1258], "attribut": [56, 59, 62, 63, 64, 65, 72, 76, 156, 308, 762, 763, 765, 766, 771, 772, 775, 777, 778, 779, 876, 1225, 1227, 1229, 1233, 1234, 1238, 1239, 1240], "categoricalord": 59, "encod": [59, 65, 75, 126, 129, 130, 143, 264, 308, 362, 453, 585, 627, 669, 770, 925, 1121, 1157, 1209, 1233], "lexic": [59, 882, 934], "calendar": [61, 62, 201, 216, 241, 278, 308, 393, 403, 405, 412, 416, 429, 433, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 716, 757, 758, 770, 810, 815, 832, 876, 959, 969, 974, 982, 986, 999, 1003, 1009, 1233], "bit": [61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 580, 624, 770, 1116, 1154, 1233, 1254], "sign": [61, 62, 64, 68, 69, 70, 71, 77, 412, 580, 643, 644, 667, 770, 882, 982, 1116, 1173, 1174, 1197, 1233, 1252], "dai": [61, 62, 77, 201, 214, 216, 241, 278, 308, 390, 409, 410, 412, 413, 416, 418, 421, 422, 429, 431, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 698, 710, 711, 712, 713, 714, 715, 716, 757, 758, 770, 810, 815, 832, 876, 882, 956, 979, 980, 982, 983, 986, 988, 991, 992, 999, 1001, 1009, 1233, 1255], "unix": [61, 62, 400, 722, 966], "epoch": [61, 62, 722, 1255], "1970": [61, 62, 149, 1241], "time_unit": [62, 64, 392, 394, 400, 420, 432, 660, 713, 714, 715, 716, 722, 882, 958, 960, 966, 990, 1002, 1190], "time_zon": [62, 395, 397, 415, 660, 713, 714, 715, 882, 957, 961, 965, 985, 1190], "timezon": [62, 133, 144, 397, 882, 1255], "m": [62, 64, 215, 308, 391, 392, 394, 399, 400, 418, 420, 421, 432, 631, 657, 659, 660, 664, 713, 714, 715, 716, 722, 814, 876, 882, 957, 958, 960, 965, 966, 988, 990, 991, 1002, 1161, 1187, 1189, 1190, 1194, 1245, 1254, 1255], "microsecond": [62, 64, 201, 213, 216, 241, 243, 244, 263, 278, 308, 412, 416, 424, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 713, 714, 715, 716, 756, 757, 758, 770, 810, 815, 828, 832, 876, 882, 982, 986, 994, 999, 1009, 1233, 1255], "zone": [62, 159, 160, 163, 391, 395, 415, 438, 660, 713, 714, 715, 770, 882, 957, 961, 985, 1009, 1190, 1233], "zoneinfo": [62, 882], "available_timezon": [62, 882], "progress": [63, 65], "expect": [63, 65, 97, 105, 113, 129, 131, 143, 521, 530, 730, 770, 817, 819, 876], "digit": [63, 572, 606, 607, 632, 770, 882, 1133, 1134, 1156, 1162, 1233, 1261], "offset": [64, 129, 130, 135, 137, 141, 143, 146, 147, 148, 195, 201, 241, 254, 284, 285, 308, 390, 391, 399, 409, 410, 412, 416, 429, 455, 497, 515, 587, 618, 647, 660, 770, 808, 810, 832, 840, 855, 856, 876, 956, 957, 965, 979, 980, 982, 986, 999, 1022, 1063, 1081, 1149, 1177, 1190, 1233, 1257], "integer_list": 72, "float_list": 72, "wrap": [74, 123, 368, 467, 529, 770, 930, 1233], "arbitrari": [74, 385, 770, 797, 876, 882], "schemadict": [76, 116, 118, 119, 120, 121, 122, 129, 131, 132, 134, 140, 141, 143, 148, 308, 752, 819, 864, 876], "composit": [76, 1261], "either": [76, 159, 211, 215, 216, 217, 232, 241, 242, 266, 267, 308, 438, 529, 573, 575, 582, 587, 657, 688, 696, 752, 770, 814, 815, 817, 832, 876, 880, 882, 1009, 1112, 1118, 1187, 1233, 1245, 1261], "map": [76, 118, 119, 129, 130, 131, 132, 135, 136, 141, 142, 143, 146, 159, 173, 176, 193, 213, 219, 238, 242, 243, 244, 246, 262, 308, 319, 416, 429, 529, 530, 551, 553, 554, 556, 558, 559, 582, 684, 731, 770, 788, 830, 833, 876, 881, 882, 951, 986, 999, 1094, 1118, 1222, 1233, 1242, 1244, 1245, 1258], "nanosecond": [77, 201, 216, 241, 278, 308, 412, 416, 417, 427, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 714, 715, 716, 757, 758, 770, 810, 815, 832, 876, 982, 986, 987, 997, 999, 1009, 1233, 1255], "midnight": 77, "unsign": [78, 79, 80, 81, 580, 770, 882, 1116, 1233], "static": [82, 864], "enable_string_cach": 84, "stringcach": [84, 85, 215, 308, 782, 932, 933], "reliabl": [84, 85], "wai": [84, 85, 116, 118, 119, 120, 122, 138, 139, 147, 200, 214, 233, 255, 287, 308, 568, 572, 620, 631, 703, 766, 770, 794, 800, 809, 827, 833, 841, 851, 857, 864, 876, 1161], "until": [84, 201, 217, 308, 641, 642, 667, 810, 876, 1171, 1172, 1197], "disable_string_cach": 85, "warn": [86, 87, 90, 91, 94, 101, 103, 104, 114, 568, 770, 1233], "issu": [86, 87, 90, 91, 94, 101, 103, 114, 129, 130, 131, 134, 143, 308, 380, 381, 673, 770, 947, 948, 1204, 1233, 1258], "remap": 86, "anoth": [86, 158, 173, 186, 200, 216, 308, 382, 392, 466, 496, 534, 538, 582, 590, 592, 594, 596, 598, 601, 603, 605, 634, 770, 788, 809, 854, 876, 949, 958, 1006, 1014, 1031, 1062, 1118, 1164, 1233, 1253, 1254], "dubiou": 87, "tempor": [87, 173, 201, 213, 241, 243, 244, 263, 308, 372, 467, 587, 590, 592, 594, 596, 598, 601, 603, 605, 770, 782, 788, 810, 832, 876, 882, 939, 1032, 1233, 1252, 1257], "built": 87, "modul": [87, 95, 134, 769, 882, 1261], "strftime": [87, 421, 991, 1255], "document": [87, 132, 134, 308, 311, 312, 418, 421, 638, 657, 659, 660, 664, 766, 933, 988, 991, 1168, 1187, 1189, 1190, 1194, 1233, 1237], "ufunc": 90, "numpi": [90, 120, 151, 178, 213, 243, 244, 263, 267, 268, 308, 529, 560, 561, 588, 770, 876, 1035, 1038, 1040, 1041, 1103, 1104, 1123, 1214, 1215, 1233], "would": [90, 129, 130, 143, 267, 271, 308, 333, 344, 390, 498, 529, 530, 539, 568, 578, 696, 698, 770, 897, 908, 956, 1064, 1114, 1214, 1233], "explicitli": [91, 132, 134, 157, 159, 168, 308, 752, 781, 1258], "usual": [91, 132, 271, 308, 391, 957], "abl": [91, 131], "confus": [91, 320, 474, 475, 645, 770], "about": [91, 131, 617, 624, 631, 632, 634, 643, 644, 770, 880, 1148, 1154, 1161, 1162, 1164, 1173, 1174, 1233, 1261], "silenc": 91, "unabl": [92, 134], "hstack": [92, 308], "is_in": [93, 192, 308, 770, 1233], "map_el": [94, 219, 308, 529, 687, 770, 1233], "instal": [95, 121, 129, 130, 132, 135, 137, 178, 268, 308, 390, 698, 839, 876, 956, 1215, 1233], "upgrad": 95, "least": [97, 569, 631, 633, 770, 1108, 1161, 1163, 1233, 1252], "bound": [98, 129, 130, 187, 201, 308, 344, 372, 467, 496, 498, 521, 527, 683, 693, 711, 712, 714, 715, 757, 758, 770, 810, 876, 908, 939, 1007, 1032, 1062, 1064, 1093, 1221, 1233, 1250], "unexpect": [99, 108, 131, 529, 530, 770, 1094, 1233], "caus": [99, 108, 117, 129, 130, 143, 152, 170, 189, 267, 308, 529, 770, 1014, 1214, 1233], "panic": 99, "potenti": [101, 103, 134, 143, 146, 147, 213, 242, 244, 308, 551, 794, 796, 800, 833, 851, 876, 880], "pitfal": 101, "slow": [103, 119, 122, 129, 130, 131, 134, 138, 140, 143, 147, 308, 382, 530, 588, 637, 770, 864, 876, 949, 1123, 1167, 1233], "map_": 103, "encount": [107, 129, 130, 143, 201, 308, 560, 561, 637, 638, 702, 706, 720, 770, 810, 876, 1103, 1104, 1167, 1168, 1233], "incompat": 110, "come": [111, 132, 201, 308, 390, 409, 410, 479, 521, 698, 770, 810, 875, 876, 956, 979, 980, 1047, 1233], "unsuit": 115, "arrai": [116, 120, 129, 130, 133, 141, 187, 188, 261, 266, 267, 268, 308, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 378, 379, 380, 381, 488, 503, 504, 505, 506, 508, 517, 518, 520, 523, 525, 529, 583, 589, 591, 593, 595, 597, 600, 602, 604, 610, 717, 749, 770, 802, 876, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 945, 946, 947, 948, 953, 1007, 1054, 1069, 1070, 1071, 1072, 1074, 1082, 1083, 1084, 1086, 1089, 1091, 1092, 1119, 1124, 1125, 1127, 1130, 1131, 1132, 1139, 1143, 1208, 1212, 1214, 1215, 1233, 1252, 1257, 1260], "chunkedarrai": [116, 229, 308], "recordbatch": [116, 214, 308, 749, 1242, 1244, 1258], "schemadefinit": [116, 118, 119, 120, 122, 138, 139, 147, 308, 876], "schema_overrid": [116, 118, 119, 120, 121, 122, 129, 130, 131, 132, 134, 138, 139, 140, 143, 214, 267, 308, 876, 882], "part": [116, 134, 266, 271, 308, 568, 632, 649, 650, 770, 801, 803, 828, 839, 854, 876, 1162, 1179, 1180, 1255], "closest": [116, 216, 308, 1253], "pair": [116, 118, 119, 120, 122, 138, 139, 147, 238, 308, 830, 876, 1261], "declar": [116, 118, 119, 120, 122, 131, 138, 139, 147, 266, 271, 308, 876, 882, 1241], "sever": [116, 118, 119, 120, 122, 138, 139, 147, 308, 876, 1261], "form": [116, 118, 119, 120, 122, 138, 139, 147, 213, 243, 276, 308, 569, 770, 876, 1108, 1233], "dimens": [116, 118, 120, 122, 138, 139, 147, 308, 583, 770, 876, 1119, 1214, 1233], "supportsinterchang": 117, "allow_copi": [117, 170, 267, 308, 1214, 1233], "interchang": [117, 170], "__dataframe__": 117, "convers": [117, 134, 170, 213, 214, 243, 244, 263, 267, 268, 308, 395, 657, 659, 660, 664, 782, 961, 1025, 1187, 1189, 1190, 1194, 1214, 1215, 1233, 1258], "latest": [117, 133, 144, 170, 415, 452, 540, 657, 660, 713, 770, 985, 1187, 1190], "from_panda": 117, "from_arrow": 117, "effici": [117, 131, 134, 212, 214, 308, 529, 770], "through": [117, 131, 766, 882, 1233, 1247], "pd": [117, 121, 677, 749, 770, 1215, 1216, 1233, 1242, 1258], "df_pd": 117, "dfi": [117, 170], "strict": [118, 119, 122, 126, 173, 182, 308, 362, 368, 624, 627, 634, 657, 659, 660, 662, 664, 770, 788, 798, 876, 882, 925, 930, 1154, 1157, 1164, 1187, 1189, 1190, 1192, 1194, 1233], "clone": [118, 119, 120, 121, 122, 174, 267, 308, 789, 876, 938, 1233], "dimension": [118, 120, 122, 267, 308, 876, 1233], "exactli": [118, 119, 122, 152, 153, 154, 155, 158, 159, 163, 308, 649, 650, 655, 656, 716, 876, 1143, 1179, 1180, 1185, 1186, 1233], "infer_schema_length": [119, 122, 126, 129, 130, 131, 134, 138, 140, 143, 147, 308, 637, 876, 1167], "NOT": [119, 212, 250, 308, 521, 538, 610, 770, 837, 876, 1258], "typic": [119, 131, 134, 148, 219, 308, 399, 882, 965, 1094, 1233], "clearer": 119, "partial": [119, 129, 143, 308, 876], "scan": [119, 122, 129, 130, 131, 134, 138, 140, 143, 144, 145, 146, 147, 148, 149, 308, 637, 803, 811, 818, 876, 1167], "present": [119, 159, 471, 653, 654, 770, 803, 839, 876], "np": [120, 192, 267, 308, 454, 609, 770, 806, 876, 1021, 1035, 1038, 1040, 1041, 1136, 1137, 1233], "ndarrai": [120, 192, 267, 308, 454, 609, 770, 806, 876, 1021, 1136, 1137, 1214, 1233], "slower": [120, 122, 134, 200, 219, 232, 278, 294, 308, 530, 732, 770, 809, 864, 876, 1094, 1233], "columnar": [120, 122, 213, 243, 308], "interpret": [120, 122, 129, 130, 143, 308, 876], "yield": [120, 122, 129, 130, 131, 143, 187, 189, 212, 273, 308, 451, 529, 568, 770, 876, 1007, 1014, 1233], "conclus": [120, 122, 308, 876], "datetimeindex": 121, "nan_to_nul": [121, 308, 876, 1233], "include_index": 121, "nan": [121, 159, 170, 190, 267, 268, 308, 388, 389, 435, 436, 445, 456, 458, 465, 474, 475, 476, 477, 481, 528, 531, 546, 560, 561, 562, 563, 588, 680, 702, 770, 804, 876, 890, 894, 954, 955, 1016, 1040, 1041, 1103, 1104, 1123, 1214, 1215, 1233, 1261], "nameless": 121, "enumer": [121, 129, 130, 143, 214, 308], "regardless": [121, 172, 200, 216, 272, 308, 367, 395, 638, 679, 760, 770, 786, 846, 876, 961, 1168], "pleas": [121, 131, 132, 201, 308, 311, 312, 438, 703, 716, 770, 810, 876, 1009, 1233, 1237], "reset_index": [121, 201, 308, 810, 876], "prior": 121, "pd_df": 121, "pd_seri": 121, "its": [123, 151, 187, 267, 308, 394, 416, 429, 438, 585, 620, 760, 770, 794, 800, 851, 876, 933, 960, 986, 999, 1007, 1009, 1121, 1214, 1233, 1260], "repr": 123, "trim": [123, 1254], "whitespac": [123, 652, 653, 654, 1182, 1183, 1184, 1254], "prompt": 123, "extract": [123, 256, 308, 393, 396, 398, 401, 403, 404, 405, 406, 407, 408, 411, 413, 414, 417, 419, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 572, 632, 633, 637, 638, 647, 649, 770, 959, 962, 963, 964, 967, 969, 973, 974, 975, 977, 978, 981, 983, 984, 987, 989, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1003, 1162, 1163, 1167, 1168, 1177, 1252], "to_init_repr": [123, 308, 1233], "truncat": [123, 129, 130, 143, 199, 201, 213, 243, 244, 263, 308, 810, 828, 876, 1257], "identifi": [123, 131, 225, 232, 274, 286, 308, 823, 847, 876], "compound": [123, 244, 308, 882], "neither": [123, 134, 140, 245, 308, 357, 521, 921, 1087], "source_ac": 123, "source_cha": 123, "ident": [123, 174, 175, 308, 418, 585, 586, 770, 789, 790, 876, 938, 940, 988, 1121, 1122, 1233], "timestamp": [123, 133, 144, 201, 308, 415, 416, 429, 722, 810, 876, 985, 986, 999], "tor_id": 123, "nnel_id": 123, "\u03bc": [123, 173, 201, 213, 241, 243, 244, 263, 278, 308, 391, 392, 394, 395, 396, 397, 399, 401, 404, 406, 407, 409, 410, 411, 412, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 587, 590, 592, 594, 596, 598, 601, 603, 605, 657, 660, 713, 714, 715, 716, 722, 770, 788, 810, 815, 832, 876, 882, 957, 958, 960, 961, 962, 963, 965, 966, 967, 972, 973, 977, 979, 980, 981, 982, 985, 986, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1187, 1190], "asia": [123, 882, 962, 963, 989], "tokyo": [123, 882], "123456780": 123, "9876543210": 123, "56": [123, 675, 770], "59": [123, 180, 308, 394, 407, 417, 451, 713, 756, 757, 758, 770, 796, 876, 882, 960, 977, 987], "663053": 123, "jst": [123, 882], "803065983": 123, "2055938745": 123, "38": [123, 156, 159], "050545": 123, "source_actor_id": 123, "source_channel_id": 123, "to_list": [123, 241, 308, 1154, 1164, 1233], "uint32": [124, 151, 173, 187, 241, 285, 308, 333, 338, 339, 376, 438, 454, 457, 482, 486, 487, 502, 581, 585, 586, 587, 626, 639, 640, 677, 703, 726, 729, 770, 788, 832, 856, 876, 882, 898, 902, 903, 930, 1007, 1009, 1052, 1053, 1068, 1121, 1122, 1156, 1169, 1170, 1216, 1217, 1233], "regular": [124, 213, 242, 243, 278, 285, 308, 441, 624, 626, 631, 632, 633, 634, 643, 644, 698, 718, 766, 770, 856, 876, 882, 1154, 1156, 1161, 1162, 1163, 1164, 1173, 1174], "uint64": [124, 202, 241, 285, 308, 338, 339, 438, 460, 486, 487, 580, 587, 770, 832, 856, 876, 882, 902, 903, 1009, 1026, 1052, 1053, 1116, 1217, 1233], "bigidx": 124, "over": [125, 129, 130, 131, 133, 134, 143, 159, 160, 172, 189, 212, 213, 214, 219, 242, 243, 244, 256, 272, 273, 286, 294, 308, 312, 366, 367, 382, 385, 438, 446, 529, 530, 539, 541, 542, 543, 544, 552, 553, 578, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 678, 679, 706, 707, 720, 731, 732, 744, 749, 770, 786, 842, 846, 864, 876, 882, 929, 949, 1009, 1014, 1094, 1124, 1125, 1127, 1131, 1218, 1233, 1258], "fetch": [125, 143, 217, 308, 791, 811, 818, 876], "ideal": 125, "read_csv_batch": 125, "tpch": [125, 130], "tables_scale_100": [125, 130], "lineitem": [125, 130, 132], "tbl": [125, 130, 1260], "try_parse_d": [125, 129, 130, 143], "max_level": 126, "semi": [126, 215, 308, 814, 876, 1248], "deseri": [126, 308, 453, 542, 770, 836, 876], "flat": [126, 244, 308, 494, 583, 770, 1060, 1119, 1233], "unnest": [126, 308, 383, 575, 585, 632, 633, 649, 650, 670, 671, 684, 770, 876, 921, 950, 1087, 1112, 1121, 1179, 1180, 1233, 1252, 1257], "unlik": [126, 201, 308, 810, 876], "counterpart": 126, "sep": 126, "depth": 126, "constructor": [126, 134, 163], "consider": 126, "cole": 126, "volk": 126, "fit": [126, 213, 253, 276, 308, 612, 745, 770, 1142, 1143, 1233], "130": 126, "weight": [126, 437, 438, 439, 440, 588, 589, 591, 593, 595, 597, 600, 602, 604, 617, 770, 1008, 1009, 1010, 1011, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1148, 1233], "mark": [126, 368, 770, 930, 1233], "reg": 126, "fay": 126, "raker": 126, "n_row": [127, 129, 130, 135, 137, 141, 143, 146, 147, 148, 214, 308, 803, 876], "handler": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 308, 385, 770, 797, 876], "builtin": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 181, 308, 385, 770, 797, 876], "instanc": [127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 159, 163, 168, 173, 189, 194, 308, 540, 706, 720, 766, 788, 819, 855, 856, 876, 1014, 1233], "accept": [127, 129, 130, 133, 135, 137, 141, 159, 172, 182, 200, 247, 248, 252, 255, 272, 282, 283, 287, 308, 317, 367, 372, 441, 467, 568, 582, 620, 671, 679, 687, 689, 691, 696, 699, 700, 701, 709, 718, 734, 736, 739, 748, 752, 754, 760, 766, 770, 786, 798, 809, 834, 835, 838, 841, 846, 852, 853, 857, 876, 880, 881, 939, 1032, 1118, 1141, 1233], "stop": [127, 129, 130, 135, 137, 141, 143, 146, 147, 148, 590, 592, 594, 596, 598, 601, 603, 605, 770, 958, 961, 966, 967, 973, 975, 977, 981, 986, 990], "text": [128, 131, 438, 635, 639, 640, 643, 644, 646, 647, 658, 750, 770, 1009, 1165, 1169, 1170, 1176, 1177, 1188, 1233, 1247, 1261], "read_csv": [128, 134, 143], "write_clipboard": [128, 308], "has_head": [129, 130, 134, 143], "new_column": [129, 130, 134, 143], "comment_prefix": [129, 130, 143], "skip_row": [129, 130, 143], "missing_utf8_is_empty_str": [129, 130, 143], "ignore_error": [129, 130, 139, 143, 147], "n_thread": [129, 130], "8192": 129, "csvencod": [129, 130, 143], "low_memori": [129, 130, 141, 143, 147, 148], "skip_rows_after_head": [129, 130, 143], "row_index_nam": [129, 130, 135, 137, 141, 143, 146, 147, 148], "row_index_offset": [129, 130, 135, 137, 141, 143, 146, 147, 148], "sample_s": [129, 130], "eol_char": [129, 130, 143], "raise_if_empti": [129, 130, 134, 140, 143], "truncate_ragged_lin": [129, 130, 143], "decimal_comma": [129, 130, 143], "glob": [129, 130, 141, 143, 146, 147, 148], "fsspec": [129, 130, 135, 137, 141, 143, 144, 145, 146, 151], "remot": [129, 130, 135, 137], "autogener": [129, 130, 143], "column_x": [129, 130, 143], "shorter": [129, 130, 143, 521, 726, 727], "remain": [129, 130, 143, 184, 187, 192, 234, 308, 388, 389, 447, 492, 582, 649, 650, 770, 799, 806, 819, 876, 954, 955, 1007, 1018, 1058, 1118, 1179, 1180, 1233, 1247], "comment": [129, 130, 143], "skip": [129, 130, 134, 141, 143, 148, 216, 276, 308, 1094, 1233, 1248], "escap": [129, 130, 132, 143], "complet": [129, 131, 143, 1259], "wherea": [129, 143, 241, 308, 416, 429, 560, 561, 587, 770, 811, 818, 832, 876, 986, 999, 1103, 1104, 1233], "prefer": [129, 130, 133, 134, 143, 164, 172, 189, 213, 219, 242, 243, 272, 294, 308, 366, 367, 441, 530, 678, 679, 770, 786, 846, 876, 929, 1014, 1094, 1218, 1233, 1242, 1261], "treat": [129, 130, 143, 438, 624, 626, 634, 643, 644, 760, 770, 1009, 1154, 1156, 1164, 1173, 1174, 1233], "10000": [129, 214, 308], "iso8601": [129, 130, 143], "succe": [129, 130, 143], "cpu": [129, 130, 266, 308, 1212, 1233], "buffer": [129, 130, 131, 187, 213, 308, 1007, 1233], "onc": [129, 130, 165, 219, 243, 245, 287, 308, 509, 529, 530, 608, 655, 656, 770, 787, 857, 876, 1075, 1094, 1135, 1185, 1186, 1233, 1245], "modifi": [129, 130, 143, 165, 168, 189, 205, 212, 213, 280, 308, 334, 415, 432, 624, 631, 632, 634, 643, 644, 770, 888, 985, 1002, 1014, 1154, 1161, 1162, 1164, 1173, 1174, 1193, 1195, 1196, 1233], "upper": [129, 130, 131, 187, 201, 308, 372, 462, 467, 521, 553, 683, 693, 711, 712, 714, 715, 757, 758, 770, 810, 876, 939, 1007, 1028, 1032, 1093, 1221, 1233, 1250, 1252], "lossi": [129, 130, 143], "decod": [129, 130, 637], "expens": [129, 130, 141, 143, 147, 148, 162, 164, 213, 219, 242, 243, 244, 273, 274, 308, 530, 770, 794, 796, 800, 833, 847, 851, 876, 1014, 1094, 1233, 1261], "aggreg": [129, 130, 133, 141, 194, 200, 201, 220, 222, 224, 227, 230, 234, 235, 236, 241, 257, 258, 276, 279, 287, 288, 290, 292, 308, 318, 447, 463, 529, 530, 568, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 688, 689, 690, 691, 706, 707, 708, 709, 720, 725, 733, 734, 736, 738, 739, 744, 753, 754, 770, 810, 819, 820, 821, 822, 825, 826, 829, 832, 843, 844, 850, 857, 858, 860, 862, 876, 880, 1029, 1123, 1124, 1125, 1127, 1130, 1131, 1132, 1233, 1248, 1250, 1252, 1257], "parser": 129, "regard": [129, 702], "sens": [129, 135, 137, 146, 226, 278, 308, 568, 770, 824, 876], "particular": [129, 135, 137, 146, 172, 187, 272, 308, 366, 367, 678, 679, 770, 786, 846, 876, 929, 1007, 1218, 1233], "usernam": [129, 132, 135, 137, 146], "password": [129, 132, 135, 137, 146], "sampl": [129, 130, 294, 308, 617, 770, 864, 1148, 1233], "estim": [129, 130, 171, 187, 308, 324, 439, 440, 479, 692, 770, 785, 876, 1007, 1010, 1011, 1047, 1233], "alloc": [129, 130, 187, 237, 308, 770, 880, 1007, 1233], "window": [129, 130, 143, 201, 241, 308, 382, 437, 439, 440, 530, 542, 568, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 700, 746, 747, 770, 810, 832, 876, 949, 1008, 1010, 1011, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1233], "rn": [129, 130, 143], "r": [129, 130, 143, 308, 572, 626, 630, 631, 632, 633, 643, 644, 770, 882, 1156, 1160, 1161, 1162, 1163, 1173, 1174, 1188, 1245, 1254], "nodataerror": [129, 130, 134, 140, 143], "longer": [129, 130, 143], "period": [129, 130, 143, 201, 241, 308, 416, 429, 437, 439, 440, 569, 587, 711, 712, 714, 715, 757, 758, 770, 810, 832, 876, 986, 999, 1008, 1010, 1011, 1108, 1233], "expand": [129, 141, 143, 148, 443, 535, 537, 581, 770, 880, 882, 1013, 1233], "rule": [129, 141, 143, 148, 194, 308, 625, 645, 660, 1155, 1175, 1190], "lazili": [129, 130, 143, 144, 145, 146, 147, 148, 792, 876], "incorrectli": [129, 521], "continu": [129, 383, 575, 617, 770, 950, 1112, 1148, 1233], "benchmark": 129, "demonstr": [129, 451, 770, 882], "birthdai": 129, "alic": [129, 1259], "1995": 129, "bob": [129, 226, 308, 824, 876, 1259], "1990": [129, 1241], "charli": [129, 1259], "2002": [129, 402, 412, 968, 982, 1003], "08": [129, 152, 153, 154, 155, 180, 216, 241, 256, 308, 390, 394, 409, 410, 416, 587, 657, 714, 716, 770, 796, 832, 876, 882, 956, 986, 999, 1187, 1255], "50000": 130, "batchedcsvread": 130, "upon": 130, "creation": 130, "gather": [130, 195, 308, 333, 455, 497, 696, 770, 808, 876, 897, 1022, 1063, 1233], "done": [130, 149, 168, 171, 173, 216, 308, 323, 324, 568, 770, 785, 788, 815, 876], "next_batch": 130, "big": 130, "interest": [130, 418, 421, 988, 991], "seen_group": 130, "big_fil": 130, "df_current_batch": 130, "partition_df": 130, "partition_bi": [130, 214, 308, 542, 568, 770], "as_dict": [130, 232, 308], "fh": 130, "els": [130, 760], "iter_batch": 131, "execute_opt": [131, 132], "client": 131, "packag": [131, 308, 312, 390, 698, 880, 956], "establish": 131, "async": [131, 792, 876], "aris": 131, "happen": [131, 395, 575, 770, 961, 1112, 1233], "report": 131, "resultset": 131, "manner": 131, "veri": [131, 213, 273, 308, 530, 770, 864, 1253], "poor": 131, "mani": [131, 132, 189, 308, 645, 1014, 1175, 1233], "trip": 131, "still": [131, 132], "exact": [131, 157, 159, 163, 216, 253, 308, 324, 451, 630, 655, 656, 657, 659, 660, 680, 770, 1160, 1187, 1189, 1190], "incom": 131, "read_arrow_batches_from_odbc": 131, "read_database_uri": 131, "wide": [131, 199, 225, 276, 308, 823, 876], "snowflak": [131, 132], "variou": [131, 176, 308, 770, 793, 876, 881, 882, 1233], "facil": 131, "initialis": [131, 168, 876], "flight": 131, "flightsql": 131, "flight_sql": 131, "notabl": 131, "dremio": 131, "influxdb": 131, "notic": [131, 308, 876, 1233], "dbapi2": 131, "connectorx": [131, 132, 151], "optimis": [131, 219, 244, 294, 308, 876, 1094, 1138, 1233, 1261], "translat": 131, "conn": 131, "url": [131, 132, 141, 148, 631, 633, 1161, 1163], "render_as_str": 131, "hide_password": 131, "relat": [131, 168, 643, 644, 882, 1173, 1174, 1248], "k\u00f9zudb": 131, "cypher": 131, "surrealql": 131, "surrealdb": 131, "test_data": 131, "user_conn": 131, "normalised_scor": 131, "uint8": [131, 173, 265, 266, 267, 276, 308, 380, 381, 582, 673, 687, 770, 788, 876, 882, 947, 948, 1118, 1204, 1217, 1233, 1261], "parameteris": 131, "metric": 131, "alchemy_conn": 131, "qmark": 131, "variad": 131, "1000": [131, 187, 265, 285, 308, 324, 770, 856, 876, 994, 1091, 1211, 1233, 1261], "localhost": 131, "5432": 131, "uid": 131, "usr": 131, "pwd": 131, "max_text_s": 131, "max_binary_s": 131, "do_someth": 131, "kuzu_db_conn": 131, "session": 131, "ext": 131, "create_async_engin": 131, "async_engin": 131, "aiosqlit": 131, "surreal": 131, "surrealhttp": 131, "surreal_query_to_fram": 131, "8000": 131, "rpc": 131, "partition_on": 132, "partition_rang": 132, "partition_num": 132, "dbreadengin": 132, "raw": 132, "warehous": 132, "role": 132, "caller": [132, 226, 308, 521, 819, 824, 864, 876], "respons": [132, 226, 308, 824, 876], "often": [132, 168, 201, 241, 308, 341, 490, 581, 587, 770, 810, 832, 876, 905, 1056, 1247, 1258], "transfer": 132, "redshift": 132, "mysql": 132, "mariadb": 132, "clickhous": 132, "oracl": 132, "bigqueri": 132, "github": [132, 308], "sfu": 132, "connector": 132, "destin": 132, "develop": [132, 159, 163], "read_databas": 132, "urllib": 132, "quote_plu": 132, "word": [132, 643, 644, 653, 654], "3f": [132, 657, 660, 1187, 1190], "20word": 132, "test_tabl": 132, "compani": 132, "testdb": 132, "public": [132, 308, 770, 782, 876, 1233, 1257], "myrol": 132, "delta_table_opt": [133, 144], "root": [133, 144, 370, 541, 551, 552, 554, 556, 558, 559, 621, 769, 770, 935, 1151, 1233, 1253], "absolut": [133, 144, 145, 152, 153, 154, 155, 316, 437, 439, 440, 770, 884, 1008, 1010, 1011, 1233, 1253], "info": [133, 144, 145, 151, 308, 311, 1233, 1237], "avoid": [133, 159, 163, 243, 308, 319, 770], "year": [133, 144, 201, 216, 241, 256, 278, 308, 390, 402, 403, 412, 413, 416, 429, 430, 587, 590, 592, 594, 596, 598, 601, 603, 605, 698, 710, 711, 712, 713, 714, 715, 757, 758, 770, 810, 815, 832, 876, 882, 956, 968, 969, 982, 983, 986, 999, 1000, 1255], "2021": [133, 144, 173, 180, 199, 201, 278, 308, 657, 730, 788, 796, 810, 876, 882, 962, 963, 969, 989, 1187], "travel": [133, 144], "2020": [133, 144, 173, 180, 199, 216, 241, 308, 311, 390, 395, 399, 415, 418, 421, 422, 423, 424, 425, 426, 427, 428, 438, 587, 657, 659, 660, 698, 770, 788, 796, 832, 876, 882, 956, 961, 965, 985, 988, 991, 992, 993, 994, 995, 996, 997, 998, 1009, 1187, 1189, 1190, 1233], "tzinfo": [133, 144, 882], "utc": [133, 144, 391, 395, 397, 399, 415, 657, 660, 882, 957, 961, 965, 985, 1187, 1190], "aw": [133, 141, 143, 144, 148], "googl": [133, 144, 145], "service_account": [133, 144], "service_account_json_absolute_path": [133, 144], "az": [133, 144, 145], "adl": [133, 144, 145], "abf": [133, 144, 145], "azure_storage_account_nam": [133, 144, 145], "azure_storage_account_kei": [133, 144, 145], "without_fil": [133, 144, 145], "track": [133, 144, 145, 219, 308, 521, 1258], "sheet_id": [134, 140], "sheet_nam": [134, 140], "excelspreadsheetengin": 134, "read_opt": 134, "calamin": 134, "fastexcel": [134, 151], "xlsb": 134, "xl": 134, "19": [134, 159, 216, 241, 308, 393, 416, 587, 592, 594, 596, 598, 661, 770, 815, 832, 876, 959, 986, 999, 1191], "openpyxl": [134, 151], "sheetnam": [134, 140], "nor": [134, 140, 245, 308], "xlsx2csv": [134, 151], "refin": 134, "major": [134, 266, 308], "dramat": 134, "bind": 134, "significantli": [134, 219, 294, 308, 1094, 1233, 1261], "primari": [134, 1258, 1261], "load_workbook": 134, "excelread": 134, "load_sheet_by_nam": 134, "influenc": [134, 803, 819, 876], "pipelin": [134, 271, 308], "becom": [134, 161], "skip_empty_lin": 134, "correct": [134, 140, 439, 440, 479, 599, 617, 770, 819, 876, 880, 1010, 1011, 1047, 1129, 1148, 1233], "forc": [134, 216, 219, 267, 294, 308, 521, 814, 815, 864, 876, 1094, 1214, 1233], "best": [134, 219, 294, 308, 530, 770, 1094, 1233], "known": [134, 135, 357, 521, 864, 921, 1087], "ambigu": [134, 415, 416, 429, 657, 660, 713, 985, 986, 999, 1187, 1190], "memory_map": [135, 141, 146], "greatli": [135, 146], "repeat": [135, 146, 579, 581, 742, 761, 770], "o": [135, 146, 366, 367, 382, 630, 678, 679, 770, 929, 949, 1160, 1182, 1218, 1233, 1245], "That": [135, 819, 876], "filenam": 135, "my_fil": 135, "write_ipc": [135, 308], "read_ndjson": 138, "stringio": [138, 139, 181, 308, 385, 453, 542, 770, 797, 836, 876], "With": [138, 211, 252, 308, 352, 514, 611, 770, 838, 876, 916, 1046, 1080, 1141, 1233], "becaus": [139, 147, 187, 201, 217, 219, 276, 294, 308, 451, 493, 770, 810, 864, 876, 1007, 1059, 1094, 1233], "openoffic": 140, "od": [140, 782], "parallelstrategi": [141, 148], "use_statist": [141, 148], "hive_partit": [141, 148], "hive_schema": [141, 148], "retri": [141, 143, 146, 148], "row_group": [141, 148], "hive": [141, 148], "prune": [141, 148, 819, 876], "gcp": [141, 143, 145, 148], "stabl": [141, 178, 180, 202, 245, 256, 308, 460, 526, 770, 796, 823, 841, 842, 876, 1026, 1233], "read_tabl": 141, "scan_parquet": [141, 149], "scan_pyarrow_dataset": [141, 148], "with_column_nam": 143, "file_cache_ttl": [143, 146], "push": [143, 146, 147, 148, 149], "down": [143, 146, 147, 148, 149, 450, 770, 1020, 1233], "therebi": [143, 146, 147], "realloc": [143, 146, 147, 189, 308, 1014, 1233], "headerless": 143, "download": [143, 146, 839, 876], "polars_file_cache_ttl": [143, 146], "hour": [143, 146, 201, 216, 241, 278, 308, 404, 406, 407, 411, 412, 416, 417, 423, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 713, 714, 715, 716, 756, 757, 758, 770, 810, 815, 832, 876, 882, 982, 986, 993, 999, 1009, 1233, 1255], "my_long_fil": 143, "thing": [143, 150], "less": [143, 216, 308, 451, 481, 528, 529, 650, 770, 815, 876, 1180, 1261], "breezah": 143, "languag": [143, 201, 216, 241, 278, 308, 412, 416, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 757, 758, 770, 810, 815, 832, 876, 982, 986, 999, 1009, 1233], "hard": [143, 819, 876], "mydf": 143, "lambda": [143, 194, 219, 233, 234, 238, 294, 308, 357, 437, 438, 439, 440, 521, 529, 530, 552, 553, 706, 707, 720, 731, 732, 744, 770, 819, 827, 830, 864, 876, 921, 1008, 1009, 1010, 1011, 1087, 1094, 1233], "lower": [143, 180, 201, 236, 300, 308, 372, 467, 527, 552, 576, 580, 597, 598, 693, 711, 712, 714, 715, 743, 757, 758, 770, 796, 810, 829, 870, 876, 939, 951, 1032, 1093, 1113, 1116, 1128, 1221, 1233, 1250, 1252], "simpli": [143, 706, 720], "idx": [143, 201, 214, 285, 308, 344, 357, 521, 810, 856, 876, 921, 1087, 1164], "uint16": [143, 380, 381, 673, 770, 882, 947, 948, 1204, 1214, 1217, 1233], "u16": [143, 1261], "eu": [144, 145], "central": [144, 145, 479, 617, 770, 1047, 1148, 1233], "iceberg": [145, 782], "pyiceberg": [145, 151], "secret": [145, 148], "adlf": 145, "my": [145, 149, 665, 1195], "oauth": 145, "token": 145, "ya29": 145, "dr": 145, "afm": 145, "py": 145, "impl": 145, "fsspecfileio": 145, "give": [146, 147, 216, 225, 274, 308, 400, 451, 479, 581, 680, 684, 770, 782, 823, 847, 876, 966, 1047, 1222, 1233, 1257], "read_parquet": 148, "east": 148, "allow_pyarrow_filt": 149, "comparison": 149, "dset": 149, "folder": 149, "04": [149, 173, 180, 201, 278, 308, 394, 395, 409, 410, 415, 416, 418, 421, 422, 423, 426, 428, 432, 590, 592, 594, 596, 598, 601, 603, 605, 657, 698, 710, 713, 714, 716, 770, 788, 796, 810, 876, 882, 961, 973, 977, 979, 980, 981, 985, 988, 991, 992, 993, 996, 998, 1002, 1187], "seed": [150, 202, 245, 308, 460, 509, 578, 608, 613, 770, 1026, 1075, 1114, 1135, 1144, 1233], "shuffl": [150, 245, 271, 294, 308, 509, 608, 770, 864, 1075, 1135, 1233], "platform": 151, "maco": 151, "arm64": 151, "arm": 151, "64bit": [151, 580, 770, 1116, 1233], "main": [151, 792, 876], "feb": 151, "2024": [151, 390, 396, 397, 401, 404, 406, 407, 411, 417, 419, 698, 710, 713, 716, 882, 956, 1255], "21": [151, 180, 226, 258, 308, 393, 590, 592, 594, 596, 598, 601, 603, 605, 713, 722, 770, 796, 824, 876, 882, 959, 1249], "clang": 151, "1500": [151, 162], "adbc_driver_manag": 151, "cloudpickl": 151, "17": [151, 159, 187, 216, 287, 308, 438, 588, 606, 722, 757, 770, 857, 941, 943, 986, 1009, 1123, 1233, 1261], "hvplot": [151, 308, 311, 1233, 1237], "matplotlib": [151, 828, 839, 876], "nest_asyncio": 151, "pydant": 151, "torch": [151, 271, 308, 1217, 1233], "check_row_ord": [152, 153], "check_column_ord": [152, 153], "check_dtyp": [152, 153, 154, 155, 1006, 1233], "check_exact": [152, 153, 154, 155], "rtol": [152, 153, 154, 155], "atol": [152, 153, 154, 155], "categorical_as_str": [152, 153, 154, 155], "assert": [152, 153, 154, 155, 159, 163, 241, 308, 782, 882], "assertionerror": [152, 153, 154, 155], "compar": [152, 153, 154, 155, 186, 308, 435, 436, 456, 458, 467, 481, 528, 562, 563, 770, 933, 1006, 1233], "toler": [152, 153, 154, 155, 216, 308, 815, 876], "inexact": [152, 153, 154, 155], "share": [152, 153, 154, 155, 187, 308, 1007, 1233], "assert_series_equ": [152, 155, 1006, 1233, 1261], "assert_frame_not_equ": [152, 155], "pytest": [152, 154], "worthwhil": [152, 154], "shorten": [152, 154], "traceback": [152, 153, 154, 155, 267, 308, 1214, 1233], "tb": [152, 154, 187, 308, 1007, 1233], "short": [152, 154], "tend": [152, 154], "unhelpfulli": [152, 154], "recent": [152, 153, 154, 155, 267, 308, 569, 770, 1108, 1214, 1233, 1244, 1258], "assert_frame_equ": [153, 154, 186, 308, 1261], "assert_series_not_equ": [153, 154], "check_nam": [154, 155, 1006, 1233], "check_ord": [154, 155], "searchstrategi": [156, 158, 159, 160, 161, 163], "allow_nul": [156, 159, 163, 1261], "null_prob": [156, 159, 163], "percentag": [156, 159, 163, 569, 770, 1108, 1233], "chanc": [156, 159, 163, 1261], "1755e": [156, 159], "575050513": [156, 159], "inf": [156, 159, 163, 330, 383, 462, 469, 472, 575, 680, 770, 894, 943, 950, 1028, 1035, 1038, 1093, 1108, 1112, 1221, 1233, 1256], "min_col": [157, 159], "max_col": [157, 159], "comprehens": 157, "standalon": [157, 882], "itself": [157, 308, 311, 312, 530, 589, 591, 593, 595, 597, 599, 600, 602, 604, 746, 747, 770, 817, 876, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1233, 1237, 1241, 1242, 1258], "mincol": 157, "assign": [157, 201, 293, 308, 357, 521, 568, 578, 649, 650, 770, 810, 863, 876, 921, 1087, 1114, 1179, 1180, 1233], "especi": [157, 586, 770, 803, 876, 1122, 1233], "hypothesi": [157, 159, 162, 163, 1261], "test_unique_xyz": 157, "assert_someth": 157, "inner_dtyp": [158, 161], "select_from": [158, 161, 163], "min_siz": [158, 159, 161, 163, 1261], "max_siz": [158, 159, 161, 163, 1261], "randomli": 158, "innermost": [158, 161], "2x": 158, "lst": 158, "11330": 158, "24030": 158, "116": 158, "include_col": 159, "allow_chunk": [159, 163], "allowed_dtyp": [159, 160, 163, 1261], "excluded_dtyp": [159, 160, 163], "allow_time_zon": [159, 160, 163], "describ": [159, 199, 308, 876, 1233], "desir": [159, 357, 432, 521, 921, 1002, 1087], "onto": 159, "exclud": [159, 163, 201, 308, 367, 378, 381, 390, 467, 536, 679, 698, 766, 770, 810, 876, 882, 956, 1032, 1233], "pct": 159, "preced": [159, 882], "allow_infin": [159, 163], "disallow": 159, "usag": [159, 163, 253, 308, 882, 1143, 1233], "deploi": [159, 163], "characterist": [159, 163], "concret": [159, 163], "test_df_height": 159, "interact": [159, 163, 180, 308, 796, 876], "col0": [159, 1261], "col1": [159, 234, 308, 876, 1261], "col2": [159, 234, 308, 876, 1261], "1844": 159, "06": [159, 173, 278, 308, 390, 394, 408, 414, 415, 416, 417, 429, 430, 710, 713, 788, 876, 882, 956, 985, 986, 999], "848808": 159, "1436e16": 159, "9914e218": 159, "2068": 159, "412277": 159, "7415e16": 159, "2095": 159, "647961": 159, "15836": 159, "nesting_level": 160, "pick": [160, 760], "prioriti": 160, "complex": [160, 366, 367, 382, 678, 679, 770, 929, 949, 1218, 1233], "fulli": [161, 233, 245, 267, 308], "profil": [162, 164, 791, 876], "balanc": [162, 164, 1261], "set_environ": 162, "polars_hypothesis_profil": [162, 164], "max_data_s": 163, "test_series_len": 163, "zz": [163, 180, 256, 308, 796, 876, 1248, 1254, 1260], "polars_max_thread": 165, "behind": 165, "lock": 165, "reason": [165, 180, 308, 521, 529, 770, 796, 876], "temporarili": [165, 168, 201, 241, 308, 587, 770, 810, 832, 876], "pyspark": 165, "udf": [165, 219, 233, 294, 308, 385, 530, 572, 732, 770, 797, 827, 864, 876, 1094, 1233], "recommend": [165, 180, 213, 233, 308, 787, 796, 876, 882], "thread_pool_s": 166, "easi": 168, "restor": 168, "restore_default": 168, "set_tbl_row": 168, "scope": [168, 781, 882, 1244, 1247, 1258], "lifetim": [168, 781, 1247], "whatev": 168, "were": [168, 582, 766, 770, 1118, 1233], "enter": 168, "advantag": [168, 233, 308], "set_": 168, "set_verbos": 168, "do_various_th": 168, "cleaner": 168, "init": [168, 1241], "breviti": 168, "vein": 168, "durat": [168, 216, 278, 308, 391, 399, 422, 423, 424, 425, 426, 427, 428, 432, 438, 677, 711, 712, 714, 715, 757, 758, 770, 815, 876, 882, 957, 965, 992, 993, 994, 995, 996, 997, 998, 1002, 1009, 1214, 1216, 1233], "set_ascii_t": 168, "write_ascii_frame_to_stdout": 168, "sy": 168, "stdout": [168, 199, 308, 543], "nan_as_nul": 170, "polarsdatafram": 170, "notimplementederror": 170, "num_row": 170, "get_column": [170, 269, 308], "dtypekind": 170, "approxim": [171, 308, 324, 438, 692, 770, 785, 876, 1009, 1233, 1253, 1261], "hyperloglog": [171, 308, 324, 692, 770, 785, 876], "algorithm": [171, 308, 324, 625, 645, 692, 770, 785, 876, 1155, 1175], "cardin": [171, 308, 324, 692, 770, 785, 876], "k": [172, 244, 272, 273, 308, 366, 367, 377, 479, 678, 679, 770, 786, 846, 876, 929, 944, 1047, 1218, 1233], "intoexpr": [172, 200, 201, 241, 247, 248, 252, 255, 272, 282, 283, 287, 308, 323, 341, 361, 364, 365, 367, 390, 438, 444, 462, 466, 467, 490, 510, 511, 512, 513, 568, 582, 590, 592, 594, 596, 598, 601, 603, 605, 609, 611, 620, 625, 645, 648, 649, 650, 655, 656, 671, 679, 689, 691, 696, 699, 700, 701, 702, 704, 706, 709, 713, 720, 734, 736, 739, 745, 748, 752, 754, 770, 786, 809, 810, 832, 834, 835, 838, 841, 846, 852, 853, 857, 876, 880, 905, 924, 927, 928, 956, 1009, 1015, 1031, 1032, 1056, 1118, 1137, 1141, 1178, 1179, 1180, 1185, 1186, 1233], "revers": [172, 187, 272, 308, 367, 377, 378, 379, 380, 381, 552, 554, 556, 679, 705, 770, 786, 846, 876, 944, 945, 946, 947, 948, 1233, 1250, 1252], "smallest": [172, 272, 308, 366, 367, 679, 770, 786, 846, 876, 929, 1233, 1249, 1251], "wish": [172, 272, 308, 366, 367, 678, 679, 770, 786, 846, 876, 929, 1218, 1233], "bottom": [172, 308, 367, 770, 786, 876], "largest": [172, 272, 308, 367, 678, 679, 770, 786, 846, 876, 1218, 1233], "top_k": [172, 308, 366, 367, 679, 770, 786, 876, 929, 1233], "columnnameorselector": [173, 182, 184, 225, 232, 234, 244, 264, 274, 275, 276, 308, 788, 798, 799, 823, 847, 848, 876], "due": [173, 201, 216, 241, 244, 278, 308, 319, 399, 412, 416, 429, 551, 552, 554, 556, 558, 559, 587, 590, 592, 594, 596, 598, 601, 603, 605, 698, 711, 712, 714, 715, 757, 758, 770, 788, 810, 815, 832, 876, 965, 982, 986, 999], "overflow": [173, 308, 368, 380, 381, 662, 673, 770, 788, 876, 930, 947, 948, 1192, 1204, 1233], "u8": [173, 264, 265, 276, 308, 582, 687, 770, 788, 876, 882, 1118, 1209, 1233, 1261], "to_dict": [173, 308, 788, 876, 882], "as_seri": [173, 262, 308, 788, 876, 882], "greater": [174, 216, 308, 456, 458, 467, 617, 641, 642, 650, 667, 770, 815, 876, 1032, 1148, 1171, 1172, 1180, 1197, 1233], "cheap": [174, 175, 248, 283, 308, 789, 790, 835, 853, 876, 938, 940, 1233], "deepcopi": [174, 308, 789, 876, 938, 1233], "13": [174, 175, 180, 190, 191, 198, 206, 217, 229, 241, 282, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 319, 390, 396, 397, 401, 404, 406, 407, 411, 417, 419, 539, 541, 587, 661, 700, 706, 709, 713, 720, 754, 756, 759, 770, 789, 790, 796, 804, 805, 817, 832, 852, 860, 862, 865, 866, 867, 868, 869, 870, 871, 876, 956, 986, 999, 1000, 1094, 1191, 1233], "facilit": [176, 308], "code": [176, 308, 361, 362, 363, 364, 365, 385, 530, 610, 770, 797, 803, 817, 876, 1139, 1233, 1242], "appl": [177, 205, 215, 238, 239, 262, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 308, 367, 584, 629, 651, 679, 770, 814, 830, 859, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 876, 1159, 1181, 1248, 1254], "banana": [177, 262, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 367, 584, 629, 651, 679, 770, 860, 862, 865, 866, 867, 868, 869, 870, 871, 1254], "orang": [177, 289, 290, 292, 293, 295, 296, 298, 300, 301, 308, 367, 679, 770, 859, 860, 862, 863, 865, 866, 868, 870, 871, 1254], "pairwis": [178, 308], "pearson": [178, 308, 479, 617, 702, 770, 1047, 1148, 1233], "correl": [178, 308, 702, 746], "coeffici": [178, 308, 617, 770, 1148, 1233], "corrcoef": [178, 308], "percentil": [180, 308, 796, 876, 951, 1233], "interpol": [180, 236, 300, 308, 446, 466, 533, 576, 597, 598, 743, 770, 796, 829, 870, 876, 951, 1031, 1113, 1128, 1233], "rollinginterpolationmethod": [180, 236, 300, 308, 576, 597, 598, 743, 770, 796, 829, 870, 876, 951, 1113, 1128, 1233], "summari": [180, 308, 796, 876, 951, 1233, 1248], "midpoint": [180, 236, 300, 308, 576, 597, 598, 743, 770, 796, 829, 870, 876, 951, 1113, 1128, 1233], "linear": [180, 207, 236, 300, 308, 465, 466, 488, 533, 576, 597, 598, 700, 701, 743, 770, 796, 813, 829, 870, 876, 951, 1030, 1031, 1054, 1113, 1128, 1233], "deem": [180, 308, 796, 876], "programmat": [180, 308, 796, 876], "versu": [180, 308, 796, 876], "explor": [180, 308, 796, 876], "glimps": [180, 203, 308], "median": [180, 234, 308, 446, 593, 594, 770, 796, 854, 876, 951, 1126, 1233, 1252], "266667": [180, 308, 796, 876], "666667": [180, 207, 279, 296, 308, 437, 735, 770, 796, 813, 850, 866, 876, 1008, 1233], "std": [180, 308, 600, 601, 770, 796, 876, 951, 1130, 1233], "101514": [180, 308, 796, 876], "071068": [180, 308, 796, 876], "36": [180, 308, 796, 876, 1258], "41": [180, 308, 603, 770, 796, 876, 1249, 1261], "34": [180, 308, 657, 796, 876, 1187], "43": [180, 241, 308, 381, 587, 603, 770, 796, 832, 876], "70": [180, 308, 687, 770, 796, 876, 1047, 1233], "88": [180, 308, 796, 876], "90": [180, 308, 661, 796, 876, 1191, 1256], "49": [180, 308, 796, 876, 882], "33": [180, 226, 308, 606, 770, 796, 824, 876, 1128, 1233], "subset": [184, 230, 274, 308, 799, 847, 876], "preserv": [184, 192, 200, 215, 219, 267, 268, 308, 388, 389, 390, 409, 410, 447, 492, 614, 630, 770, 799, 806, 814, 876, 954, 955, 956, 1018, 1058, 1145, 1160, 1215, 1233], "all_horizont": [184, 308, 688, 799, 876], "is_nul": [184, 308, 770, 799, 876, 1233], "null_equ": [186, 308, 1006, 1233], "sizeunit": [187, 308, 1007, 1233], "heap": [187, 308, 770, 880, 1007, 1233], "bitmap": [187, 308, 1007, 1233], "therefor": [187, 308, 530, 760, 770, 1007, 1233], "structarrai": [187, 308, 1007, 1233], "constant": [187, 241, 308, 391, 438, 444, 770, 832, 876, 957, 1007, 1009, 1015, 1233], "unchang": [187, 308, 582, 677, 770, 819, 864, 876, 1007, 1118, 1216, 1233], "capac": [187, 253, 308, 1007, 1143, 1233], "ffi": [187, 308, 1007, 1233], "kb": [187, 308, 1007, 1233], "mb": [187, 308, 1007, 1233], "gb": [187, 308, 1007, 1233], "1_000_000": [187, 308, 1007, 1233], "17888890": [187, 308], "0601749420166": [187, 308], "more_column": [188, 275, 308, 441, 718, 770, 802, 848, 876, 882], "long": [188, 225, 276, 308, 802, 823, 876], "letter": [188, 291, 302, 308, 441, 625, 632, 645, 718, 770, 802, 861, 872, 876, 882, 1155, 1162, 1175, 1254], "onlin": [189, 308, 1014, 1233], "rerun": [189, 308, 1014, 1233], "finish": [189, 308, 1014, 1233], "conveni": [189, 271, 308, 888, 1014, 1233, 1242], "Not": [190, 308, 445, 474, 475, 770, 804, 876, 1016, 1233], "fillnullstrategi": [191, 308, 446, 770, 805, 876, 1017, 1233], "matches_supertyp": [191, 308, 805, 876], "forward": [191, 216, 252, 308, 352, 390, 409, 446, 452, 514, 611, 770, 805, 815, 838, 876, 916, 956, 979, 1017, 1080, 1141, 1233], "consecut": [191, 308, 360, 446, 452, 623, 636, 770, 805, 876, 1017, 1153, 1166, 1233], "fill_nan": [191, 308, 446, 770, 805, 876, 1017, 1233], "intoexprcolumn": [192, 308, 340, 344, 345, 352, 366, 367, 372, 416, 444, 447, 489, 497, 500, 509, 514, 569, 573, 608, 611, 631, 635, 638, 647, 652, 653, 654, 658, 662, 667, 678, 679, 693, 698, 711, 712, 714, 715, 726, 727, 757, 758, 760, 770, 806, 838, 876, 904, 908, 909, 916, 939, 986, 1015, 1055, 1063, 1066, 1075, 1080, 1108, 1161, 1165, 1168, 1177, 1182, 1183, 1184, 1188, 1197, 1233], "constraint": [192, 308, 447, 551, 552, 554, 556, 558, 559, 760, 770, 806, 876, 882], "discard": [192, 308, 447, 770, 806, 876, 1018, 1233], "behav": [192, 308, 447, 530, 653, 654, 770, 806, 876], "eq": [192, 308, 436, 447, 770, 806, 876, 1233], "implicitli": [192, 308, 447, 760, 770, 806, 876, 1258], "reduct": [194, 308], "supercast": [194, 308], "parent": [194, 308], "arithmet": [194, 308], "zip_with": [194, 308, 1233], "foo11": [194, 308], "bar22": [194, 308], "nth": [195, 308, 455, 650, 766, 770, 808, 876, 1022, 1180, 1233], "th": [195, 308, 455, 497, 510, 617, 635, 658, 770, 808, 876, 1022, 1063, 1076, 1148, 1165, 1188, 1233], "retriev": [196, 266, 308, 338, 339, 486, 487, 668, 741, 902, 903, 1052, 1053, 1198, 1212, 1233, 1248], "max_items_per_column": [199, 308], "max_colname_length": [199, 308], "return_as_str": [199, 308, 543], "preview": [199, 308], "few": [199, 308], "exce": [199, 308], "ellipsi": [199, 308], "head": [199, 218, 260, 308, 323, 483, 568, 770, 818, 876, 1049, 1205, 1233], "tail": [199, 203, 308, 323, 617, 770, 876, 1027, 1148, 1233], "usd": [199, 308, 1261], "eur": [199, 308, 1261], "named_bi": [200, 308, 809, 876], "groupbi": [200, 308, 530, 732, 770], "consist": [200, 232, 267, 308, 657, 711, 712, 809, 876, 882, 888, 1014, 1187, 1214, 1233], "agg": [200, 201, 234, 241, 308, 318, 367, 447, 449, 454, 457, 529, 530, 542, 568, 619, 620, 679, 686, 732, 770, 791, 792, 801, 803, 809, 810, 828, 832, 839, 876, 882], "Or": [200, 201, 216, 241, 255, 278, 287, 308, 438, 568, 587, 620, 711, 712, 714, 715, 757, 758, 760, 766, 770, 809, 810, 815, 832, 841, 857, 876, 1009, 1233], "index_column": [201, 241, 308, 587, 770, 810, 832, 876], "timedelta": [201, 216, 241, 278, 308, 412, 416, 429, 438, 587, 590, 592, 593, 594, 596, 597, 598, 600, 601, 602, 603, 604, 605, 711, 712, 714, 715, 757, 758, 770, 810, 815, 832, 876, 882, 970, 976, 982, 986, 999, 1009, 1103, 1104, 1152, 1223, 1233], "include_boundari": [201, 308, 810, 876], "closedinterv": [201, 241, 308, 467, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 757, 758, 770, 810, 832, 876, 1032, 1233], "label": [201, 266, 271, 308, 312, 383, 575, 588, 589, 591, 593, 595, 597, 600, 602, 604, 770, 810, 828, 876, 950, 1112, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1233], "group_bi": [201, 230, 234, 241, 278, 307, 308, 318, 367, 447, 449, 454, 457, 529, 530, 568, 619, 620, 679, 686, 732, 770, 791, 792, 801, 803, 810, 828, 832, 839, 875, 876, 882], "start_bi": [201, 308, 810, 876], "startbi": [201, 308, 810, 876], "dynamicgroupbi": [201, 308], "member": [201, 308, 810, 876, 1037, 1233], "earliest": [201, 308, 415, 657, 660, 713, 810, 876, 985, 1187, 1190], "datapoint": [201, 308, 810, 876], "descript": [201, 308, 810, 876, 1248, 1249, 1250, 1251, 1253, 1255, 1259, 1260], "ascend": [201, 241, 308, 587, 770, 810, 832, 876], "dynam": [201, 308, 357, 521, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 770, 810, 876, 880, 921, 1087], "matter": [201, 213, 241, 243, 244, 263, 308, 587, 653, 654, 770, 810, 832, 876], "interv": [201, 241, 278, 308, 383, 416, 429, 462, 467, 575, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 757, 758, 770, 810, 832, 876, 950, 964, 966, 967, 973, 975, 977, 978, 981, 983, 984, 986, 990, 999, 1000, 1028, 1032, 1112, 1233], "_lower_boundari": [201, 308, 810, 876], "_upper_boundari": [201, 308, 810, 876], "impact": [201, 308, 810, 876, 1241, 1258], "harder": [201, 308, 810, 876], "inclus": [201, 241, 308, 467, 587, 590, 592, 594, 596, 598, 601, 603, 605, 648, 649, 693, 711, 712, 714, 715, 726, 727, 757, 758, 770, 810, 832, 876, 1032, 1178, 1179, 1233], "boundari": [201, 308, 372, 462, 770, 810, 876, 939, 1028, 1233], "mondai": [201, 308, 390, 429, 431, 698, 810, 876, 956, 999, 1001], "tuesdai": [201, 308, 810, 876], "wednesdai": [201, 308, 418, 421, 810, 876, 988, 991], "thursdai": [201, 308, 390, 698, 810, 876, 956], "fridai": [201, 308, 390, 418, 421, 698, 810, 876, 956, 988, 991], "saturdai": [201, 308, 810, 876], "sundai": [201, 308, 390, 418, 421, 431, 698, 810, 876, 956, 988, 991, 1001], "weekli": [201, 308, 429, 810, 876, 999], "week": [201, 216, 241, 278, 308, 390, 412, 416, 429, 431, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 698, 711, 712, 714, 715, 716, 757, 758, 770, 810, 815, 832, 876, 882, 956, 982, 986, 999, 1001, 1009, 1233, 1255], "shift": [201, 308, 360, 386, 452, 491, 569, 700, 770, 810, 876, 952, 1057, 1108, 1233], "front": [201, 308, 810, 876], "roll": [201, 308, 390, 409, 410, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 700, 746, 747, 770, 810, 876, 956, 979, 980, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1233], "re": [201, 212, 308, 409, 410, 418, 421, 810, 876, 979, 980, 988, 991, 1258], "1d": [201, 216, 241, 278, 308, 392, 412, 416, 423, 426, 429, 432, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 716, 730, 757, 758, 770, 810, 815, 832, 876, 882, 958, 966, 972, 982, 986, 990, 993, 996, 999, 1009, 1233], "set_index": [201, 308, 810, 876], "resampl": [201, 308, 810, 876], "evenli": [201, 308, 810, 876], "upsampl": [201, 308, 810, 876], "1n": [201, 216, 241, 278, 308, 412, 416, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 714, 715, 757, 758, 770, 810, 815, 832, 876, 982, 986, 999, 1009, 1233], "1u": [201, 216, 241, 278, 308, 412, 416, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 714, 715, 757, 758, 770, 810, 815, 832, 876, 982, 986, 999, 1009, 1233], "1m": [201, 216, 241, 278, 308, 412, 416, 428, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 714, 715, 757, 758, 770, 810, 815, 832, 876, 982, 986, 994, 995, 997, 998, 999, 1009, 1233], "millisecond": [201, 216, 241, 278, 308, 401, 407, 412, 416, 425, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 714, 715, 716, 757, 758, 770, 810, 815, 832, 876, 882, 982, 986, 995, 999, 1009, 1233, 1255], "minut": [201, 216, 241, 278, 308, 401, 404, 406, 411, 412, 416, 417, 426, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 713, 714, 715, 716, 756, 757, 758, 770, 810, 815, 832, 876, 882, 982, 986, 996, 999, 1009, 1233, 1255], "1h": [201, 216, 241, 278, 308, 399, 412, 416, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 714, 715, 757, 758, 770, 810, 815, 832, 876, 965, 967, 982, 986, 999, 1009, 1233], "1w": [201, 216, 241, 278, 308, 412, 416, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 757, 758, 770, 810, 815, 832, 876, 982, 986, 999, 1009, 1233], "1mo": [201, 216, 241, 278, 308, 395, 409, 410, 412, 415, 416, 422, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 757, 758, 770, 810, 815, 832, 876, 961, 978, 979, 980, 982, 983, 984, 985, 986, 992, 999, 1000, 1009, 1233], "month": [201, 216, 241, 278, 308, 398, 409, 410, 412, 416, 418, 421, 429, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 710, 711, 712, 713, 714, 715, 716, 757, 758, 770, 810, 815, 832, 876, 964, 979, 980, 982, 986, 988, 991, 999, 1009, 1233, 1255], "1q": [201, 216, 241, 278, 308, 412, 416, 429, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 757, 758, 770, 810, 815, 832, 876, 982, 986, 999], "quarter": [201, 216, 241, 278, 308, 412, 416, 429, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 757, 758, 770, 810, 815, 832, 876, 982, 986, 999, 1255], "1y": [201, 216, 241, 278, 308, 412, 416, 429, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 757, 758, 770, 810, 815, 832, 876, 982, 986, 999], "1i": [201, 241, 278, 308, 438, 587, 770, 810, 832, 876, 1009, 1233], "3d12h4m25": [201, 216, 241, 278, 308, 416, 429, 438, 587, 714, 715, 757, 758, 770, 810, 815, 832, 876, 986, 999, 1009, 1233], "correspond": [201, 216, 241, 267, 278, 308, 367, 403, 412, 416, 429, 530, 578, 587, 590, 592, 594, 596, 598, 601, 603, 605, 679, 711, 712, 714, 715, 757, 758, 770, 791, 810, 815, 832, 876, 969, 982, 986, 999, 1114, 1233], "daylight": [201, 216, 241, 278, 308, 391, 399, 412, 416, 429, 587, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 714, 715, 716, 757, 758, 770, 810, 815, 832, 876, 965, 982, 986, 999], "10i": [201, 308, 810, 876], "datetime_rang": [201, 308, 392, 395, 409, 410, 412, 415, 416, 422, 423, 424, 425, 426, 427, 428, 429, 432, 590, 592, 594, 596, 598, 601, 603, 605, 711, 712, 770, 810, 876, 957, 958, 961, 965, 966, 967, 972, 973, 975, 977, 979, 980, 981, 982, 985, 986, 990, 992, 993, 994, 995, 996, 997, 998, 999], "30m": [201, 308, 416, 429, 810, 876, 986, 999], "eager": [201, 216, 234, 276, 308, 392, 395, 398, 400, 409, 410, 412, 413, 415, 416, 420, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 590, 592, 594, 596, 598, 601, 603, 605, 693, 697, 711, 712, 714, 715, 722, 726, 727, 742, 745, 749, 752, 757, 758, 761, 769, 770, 810, 819, 876, 957, 958, 961, 964, 965, 966, 967, 972, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1258], "lower_bound": [201, 308, 372, 467, 770, 810, 876, 939, 1032, 1221, 1233], "upper_bound": [201, 308, 372, 467, 521, 770, 810, 876, 939, 1032, 1093, 1233], "bys": [201, 308, 810, 876], "int_rang": [201, 276, 285, 294, 308, 693, 729, 810, 819, 856, 864, 876], "2i": [201, 308, 810, 876], "3i": [201, 241, 308, 810, 876], "a_agg_list": [201, 308, 810, 876], "seed_1": [202, 308, 460, 770, 1026, 1233], "seed_2": [202, 308, 460, 770, 1026, 1233], "seed_3": [202, 308, 460, 770, 1026, 1233], "hash": [202, 308, 770, 1233], "Its": [202, 308, 460, 770, 1026, 1233], "stabil": [202, 308, 460, 770, 1026, 1233], "u64": [202, 285, 308, 460, 580, 770, 828, 856, 876, 882, 1026, 1116, 1233], "10783150408545073287": [202, 308], "1438741209321515184": [202, 308], "10047419486152048166": [202, 308], "2047317070637311557": [202, 308], "ab": [203, 218, 260, 282, 308, 668, 670, 770, 852, 876, 882, 1027, 1049, 1205, 1233, 1252, 1254], "in_plac": [205, 253, 280, 308, 1115, 1143, 1150, 1233], "grown": [205, 308], "baz": [206, 207, 234, 275, 308, 633, 648, 650, 719, 728, 741, 766, 813, 848, 876, 882, 1163, 1180, 1246, 1251, 1254], "intermedi": [207, 308, 813, 876, 1261], "333333": [207, 308, 551, 813, 876, 1108, 1132, 1233, 1249], "mask": [208, 210, 308, 362, 468, 470, 473, 478, 570, 571, 624, 627, 634, 770, 925, 1018, 1025, 1032, 1033, 1036, 1039, 1045, 1109, 1110, 1138, 1154, 1157, 1164, 1224, 1233], "visual": [208, 210, 308, 839, 876], "scalar": [211, 219, 242, 308, 529, 609, 635, 640, 647, 658, 730, 732, 770, 880, 1046, 1137, 1165, 1170, 1177, 1188, 1233], "buffer_s": [213, 308], "signific": [213, 219, 308, 530, 607, 770, 1094, 1134, 1233], "4x": [213, 308], "materialis": [213, 214, 242, 243, 308], "rows_by_kei": [213, 243, 308], "iter_row": [214, 242, 243, 244, 308], "17_500": [214, 308], "klmnoopqrstuvwxyz": [214, 308], "__name__": [214, 308], "7500": [214, 308], "15_000": [214, 308], "record_batch": [214, 308], "to_arrow": [214, 308, 1214, 1233, 1258], "to_batch": [214, 308], "date32": [214, 308], "large_str": [214, 261, 268, 308], "15000": [214, 308], "2500": [214, 271, 308], "left_on": [215, 216, 277, 308, 814, 815, 849, 876], "right_on": [215, 216, 277, 308, 814, 815, 849, 876], "suffix": [215, 216, 247, 282, 287, 308, 319, 364, 367, 474, 475, 476, 477, 535, 552, 554, 557, 558, 559, 568, 584, 629, 653, 656, 679, 770, 814, 815, 834, 852, 854, 857, 876, 882, 927, 1159, 1186], "_right": [215, 216, 308, 814, 815, 876], "joinvalid": [215, 308, 814, 876], "join_nul": [215, 308, 814, 876], "coalesc": [215, 216, 277, 308, 465, 657, 770, 814, 815, 849, 876, 1187, 1248, 1252], "fashion": [215, 308, 801, 803, 828, 839, 876], "anti": [215, 308, 814, 864, 876, 1136, 1138, 1233, 1248], "cross": [215, 308, 814, 876, 1248], "cartesian": [215, 308, 814, 876], "many_to_mani": [215, 308, 814, 876], "one_to_on": [215, 308, 814, 876], "one_to_mani": [215, 308, 814, 876], "many_to_on": [215, 308, 814, 876], "join_asof": [215, 308, 814, 876], "other_df": [215, 308], "ham_right": [215, 308, 814, 876], "by_left": [216, 308, 815, 876], "by_right": [216, 308, 815, 876], "asofjoinstrategi": [216, 308, 815, 876], "allow_parallel": [216, 308, 814, 815, 876], "force_parallel": [216, 308, 814, 815, 876], "asof": [216, 308, 815, 876], "rather": [216, 308, 453, 529, 543, 575, 586, 667, 770, 815, 876, 1112, 1122, 1197, 1233], "asof_join": [216, 308], "search": [216, 308, 521, 625, 645, 815, 841, 876, 1155, 1175], "distanc": [216, 308, 462, 770, 815, 876, 1028, 1233], "plan": [216, 217, 308, 385, 770, 787, 791, 797, 801, 814, 815, 836, 839, 876, 1260], "gdp": [216, 308, 815, 876], "date_rang": [216, 278, 308, 398, 400, 413, 420, 431, 714, 715, 964, 978, 983, 984, 1000, 1001], "2016": [216, 308, 815, 876], "4164": [216, 308, 815, 876], "4411": [216, 308, 815, 876], "4566": [216, 308, 815, 876], "4696": [216, 308, 815, 876], "4827": [216, 308], "2017": [216, 308, 815, 876], "2018": [216, 308, 415, 815, 876, 985], "2019": [216, 308, 815, 876], "popul": [216, 308, 815, 876], "82": [216, 308, 815, 876], "66": [216, 277, 308, 603, 687, 770, 815, 849, 876, 1047, 1128, 1233], "83": [216, 308, 815, 876], "quit": [216, 308], "earlier": [216, 308], "later": [216, 308, 542, 836, 876], "countri": [216, 308, 391, 957], "gdp_date": [216, 308], "gdp2": [216, 308], "germani": [216, 308], "netherland": [216, 308], "784": [216, 308], "833": [216, 308], "914": [216, 308], "910": [216, 308, 632, 1162], "909": [216, 308], "pop2": [216, 308], "request": [217, 308], "describe_plan": [217, 308], "unoptim": [217, 308], "describe_optimized_plan": [217, 308], "show_graph": [217, 308, 876], "un": [217, 308], "graphviz": [217, 308, 839, 876], "inference_s": [219, 308], "256": [219, 308, 1108, 1233, 1253], "much": [219, 276, 294, 308, 382, 496, 530, 639, 640, 732, 770, 864, 949, 1062, 1094, 1169, 1170, 1233], "intens": [219, 294, 308, 568, 770, 1094, 1233], "materi": [219, 244, 294, 308, 791, 828, 864, 876, 882, 1094, 1233], "parallelis": [219, 294, 308, 1094, 1233], "achiev": [219, 294, 308, 530, 640, 770, 1094, 1170, 1233], "tri": [219, 308], "black": [219, 308, 361, 362, 363, 364, 365], "arbitrarili": [219, 308], "rearrang": [219, 308], "transform": [219, 256, 308, 529, 663, 665, 666, 749, 770, 842, 876], "lru_cach": [219, 308, 530, 770, 1094, 1233], "column_1": [219, 273, 308, 1256], "better": [219, 266, 267, 294, 308, 530, 640, 770, 787, 864, 876, 1136, 1138, 1170, 1233], "spam": [222, 308, 632, 1162], "ignore_nul": [223, 259, 308, 320, 322, 345, 437, 439, 440, 500, 623, 636, 688, 690, 701, 770, 886, 887, 909, 1008, 1010, 1011, 1066, 1153, 1166, 1233], "id_var": [225, 308, 823, 876], "value_var": [225, 308, 823, 876], "variable_nam": [225, 308, 823, 876], "value_nam": [225, 308, 823, 876], "unpivot": [225, 308, 823, 876], "massag": [225, 308, 823, 876], "measur": [225, 308, 312, 823, 876], "axi": [225, 308, 694, 695, 823, 876], "df0": [226, 308, 824, 876, 1247], "steve": [226, 308, 824, 876], "elis": [226, 308, 824, 876], "ag": [226, 308, 824, 876, 1259], "anna": [226, 308, 824, 876], "megan": [226, 308, 824, 876], "thoma": [226, 308, 824, 876], "what": [230, 308, 311, 390, 529, 625, 645, 770, 956, 1155, 1175, 1233, 1237], "pack": [230, 308], "expr_unique_subset": [230, 308], "df_nuniqu": [230, 308], "df_agg_nuniqu": [230, 308], "more_bi": [232, 255, 308, 620, 770, 841, 876], "include_kei": [232, 244, 308], "offer": [233, 308, 572, 770, 827, 876, 1255, 1258], "cast_str_to_int": [233, 308, 827, 876], "col_nam": [233, 308, 530, 760, 770, 827, 876], "tdf": [233, 308], "aggregate_funct": [234, 308, 882], "pivotagg": [234, 308], "sort_column": [234, 308], "section": [234, 308, 624, 631, 632, 634, 643, 644, 711, 712, 714, 715, 757, 758, 1154, 1161, 1162, 1164, 1173, 1174], "predefin": [234, 308], "predict": [234, 237, 278, 308], "transpos": [234, 308], "discoveri": [234, 308], "col3": [234, 308, 1261], "tanh": [234, 308, 770, 1233], "998347": [234, 308], "964028": [234, 308], "999954": [234, 308], "unique_column_valu": [234, 308], "ix": [234, 308], "column_nam": [238, 273, 308, 830, 876], "coo": [238, 308, 830, 876], "car": [238, 262, 308, 584, 770, 830, 876], "cam": [238, 308, 830, 876], "rollinggroupbi": [241, 308], "group_by_dynam": [241, 308, 832, 876], "t_0": [241, 308, 587, 590, 592, 594, 596, 598, 601, 603, 605, 770, 832, 876], "t_1": [241, 308, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 770, 832, 876, 1009, 1233], "t_n": [241, 308, 438, 587, 590, 592, 594, 596, 598, 601, 603, 605, 770, 832, 876, 1009, 1233], "strptime": [241, 308, 415, 587, 770, 832, 876, 985], "set_sort": [241, 278, 308, 587, 770, 815, 832, 876, 1233], "2d": [241, 266, 267, 308, 412, 587, 730, 770, 832, 876, 957, 964], "sum_a": [241, 308, 587, 770, 832, 876], "min_a": [241, 308, 587, 770, 832, 876], "max_a": [241, 308, 587, 770, 832, 876], "by_pred": [242, 308], "accord": [242, 308, 575, 711, 712, 714, 715, 757, 758, 770, 969, 1112, 1233], "mutual": [242, 308], "exclus": [242, 308, 687, 693, 726, 727, 770, 882], "clariti": [242, 308], "toomanyrowsreturnederror": [242, 308], "norowsreturnederror": [242, 308], "inherit": [242, 308, 385, 770, 797, 876], "rowserror": [242, 308], "littl": [243, 308], "peak": [243, 308, 570, 571, 770, 1109, 1110, 1233], "high": [244, 308, 312, 575, 770, 782, 1112, 1233], "cost": [244, 308], "reoconstruct": [244, 308], "q": [244, 308, 752, 1245], "defaultdict": [244, 308], "assum": [244, 308, 819, 864, 876, 1255], "with_replac": [245, 308, 509, 608, 770, 1075, 1135, 1233], "named_expr": [247, 248, 282, 283, 308, 671, 748, 752, 834, 835, 852, 853, 876], "threshold": [247, 308, 834, 876], "set_auto_structifi": [247, 282, 308, 834, 852, 876], "auto_structifi": [247, 282, 308, 834, 852, 876], "is_odd": [247, 308, 834, 876, 882], "_is_odd": [247, 308, 834, 876], "bit_set": [249, 308, 836, 876], "incorrect": [250, 308, 432, 529, 610, 770, 837, 864, 876, 1002, 1139, 1233], "fill_valu": [252, 276, 308, 611, 770, 838, 876, 1141, 1233], "opposit": [252, 308, 352, 514, 611, 770, 838, 876, 916, 1080, 1141, 1233], "lag": [252, 308, 352, 514, 611, 700, 770, 838, 876, 916, 1080, 1141, 1233], "shrink": [253, 308, 612, 770, 1142, 1143, 1233], "hold": [253, 267, 308, 1214, 1233], "nulls_last": [255, 308, 333, 353, 516, 619, 620, 696, 770, 841, 876, 897, 917, 1044, 1082, 1150, 1233], "multithread": [255, 308, 620, 696, 770, 841, 876, 917, 1082, 1150, 1233], "although": [256, 308, 842, 876], "sqlcontext": [256, 308, 749, 842, 876, 1257], "registr": [256, 308, 749, 782, 842, 876, 1247, 1258], "1999": [256, 308, 412, 882, 982], "2010": [256, 308, 882], "2077": [256, 308, 882, 1255], "alias": [256, 308, 536, 842, 876], "AS": [256, 308, 749, 750, 842, 876, 1241, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1258, 1260], "a_is_even": [256, 308, 749, 842, 876], "concat_w": [256, 308, 749, 842, 876, 1252, 1258], "b_b": [256, 308], "float4": [256, 308, 749, 842, 876], "ddof": [257, 279, 308, 354, 359, 517, 523, 600, 601, 604, 605, 622, 685, 702, 704, 746, 747, 751, 759, 770, 843, 850, 876, 918, 923, 1083, 1089, 1130, 1132, 1152, 1223, 1233], "deviat": [257, 308, 439, 600, 601, 622, 751, 770, 843, 876, 1010, 1152, 1233, 1249], "degre": [257, 279, 308, 517, 523, 577, 600, 601, 604, 605, 622, 685, 695, 702, 704, 746, 747, 751, 759, 770, 843, 850, 876, 1130, 1132, 1152, 1223, 1233, 1252], "freedom": [257, 279, 308, 517, 523, 600, 601, 604, 605, 622, 685, 702, 704, 746, 747, 751, 759, 770, 843, 850, 876, 1130, 1132, 1152, 1223, 1233], "divisor": [257, 279, 308, 517, 523, 600, 601, 604, 605, 622, 685, 702, 704, 746, 747, 751, 759, 770, 843, 850, 876, 1130, 1132, 1152, 1223, 1233], "816497": [257, 308], "mostli": [261, 308, 447, 770], "categoricaltyp": [261, 308], "fruit": [262, 308, 584, 629, 651, 658, 770, 1159, 1181, 1188], "beetl": [262, 308, 584, 770], "audi": [262, 308, 584, 770], "28": [262, 267, 308, 317, 415, 432, 770, 985, 1002, 1214, 1233, 1255, 1256, 1260, 1261], "300": [262, 308, 459, 566, 770, 882, 1124, 1125, 1127, 1233, 1251], "drop_first": [264, 308, 1209, 1233], "dummi": [264, 308, 1209, 1233], "foo_1": [264, 308], "foo_2": [264, 308], "bar_3": [264, 308], "bar_4": [264, 308], "ham_a": [264, 308], "ham_b": [264, 308], "instantiat": [265, 308, 1211, 1233], "from_repr": [265, 308, 1211, 1233], "df_from_str_repr": [265, 308], "eval": [265, 308, 529, 530, 717, 770, 1094, 1211, 1233], "return_typ": [266, 271, 308], "jaxexporttyp": [266, 308], "devic": [266, 308, 1212, 1233], "jax": [266, 308, 1212, 1233], "indexord": [266, 267, 308], "fortran": [266, 267, 308], "gpu": [266, 308, 1212, 1233], "tpu": [266, 308, 1212, 1233], "design": [266, 271, 308], "32bit": [266, 308], "jax_enable_x64": [266, 308], "startup": [266, 308], "to_dummi": [266, 271, 308, 1233], "to_numpi": [266, 271, 308, 529, 770, 1233], "to_torch": [266, 308, 1233], "lbl": [266, 271, 308], "feat1": [266, 271, 308], "feat2": [266, 271, 308], "gpudevic": [266, 308], "process_index": [266, 308], "gpu_devic": [266, 308], "downstream": [267, 308, 610, 770, 1139, 1233], "applic": [267, 308, 530, 770], "prevent": [267, 308, 319, 380, 381, 551, 673, 770, 876, 947, 948, 1204, 1233], "reshap": [267, 308, 494, 770, 1060, 1233], "immut": [267, 308, 1214, 1233], "arr": [267, 308, 762, 1214, 1225, 1233], "writeabl": [267, 308, 1214, 1233], "runtimeerror": [267, 308, 1214, 1233], "c_contigu": [267, 308], "u1": [267, 308], "f4": [267, 308], "use_pyarrow_extension_arrai": [268, 308, 1215, 1233], "extens": [268, 308, 1215, 1233], "na": [268, 308, 651, 1215, 1233], "doubl": [268, 308], "four": [270, 308, 1258], "five": [270, 308, 1261], "torchexporttyp": [271, 308], "tensor": [271, 308, 1217, 1233], "polarsdataset": [271, 308], "pytorch": [271, 308, 1217, 1233], "tensordataset": [271, 308], "label_column": [271, 308], "to_jax": [271, 308, 1233], "0000": [271, 308, 1217, 1233, 1261], "5000": [271, 308, 1217, 1233], "opt": [271, 308], "half": [271, 308, 416, 437, 438, 439, 440, 770, 986, 1008, 1009, 1010, 1011, 1233], "experiment": [271, 308, 852, 876], "model": [271, 308], "float16": [271, 308], "dataload": [271, 308], "util": [271, 308, 722, 803, 876, 880], "dl": [271, 308], "scikit": [271, 308], "learn": [271, 308], "sklearn": [271, 308], "fetch_california_h": [271, 308], "hous": [271, 308], "feature_nam": [271, 308], "train": [271, 308], "loader": [271, 308], "bottom_k": [272, 308, 367, 678, 679, 770, 846, 876, 1218, 1233], "header_nam": [273, 308], "perhap": [273, 308], "column_2": [273, 308, 1256], "name_gener": [273, 308], "base_nam": [273, 308], "my_column_": [273, 308], "my_column_0": [273, 308], "my_column_1": [273, 308], "my_column_2": [273, 308], "j": [273, 308], "new_id": [273, 308], "uniquekeepstrategi": [274, 308, 847, 876], "kept": [274, 308, 847, 876], "decompos": [275, 308, 848, 876], "t_a": [275, 308, 848, 876], "t_b": [275, 308, 848, 876], "t_c": [275, 308, 848, 876], "t_d": [275, 308, 848, 876], "womp": [275, 308, 848, 876], "t_": [275, 308, 438, 770, 848, 876, 1009, 1233], "t_struct": [275, 308, 848, 876], "step": [276, 308, 451, 693, 726, 727, 770], "unstackdirect": [276, 308], "pivot": [276, 308, 882], "ascii_uppercas": [276, 308], "h": [276, 308, 317, 418, 421, 612, 643, 644, 657, 660, 664, 770, 1173, 1174, 1187, 1190, 1194, 1255], "x_0": [276, 308, 437, 438, 439, 440, 770, 1008, 1009, 1010, 1011, 1233], "x_1": [276, 308, 438, 770, 1009, 1233], "y_0": [276, 308, 437, 438, 439, 440, 770, 1008, 1009, 1010, 1011, 1233], "y_1": [276, 308], "z_0": [276, 308], "z_1": [276, 308], "include_nul": [277, 308, 849, 876], "implicit": [277, 308, 849, 876], "syntact": [277, 308, 582, 688, 690, 692, 703, 705, 708, 718, 723, 724, 725, 733, 735, 737, 738, 740, 742, 743, 748, 751, 753, 755, 759, 761, 770, 849, 876, 1118, 1151, 1233], "sugar": [277, 308, 582, 688, 690, 692, 703, 705, 708, 718, 723, 724, 725, 733, 735, 737, 738, 740, 742, 743, 748, 751, 753, 755, 759, 761, 770, 849, 876, 1118, 1151, 1233], "400": [277, 308, 424, 425, 427, 849, 876, 1124, 1125, 1127, 1233, 1251], "600": [277, 308, 424, 425, 427, 849, 876, 882], "700": [277, 308, 849, 876], "new_df": [277, 308, 849, 876], "time_column": [278, 308], "frequenc": [278, 308, 684, 770, 1222, 1233], "forward_fil": [278, 308, 360, 378, 381, 611, 770], "varianc": [279, 308, 440, 479, 604, 605, 685, 759, 770, 850, 876, 1011, 1047, 1132, 1223, 1233, 1252], "grow": [280, 308], "not_": [282, 308, 770, 852, 876, 882, 1233], "not_c": [282, 308, 852, 876], "52": [282, 308, 430, 606, 770, 815, 852, 876], "diff": [282, 308, 422, 423, 424, 425, 426, 427, 428, 510, 770, 852, 876, 992, 993, 994, 995, 996, 997, 998, 1076, 1233], "_diff": [282, 308, 852, 876], "row_nr": [284, 308, 855, 876], "1001": [285, 308, 856, 876], "1002": [285, 308, 856, 876], "named_agg": [287, 857], "_sum": [287, 857], "_mean_squar": [287, 857], "b_sum": [287, 857], "c_mean_squar": [287, 857], "toward": [289, 482, 502, 705, 770, 859, 1048, 1068, 1233], "nr": [291, 302, 861, 872], "sub": [294, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 354, 355, 359, 500, 507, 770, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 918, 919, 923, 1066, 1073], "triangl": [294, 864], "group_df": [294, 864], "maxim": [295, 331, 770, 865, 895, 1233], "833333": [296, 866], "minim": [298, 332, 339, 487, 612, 620, 770, 868, 896, 903, 1053, 1098, 1142, 1233], "overview": [308, 770, 782, 876, 1233, 1257, 1261], "frameinittyp": [308, 876], "entri": [308, 876, 1258], "workaround": 308, "pola": 308, "2846": 308, "df4": 308, "df5": 308, "df6": 308, "approx_n_uniqu": [308, 770, 876], "corr": 308, "drop_in_plac": 308, "drop_nul": [308, 388, 770, 876, 954, 1233], "estimated_s": [308, 1233], "explod": [308, 367, 449, 568, 583, 679, 770, 876, 880, 1119, 1233, 1250], "fold": [308, 540, 699, 706, 707, 744], "gather_everi": [308, 770, 876, 1233], "get_column_index": 308, "hash_row": 308, "insert_column": 308, "is_dupl": [308, 770, 1233], "is_empti": [308, 1233], "is_uniqu": [308, 770, 1233], "iter_column": 308, "iter_slic": 308, "map_row": 308, "max_horizont": [308, 733], "mean_horizont": [308, 735], "melt": [308, 876], "merge_sort": [308, 876], "min_horizont": [308, 738, 748], "n_chunk": [308, 888, 1014, 1115, 1233], "n_uniqu": [308, 324, 770, 1233], "pipe": [308, 770, 876], "plot": [308, 828, 839, 876, 1233], "hvplottabularpolar": [308, 1233], "defer": [308, 311, 312, 1233, 1237], "galleri": [308, 311, 1233, 1237], "scatter": [308, 311, 1233], "speci": [308, 311], "setosa": [308, 311], "versicolor": [308, 311], "stock_1": [308, 311], "stock_2": [308, 311], "quantil": [308, 575, 597, 598, 770, 876, 1112, 1128, 1233], "replace_column": 308, "select_seq": [308, 876], "shrink_to_fit": [308, 1233], "gt": [308, 312, 770, 1233], "great": [308, 312], "helper": [308, 312, 766], "great_tabl": [308, 312], "loc": [308, 312], "site_id": [308, 312], "measure_a": [308, 312], "measure_b": [308, 312], "emphas": [308, 312], "tab_stub": [308, 312], "rowname_col": [308, 312], "background": [308, 312, 791, 876], "highest": [308, 312, 578, 683, 702, 770, 876, 1114, 1233], "tab_styl": [308, 312], "yellow": [308, 312, 361, 362, 363, 364, 365], "spanner": [308, 312], "tab_spann": [308, 312], "fmt_number": [308, 312], "to_panda": [308, 1233], "to_struct": [308, 632], "unstack": 308, "with_columns_seq": [308, 876], "with_row_count": [308, 876], "write_avro": 308, "write_databas": 308, "write_delta": 308, "write_excel": 308, "write_ipc_stream": 308, "write_json": 308, "write_parquet": 308, "cum_prod": [317, 770, 1233], "ghi": [317, 632, 770, 882, 1162], "94": [318, 770], "to_uppercas": [319, 558, 633, 770], "kleen": [320, 322, 688, 689, 690, 691, 770, 886, 887, 1233], "bitwis": [321, 567, 687, 688, 689, 690, 691, 770], "upcast": [323, 770], "approx": [324, 770], "1005": [324, 770], "invers": [325, 326, 327, 328, 329, 330, 770, 889, 890, 891, 892, 893, 894, 1214, 1233, 1256], "cosin": [325, 326, 373, 374, 529, 770, 889, 890, 941, 942, 1233, 1256], "570796": [325, 327, 770, 889, 891, 1233, 1256], "hyperbol": [326, 328, 330, 374, 616, 676, 770, 890, 892, 894, 942, 1147, 1207, 1233], "sine": [327, 328, 529, 615, 616, 770, 891, 892, 1146, 1147, 1233, 1256], "881374": [328, 770, 892, 1233], "tangent": [329, 330, 675, 676, 770, 893, 894, 1206, 1207, 1233, 1256], "785398": [329, 694, 695, 770, 893, 1233, 1256], "rank": [333, 493, 696, 702, 717, 770, 897, 1059, 1233], "arg_wher": [334, 770], "subarrai": [336, 337, 900, 901], "membership": [340, 489, 904, 1055], "number_of_two": [341, 490], "null_on_oob": [344, 496, 498, 908, 1062, 1064], "sublist": [344, 486, 487, 489, 491, 495, 496, 497, 498, 499, 500, 501, 510, 515, 519, 521, 908, 1037, 1052, 1053, 1055, 1057, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1076, 1081, 1085, 1087, 1233], "propag": [345, 436, 500, 560, 561, 563, 623, 636, 701, 770, 909, 1066, 1103, 1104, 1153, 1166, 1233], "x_y": [345, 500], "707107": [354, 439, 600, 601, 694, 770, 918, 1010, 1233, 1256], "i8": [356, 357, 398, 401, 404, 406, 407, 408, 411, 413, 414, 417, 430, 431, 520, 612, 742, 745, 761, 770, 920, 921, 952, 964, 967, 977, 978, 984, 987, 1000, 1001, 1086, 1120, 1142, 1221, 1233, 1255], "field_0": [357, 521, 921, 1087], "field_1": [357, 521, 921, 1087], "field_n": [357, 521, 921, 1087], "n0": [357, 521], "n1": [357, 521], "c1": 357, "c2": 357, "c3": 357, "seen": [360, 452, 770], "substr": [361, 364, 365, 624, 629, 634, 643, 644, 647, 648, 649, 650, 651, 882, 924, 927, 928, 1154, 1159, 1164, 1173, 1174, 1177, 1178, 1179, 1180, 1181, 1252], "ends_with": [361, 365, 624, 651, 882, 1181, 1252], "x00": [361, 362, 363, 364, 365, 627, 924, 925, 926, 927, 928, 1157], "xff": [361, 362, 363, 364, 365, 627, 924, 925, 926, 927, 928, 1157], "contains_with_lit": 361, "contains_with_expr": 361, "transferencod": [362, 363, 627, 628, 925, 926, 1157, 1158], "hex": [362, 363, 627, 628, 662, 925, 926, 1157, 1158, 1192], "base64": [362, 363, 627, 628, 925, 926, 1157, 1158], "000000": [362, 363, 627, 925, 926, 1157], "ffff00": [362, 363, 627, 925, 926, 1157], "0000ff": [362, 363, 627, 925, 926, 1157], "anywher": [364, 365, 657, 659, 660, 1187, 1189, 1190], "ends_with_lit": 364, "ends_with_expr": 364, "starts_with_lit": 365, "starts_with_expr": 365, "top_k_bi": [366, 367, 678, 770], "bottom_k_bi": [366, 678, 679, 770], "_btm_by_a": [367, 770], "_btm_by_b": [367, 770], "a_btm_by_a": [367, 770], "b_btm_by_a": [367, 770], "c_btm_by_a": [367, 770], "a_btm_by_b": [367, 770], "b_btm_by_b": [367, 770], "c_btm_by_b": [367, 770], "_by_ca": [367, 679, 770], "_by_cb": [367, 679, 770], "a_by_ca": [367, 679, 770], "b_by_ca": [367, 679, 770], "c_by_ca": [367, 679, 770], "a_by_cb": [367, 679, 770], "b_by_cb": [367, 679, 770], "c_by_cb": [367, 679, 770], "wrap_numer": [368, 770, 930, 1233], "to_fram": [369, 400, 416, 420, 429, 657, 950, 1112, 1136, 1138, 1179, 1180, 1187, 1233], "259921": [370, 770, 935, 1233, 1253], "587401": [370, 770, 1253], "numericliter": [372, 770, 939, 1233], "temporalliter": [372, 770, 939, 971, 972, 1233], "outsid": [372, 770, 939, 1233], "543081": [374, 770, 942, 1233], "cotang": [375, 770, 943, 1233, 1256], "cumul": [377, 378, 379, 380, 381, 705, 706, 707, 708, 709, 770, 944, 945, 946, 947, 948, 1233], "cum_count_revers": [377, 770], "cum_max_revers": [378, 770], "cum_max_all_fil": [378, 770], "cum_min_revers": [379, 770], "cum_prod_revers": [380, 770], "cum_sum_revers": [381, 770], "value_cum_sum": [381, 770], "value_cum_sum_all_fil": [381, 770], "min_period": [382, 437, 439, 440, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 746, 747, 770, 949, 1008, 1010, 1011, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1233], "slide": [382, 770, 949, 1233], "slot": [382, 386, 491, 770, 949, 952, 1057, 1233], "realli": [382, 625, 645, 770, 949, 1155, 1175, 1233], "visit": [382, 770, 949, 1233], "left_clos": [383, 575, 770, 950, 1112, 1233], "include_break": [383, 575, 770, 950, 1112, 1233], "bin": [383, 462, 575, 662, 687, 763, 770, 950, 1028, 1112, 1192, 1227, 1233], "discret": [383, 386, 434, 462, 491, 510, 575, 770, 950, 952, 1005, 1028, 1057, 1076, 1112, 1233], "plu": [383, 526, 770, 950, 1092, 1112, 1233, 1253], "endpoint": [383, 575, 770, 950, 1112, 1233], "observ": [383, 437, 438, 439, 440, 575, 770, 950, 1008, 1009, 1010, 1011, 1112, 1233], "fall": [383, 575, 770, 950, 1112, 1233], "qcut": [383, 770, 950, 1233], "breakpoint": [383, 462, 575, 770, 950, 1028, 1112, 1233], "radian": [384, 694, 770, 1252], "720": [384, 577, 770], "540": [384, 577, 770], "360": [384, 577, 770, 1256], "180": [384, 577, 770, 1256], "pickl": [385, 770, 797, 876], "secur": [385, 770, 797, 876], "implic": [385, 770, 797, 876], "trust": [385, 770, 797, 876], "meta": [385, 770], "ba": [385, 441, 542, 651, 718, 770, 882], "null_behavior": [386, 491, 770, 952, 1057, 1233], "nullbehavior": [386, 491, 770, 952, 1057, 1233], "drop_nan": [389, 770, 955, 1233], "week_mask": [390, 698, 956], "holidai": [390, 698, 956], "busi": [390, 698, 956], "handi": [390, 698, 956], "pip": [390, 698, 956], "dutch": [390, 698, 956], "my_holidai": [390, 698, 956], "country_holidai": [390, 698, 956], "nl": [390, 698, 956], "2025": [390, 698, 882, 956], "business_day_count": [390, 956], "land": [390, 956], "weekend": [390, 698, 956], "rolled_forward": 390, "vari": [391, 957, 1261], "rare": [391, 957], "switch": [391, 957], "samoa": [391, 957], "apia": [391, 957], "did": [391, 957], "2011": [391, 957], "dst_offset": [391, 957], "2012": [391, 957], "replace_time_zon": [391, 397, 399, 962, 963, 989], "pacif": [391, 957], "11h": [391, 957], "13h": [391, 957], "lose": [392, 958], "time_unit_m": [392, 958], "time_unit_n": [392, 958], "999": [393, 405, 882, 959, 974, 1251, 1261], "1897": [393, 405, 959, 974], "2000": [393, 402, 405, 409, 410, 412, 882, 959, 968, 974, 979, 980, 982, 987, 1241], "3002": [393, 405, 959, 974], "cent": 393, "0999": [393, 405], "naiv": [394, 395, 660, 960, 961, 1190], "compon": [394, 417, 657, 660, 716, 960, 987, 1187, 1190], "resolv": [394, 793, 794, 800, 833, 851, 876], "tm": [394, 882], "456000": [394, 960], "101000": 394, "d1": 394, "d2": 394, "d3": 394, "europ": [395, 399, 415, 961, 965, 985], "london": [395, 399, 415, 961, 965, 985], "gmt": [395, 399, 415, 961, 965, 985], "bst": [395, 399, 415, 961, 965, 985], "1978": [396, 397, 401, 403, 404, 406, 407, 411, 417, 419, 433], "500_000": [396, 397, 401, 404, 406, 407, 411, 417, 419], "2065": [396, 397, 401, 404, 406, 407, 411, 417, 419], "60_000": [396, 397, 401, 404, 406, 407, 411, 417, 419], "060": [396, 397, 401, 404, 406, 407, 411, 417, 419], "weekdai": [398, 413], "ordinal_dai": [398, 431], "day_of_month": [398, 413, 431], "day_of_year": [398, 413, 431], "356": [398, 413, 431], "357": [398, 413, 431], "358": [398, 413, 431], "359": [398, 413, 431], "base_utc_offset": [399, 965], "0m": [399, 965], "epochtimeunit": [400, 722, 966], "epoch_n": [400, 966], "epoch_": [400, 966], "978307200000000": [400, 420, 966, 990], "978307200": [400, 966], "978393600000000": [400, 420, 966, 990], "978393600": [400, 966], "978480000000000": [400, 420, 966, 990], "978480000": [400, 966], "leap": [402, 412, 968, 982], "leap_year": 402, "iso": [403, 430, 431, 969, 1000, 1001, 1255], "1977": [403, 433], "1979": [403, 433], "calendar_year": [403, 433], "1976": [403, 433], "500000": [404, 973], "60000": 404, "mlnm": 405, "think": [409, 410, 979, 980], "vectoris": [409, 410, 979, 980], "tseri": [409, 410, 979, 980], "monthend": [409, 979], "rollforward": [409, 979], "monthbegin": [410, 980], "rollback": [410, 980], "500000000": [411, 981], "60000000": 411, "minu": [412, 564, 770, 982], "dictat": [412, 770, 880, 982], "2005": [412, 982], "date_plus_1i": [412, 982], "1y2mo": [412, 982], "date_min": 412, "1998": [412, 982], "2003": [412, 722, 982], "2004": [412, 982], "2006": [412, 982], "new_dat": 412, "ordin": [413, 578, 770, 983, 1114, 1233, 1259], "366": [413, 983], "non_exist": [415, 985], "nonexist": [415, 985], "convert_time_zon": [415, 985], "london_timezon": [415, 985], "amsterdam": [415, 985], "london_to_amsterdam": [415, 985], "cet": [415, 985], "cest": [415, 985], "ts_local": [415, 985], "brussel": [415, 985], "localis": [416, 429, 999], "dst": [416, 429, 986, 999], "cst": [416, 429, 986, 999], "cdt": [416, 429, 986, 999], "225": [416, 429, 1256], "10m": [416, 429, 986, 999], "milli": [417, 987], "micro": [417, 987], "to_str": [418, 988], "datetime_str": [418, 421], "day_nam": [418, 421], "month_nam": [418, 421], "march": [418, 421, 988, 991], "april": [418, 421, 988, 991], "timestamp_u": [420, 990], "timestamp_m": 420, "978307200000": 420, "978393600000": 420, "978480000000": 420, "days_diff": 422, "hours_diff": 423, "200m": [424, 425, 427], "milliseconds_diff": [424, 425, 427], "200": [424, 425, 427, 582, 770, 882, 1118, 1124, 1125, 1127, 1233, 1251], "200000": [424, 819, 876], "800": [424, 425, 427], "minutes_diff": 426, "1440": [426, 996], "200000000": 427, "seconds_diff": 428, "truncate_str": 429, "truncate_td": 429, "53": [430, 1000, 1258], "time_unit_u": 432, "32971": [432, 1002], "32974": [432, 1002], "32976": [432, 1002], "iso_year": 433, "pk": [434, 770, 1005, 1233], "probabl": [434, 575, 770, 1005, 1112, 1233], "459148": [434, 770], "754888": [434, 770], "span": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "half_lif": [437, 438, 439, 440, 770, 1008, 1009, 1010, 1011, 1233], "alpha": [437, 439, 440, 770, 801, 803, 828, 839, 876, 882, 1008, 1010, 1011, 1233], "adjust": [437, 439, 440, 617, 770, 1008, 1010, 1011, 1148, 1233], "exponenti": [437, 438, 439, 440, 442, 573, 770, 1008, 1009, 1010, 1011, 1012, 1233, 1253], "decai": [437, 438, 439, 440, 770, 1008, 1009, 1010, 1011, 1233], "term": [437, 439, 440, 635, 647, 658, 770, 1008, 1010, 1011, 1165, 1177, 1188, 1233], "mass": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "gamma": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "frac": [437, 439, 440, 617, 770, 1008, 1010, 1011, 1148, 1233], "foral": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "geq": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "theta": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "life": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "exp": [437, 438, 439, 440, 770, 1008, 1009, 1010, 1011, 1233, 1252], "ln": [437, 438, 439, 440, 770, 1008, 1009, 1010, 1011, 1233, 1252], "smooth": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "factor": [437, 439, 440, 677, 770, 1008, 1010, 1011, 1216, 1233], "leq": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "imbal": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "ew": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "w_i": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "recurs": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "y_t": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "y_": [437, 438, 439, 440, 770, 1008, 1009, 1010, 1011, 1233], "x_t": [437, 439, 440, 770, 1008, 1010, 1011, 1233], "x_2": [437, 438, 439, 440, 770, 1008, 1009, 1010, 1011, 1233], "428571": [437, 770, 1008, 1233], "ldot": [438, 770, 1009, 1233], "x_n": [438, 770, 1009, 1233], "t_2": [438, 770, 1009, 1233], "ewma": [438, 770, 1009, 1233], "alpha_i": [438, 770, 1009, 1233], "t_i": [438, 770, 1009, 1233], "y_i": [438, 770, 1009, 1233], "x_i": [438, 770, 1009, 1233], "quad": [438, 770, 1009, 1233], "370h": [438, 770, 1009, 1233], "4d": [438, 770, 1009, 1233], "292893": [438, 770, 1009, 1233], "492474": [438, 770, 1009, 1233], "254508": [438, 770, 1009, 1233], "bia": [439, 440, 479, 599, 617, 770, 1010, 1011, 1047, 1129, 1148, 1233], "unbias": [439, 440, 770, 1010, 1011, 1233], "963624": [439, 770, 1010, 1233], "928571": [440, 770, 1011, 1233], "wildcard": [441, 668, 706, 707, 720, 744, 766, 770, 880], "regex": [441, 536, 537, 624, 626, 629, 631, 632, 633, 634, 643, 644, 651, 668, 718, 770, 882, 1154, 1156, 1159, 1161, 1162, 1163, 1164, 1173, 1174, 1181], "aa": [441, 624, 634, 718, 770, 882, 951, 1154, 1164, 1233, 1254], "cc": [441, 718, 770, 882, 951, 1233, 1254], "718282": [442, 770, 1012, 1233, 1253], "389056": [442, 770, 1012, 1233, 1253], "54": [442, 770, 1047, 1233, 1253, 1261], "59815": [442, 770, 1253], "extrem": [444, 588, 770, 1015, 1123, 1233], "expressioin": [444, 770, 1015, 1233], "group_col": [447, 686, 770], "g1": [447, 686, 770], "g2": [447, 686, 770], "lt": [447, 686, 770, 1233], "gte": [447, 686, 770], "n_1": [447, 770], "n_2": [447, 770], "n_3": [447, 770], "exprlistnamespac": [449, 770], "divis": [451, 680, 770, 1253], "truediv": [451, 770], "subtli": [451, 770], "intuit": [451, 770, 882], "backward_fil": [452, 611, 770], "enclos": [453, 770], "350": [459, 566, 770, 1125, 1233], "650": [459, 566, 770], "850": [459, 566, 770], "9774092659964970114": [460, 770], "13614470193936745724": [460, 770], "1101441246220388612": [460, 770], "11638928888656214026": [460, 770], "13382926553367784577": [460, 770], "bin_count": [462, 770, 1028, 1233], "include_categori": [462, 770, 1028, 1233], "include_breakpoint": [462, 770, 1028, 1233], "occurr": [462, 470, 473, 684, 770, 1028, 1036, 1039, 1222, 1233], "cum_sum": [464, 672, 709, 770, 812, 876, 1046, 1233], "interpolationmethod": [465, 770, 1030, 1233], "regrid": [465, 770], "grid": [465, 770], "df_original_grid": [465, 770], "grid_point": [465, 770], "df_new_grid": [465, 770], "a_interpol": [466, 770], "285714": [466, 770, 1031, 1233], "714286": [466, 770, 1031, 1233], "satisfi": [467, 770, 1032, 1233], "conflat": [467, 770], "between_ab": [467, 770], "finit": [469, 680, 702, 770, 1035, 1233], "optional_memb": [471, 770, 1037, 1233], "infinit": [472, 680, 770, 1038, 1233], "_isnan": [474, 770], "b_isnan": [474, 770], "_is_not_nan": [475, 770], "b_is_not_nan": [475, 770], "_not_nul": [476, 770], "a_not_nul": [476, 770], "b_not_nul": [476, 770], "_isnul": [477, 770], "a_isnul": [477, 770], "b_isnul": [477, 770], "fisher": [479, 617, 770, 1047, 1148, 1233], "fourth": [479, 770, 1047, 1233], "subtract": [479, 672, 770, 1047, 1233], "distribut": [479, 617, 770, 1047, 1148, 1233], "elimin": [479, 770, 1047, 1233], "bias": [479, 617, 770, 1047, 1148, 1233], "scipi": [479, 617, 770, 1047, 1148, 1233, 1237], "stat": [479, 617, 770, 836, 876, 1047, 1148, 1233], "153061": [479, 770], "blindli": [493, 1059], "worth": [493, 1059], "enough": [493, 617, 770, 1059, 1148, 1233], "concat_list": [493, 717], "exprnamespac": 494, "cheaper": [496, 1062], "symmetr": [512, 1078], "sdiff": 512, "taken": [515, 647, 1081, 1177], "363961": [517, 1083], "n_field_strategi": [521, 1087], "tostructstrategi": [521, 1087], "first_non_nul": [521, 1087], "max_width": [521, 1087], "pre": [521, 530, 575, 742, 745, 761, 770, 1112, 1233], "eagerli": [521, 1241], "obtain": 521, "ok": 521, "longest": 521, "logarithm": [524, 525, 526, 770, 1090, 1091, 1092, 1233, 1253], "584963": [524, 770], "30103": [525, 770, 1253], "60206": [525, 770, 1253], "natur": [526, 770, 1092, 1233, 1253], "693147": [526, 770, 1090, 1092, 1233, 1253], "098612": [526, 770, 1090, 1092, 1233, 1253], "386294": [526, 770, 1092, 1233, 1253], "lowest": [527, 770], "9223372036854775808": [527, 770], "agg_list": [529, 770], "is_elementwis": [529, 770, 880], "returns_scalar": [529, 732, 770, 880], "whole": [529, 619, 620, 631, 770, 864, 876, 1161], "presum": [529, 770], "stai": [529, 770], "elementwis": [529, 588, 589, 591, 593, 595, 597, 600, 602, 604, 770, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1233], "third": [529, 770], "parti": [529, 770], "map_to_scalar": [529, 770], "invok": [529, 770], "assumpt": [529, 770], "someth": [529, 770], "bug": [529, 530, 770, 819, 864, 876, 1094, 1233], "argmax": [529, 770], "skip_nul": [530, 770, 1094, 1233], "pass_nam": [530, 770], "mapelementsstrategi": [530, 770], "thread_loc": [530, 770], "suppos": [530, 770, 1094, 1233], "sqrt": [530, 617, 671, 770, 1094, 1148, 1233, 1252], "field_nam": [530, 770, 1094, 1233], "with_field": [530, 770], "gil": [530, 770], "discourag": [530, 770], "loop": [530, 770], "a_times_2": [530, 770], "tip": [530, 770], "view": [530, 770], "again": [530, 770], "exprmetanamespac": [534, 538], "foo_bar": [534, 538, 648, 730, 1246], "foo_bar2": [534, 538], "_foo": 535, "allow_alias": 536, "bare": [536, 882], "foo_": [537, 648, 721], "raise_if_undetermin": 539, "computeerror": [539, 662, 1192], "e_filt": [539, 541], "e_sum_ov": [539, 541], "e_sum_slic": [539, 541], "order_bi": [542, 568, 770], "groupstorow": 542, "tree": [543, 801, 876], "undo": [544, 551, 552, 554, 556, 558, 559], "modulu": [547, 770], "xlog2": [549, 573, 770], "purpos": [550, 770, 791, 803, 876], "x_uniqu": [550, 770], "y_uniqu": [550, 770], "chain": [551, 552, 554, 556, 558, 559, 760], "a_revers": [552, 556, 584, 770], "b_revers": [552, 556, 584, 770], "rstrip": 552, "_revers": [552, 556, 584, 770], "reverse_": 554, "reverse_a": 554, "reverse_b": 554, "prefix_": 555, "prefix_a": 555, "prefix_b": 555, "_suffix": 557, "a_suffix": 557, "b_suffix": 557, "lowercas": [558, 663, 1193, 1254], "uppercas": [559, 666, 1196, 1254], "to_lowercas": 559, "poison": [560, 561, 770, 1103, 1104, 1233], "nanmax": [560, 561, 770, 1103, 1104, 1233], "inequ": [562, 770], "ne": [563, 770, 1233], "unari": [564, 770], "negat": [565, 770, 1106, 1233], "more_expr": [568, 696, 699, 700, 701, 770], "mapping_strategi": [568, 770], "windowmappingstrategi": [568, 770], "group_to_row": [568, 770], "outcom": [568, 770], "group_dtyp": [568, 770], "_max": [568, 770], "c_max": [568, 770], "_min": [568, 770], "c_min": [568, 770], "sort_bi": [568, 770], "percent": [569, 770, 1108, 1233], "090909": [569, 770], "extract_numb": [572, 770], "scale_negative_even": [572, 770], "expon": [573, 770, 1233, 1253], "x_squar": [573, 770], "x_invers": [573, 770], "allow_dupl": [575, 770, 1112, 1233], "duplicateerror": [575, 770, 1112, 1233], "cut": [575, 770, 1112, 1233], "566371": [577, 770], "424778": [577, 770], "283185": [577, 770], "141593": [577, 770, 889, 1233, 1253, 1256], "rankmethod": [578, 770, 1114, 1233], "ti": [578, 770, 1114, 1233], "competit": [578, 770, 1114, 1233], "immedi": [578, 693, 697, 711, 712, 714, 715, 726, 727, 742, 745, 752, 757, 758, 761, 770, 1114, 1233, 1242], "safe": [580, 770, 1116, 1233], "nodefault": [582, 770, 1118, 1233], "_nodefault": [582, 770, 1118, 1233], "no_default": [582, 770, 1118, 1233], "fruits_revers": [584, 770], "cars_revers": [584, 770], "rle_id": [585, 770, 1233], "rle": [586, 770, 1122, 1233], "rle_id_a": [586, 770], "rle_id_ab": [586, 770], "window_s": [588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 746, 747, 770, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1233], "multipli": [588, 589, 591, 593, 595, 597, 600, 602, 604, 671, 770, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1233], "rolling_sum": [588, 770, 1123, 1233], "nansum": [588, 770, 1123, 1233], "travers": [589, 591, 593, 595, 597, 600, 602, 604, 770, 1124, 1125, 1127, 1130, 1131, 1132, 1233], "vector": [589, 591, 593, 595, 597, 600, 602, 604, 770, 1124, 1125, 1127, 1130, 1131, 1132, 1233], "df_tempor": [590, 592, 594, 596, 598, 601, 603, 605, 770], "rolling_row_max": [590, 770], "2h": [590, 592, 594, 596, 598, 601, 603, 605, 770], "closur": [590, 592, 601, 603, 605, 770], "rolling_row_mean": [592, 770], "rolling_row_median": [594, 770], "rolling_row_min": [596, 770], "625": [597, 770], "rolling_row_quantil": [598, 770], "skew": [599, 770, 1129, 1233], "381802": [599, 770, 1129, 1233], "47033": [599, 770, 1129, 1233], "38180177416060584": [599, 770, 1129, 1233], "47033046033698594": [599, 770, 1129, 1233], "433013": [600, 770, 843, 876], "rolling_row_std": [601, 770], "rolling_row_sum": [603, 770], "39": [603, 722, 770], "57": [603, 770, 1133, 1233, 1256, 1261], "63": [603, 770], "69": [603, 770, 1047, 1233], "1875": [604, 770, 850, 876], "rolling_row_var": [605, 770], "figur": [607, 770, 839, 876, 1134, 1233], "01234": [607, 770, 1134, 1233], "012": [607, 770, 1134, 1233], "1200": [607, 770, 1134, 1233], "searchsortedsid": [609, 770, 1137, 1233], "leftmost": [609, 770, 1137, 1233, 1254], "rightmost": [609, 770, 1137, 1233, 1254], "six": [609, 770], "extrema": [612, 770, 1142, 1233], "112": [612, 770, 1261], "129": [612, 770], "8589934592": [612, 770], "1073741824": [612, 770], "175201": [616, 770, 1147, 1233], "unimod": [617, 770, 1148, 1233], "skewtest": [617, 770, 1148, 1233], "speak": [617, 770, 1148, 1233], "g_1": [617, 770, 1148, 1233], "m_3": [617, 770, 1148, 1233], "m_2": [617, 770, 1148, 1233], "m_i": [617, 770, 1148, 1233], "sum_": [617, 770, 1148, 1233], "texttt": [617, 770, 1148, 1233], "k_3": [617, 770, 1148, 1233], "k_2": [617, 770, 1148, 1233], "343622": [617, 770], "value1": [620, 770], "value2": [620, 770], "attain": [620, 770], "414214": [621, 770, 1151, 1233, 1253], "hyphen": [623, 1153], "sensit": [624, 632, 634, 643, 644, 1154, 1162, 1164, 1173, 1174], "ilmsuxu": [624, 631, 632, 634, 643, 644, 1154, 1161, 1162, 1164, 1173, 1174], "default_match": [624, 634], "insensitive_match": [624, 634], "crab": [624, 634, 1154, 1164], "dog": [624, 663, 666, 701, 1154, 1193, 1196], "rab": [624, 646, 1154, 1176, 1250], "ascii_case_insensit": [625, 645, 1155, 1175], "aho": [625, 645, 1155, 1175], "corasick": [625, 645, 1155, 1175], "insensit": [625, 632, 643, 644, 645, 882, 1154, 1155, 1162, 1164, 1173, 1174, 1175], "set_fmt_str_length": [625, 645, 1155, 1175], "lyric": [625, 645, 1155, 1175], "everybodi": [625, 645, 1155, 1175], "tell": [625, 645, 1155, 1175], "me": [625, 645, 1155, 1175], "feel": [625, 645, 1155, 1175], "love": [625, 645, 1155, 1175], "tonight": [625, 645, 1155, 1175], "success": [626, 632, 1156, 1162], "overlap": [626, 632, 1156, 1162], "bla": [626, 632, 1156, 1162], "asd": [626, 632, 1156, 1162], "678": [626, 632, 1156, 1162], "910t": [626, 632, 1156, 1162], "count_digit": 626, "dbc": [626, 1156], "3xy": [626, 1156], "1zy3": [626, 1156], "strings_hex": 628, "666f6f": [628, 1158], "626172": [628, 1158], "mango": [629, 651, 1159, 1181], "has_suffix": 629, "le": [629, 770, 1233], "nu": 629, "group_index": [631, 1161], "captur": [631, 633, 643, 644, 1161, 1163, 1173, 1174], "nthose": [631, 1161], "nodd": [631, 1161], "nthe": [631, 1161], "odd": 631, "vote": [631, 633, 1161, 1163], "ballon_dor": [631, 633, 1161, 1163], "404": [631, 633, 1161, 1163], "ref": [631, 633, 1161, 1163], "unknown": [631, 730, 1161], "candid": [631, 633, 1161, 1163], "messi": [631, 633, 1161, 1163], "ronaldo": [631, 1161], "haystack": [632, 1162], "email": [632, 1162], "real": [632, 1162], "some_account": [632, 1162], "somewher": [632, 1162], "net": [632, 1162], "jkl": [632, 1162], "uvw": [632, 1162], "co": [632, 770, 1162, 1233, 1252], "uk": [632, 1162], "address": 632, "xi": [632, 1162], "quantifi": [632, 1162], "email_part": [632, 1162], "extracted_nr": 632, "unnam": [633, 1163], "weghorst": [633, 1163], "err": 633, "lobster": [634, 1164], "crustaceon": [634, 1164], "pat": [634, 1164], "bc": [634, 644, 753, 1164], "aeiuo": [634, 1164], "find_pat": 634, "fewer": [635, 658, 803, 876, 1165, 1188], "pear": [635, 647, 658, 1165, 1177, 1188], "papaya": [635, 647, 658, 1165, 1177, 1188], "dragonfruit": [635, 647, 658, 1165, 1177, 1188], "s_head_5": 635, "papai": [635, 1165], "drago": [635, 1165], "s_head_n": 635, "pea": 635, "papa": 635, "dragon": 635, "json_path_match": [637, 1167], "jsonpath": [637, 638, 1167, 1168], "json_path": [638, 1168], "json_val": [638, 1168], "len_char": [639, 1169], "_o": [639, 640, 1169, 1170], "caf\u00e9": [639, 640, 882, 1169, 1170], "345": [639, 640, 1169, 1170], "\u6771\u4eac": [639, 640, 882, 1169, 1170], "n_byte": [639, 640, 1254], "n_char": [639, 640, 1254], "fill_char": [641, 642, 1171, 1172], "pad": [641, 642, 667, 1171, 1172, 1197], "reach": [641, 642, 667, 1171, 1172, 1197], "pad_start": [641, 667, 1171, 1197], "cow": [641, 642, 1171, 1172], "monkei": [641, 642, 1171, 1172], "hippopotamu": [641, 642, 1171, 1172], "pad_end": [642, 1172], "zfill": [642, 687, 770, 1172], "replace_al": [643, 1173], "dollar": [643, 644, 1173, 1174], "123abc": [643, 1173, 1174], "abc456": [643, 1173, 1174, 1254], "hat": [643, 644, 1173, 1174], "hut": [643, 644, 1173, 1174], "vowel": [643, 644, 1173, 1174], "bad": [643, 644, 1173, 1174], "bud": [643, 644, 1173, 1174], "citi": [643, 644], "philadelphia": [643, 644], "season": [643, 644], "spring": [643, 644], "summer": [643, 644], "autumn": [643, 644], "winter": [643, 644], "weather": [643, 644, 1173, 1174], "raini": [643, 644, 1173, 1174], "sunni": [643, 644, 1173, 1174], "cloudi": [643, 644], "snowi": [643, 644], "foggi": [643, 644, 1173, 1174], "abcabc": 644, "123a123": 644, "replace_with": [645, 1175], "broadcast": [645, 882, 1175], "removes_pronoun": 645, "man": [646, 1176], "ana": [646, 1176], "oof": [646, 1176, 1250, 1254], "anan": [646, 1176], "am": [646, 1176], "ear": [647, 658, 1177], "aya": [647, 1177, 1188], "uit": [647, 1177], "ya": [647, 1177], "onf": [647, 1177], "foo_bar_baz": 648, "split_inclus": 648, "bar_": 648, "a_1": [649, 1179, 1209, 1233], "d_4": [649, 1179], "rename_field": [649, 650, 1179, 1180], "first_part": [649, 650, 1179, 1180], "second_part": [649, 650, 1179, 1180], "remaind": [650, 1180, 1253], "app": [651, 1181], "has_prefix": 651, "nworld": 652, "foo_strip": 652, "ow": 652, "hell": [652, 1182], "rld": [652, 654, 1184], "strip_suffix": [653, 655], "strip_chars_start": [653, 655], "foo_strip_end": 653, "oldw": 653, "he": 653, "abcdeff": 653, "fed": 653, "strip_prefix": [654, 656], "strip_chars_end": [654, 656], "tworld": [654, 1182, 1184], "foo_strip_start": 654, "wod": [654, 1184], "aabcdef": 654, "cba": 654, "foobar": [655, 656, 1185, 1186, 1254], "foofoobar": [655, 1185], "foobarbar": [656, 1186], "polarstemporaltyp": [657, 1187], "penalti": [657, 659, 660, 1187, 1189, 1190], "clean": [657, 659, 660, 1187, 1189, 1190], "beforehand": [657, 659, 660, 1187, 1189, 1190], "certainli": [657, 659, 660, 1187, 1189, 1190], "00z": [657, 660, 1187, 1190], "sun": [657, 1187], "jul": [657, 1187], "s_tail_5": 658, "apaya": [658, 1188], "s_tail_n": 658, "paya": 658, "nfruit": 658, "tz": [660, 1190], "inference_length": [661, 1191], "3420": [661, 1191], "120134": [661, 1191], "3212": [661, 1191], "143": [661, 1191, 1261], "numbers_decim": 661, "radix": [662, 1192], "parseerror": [662, 1192], "silent": [662, 1192], "110": [662, 1192], "fa1e": [662, 1192], "ff00": [662, 1192], "cafe": [662, 1192], "64030": [662, 1192], "65280": [662, 1192], "51966": [662, 1192], "variant": [663, 665, 666], "foo_low": [663, 1254], "titlecas": [665, 1195], "sing": [665, 1195], "welcom": [665, 1195], "THERE": [665, 1195], "NO": [665, 882, 1195], "foo_titl": 665, "There": [665, 1195, 1258], "foo_upp": [666, 1254], "999999": [667, 713, 756, 757, 758, 882, 1197], "0123": [667, 1197], "more_nam": [668, 766], "__getitem__": 668, "struct_col": [668, 670], "cd": [668, 670, 882], "expans": 668, "www": 670, "xxx": 670, "yyi": 670, "zzz": 670, "obvious": 670, "structfieldnotfounderror": 670, "coord": 671, "y_mul": 671, "761594": [676, 770, 1207, 1233], "replic": [677, 770, 1216, 1233], "vals_phys": [677, 770], "_top_by_a": [679, 770], "_top_by_b": [679, 770], "a_top_by_a": [679, 770], "b_top_by_a": [679, 770], "c_top_by_a": [679, 770], "a_top_by_b": [679, 770], "b_top_by_b": [679, 770], "c_top_by_b": [679, 770], "floordiv": [680, 770], "ieee": [680, 770], "754": [680, 770], "mathemat": [680, 717, 770, 1252], "undefin": [680, 770], "On": [680, 770], "operand": [680, 770], "infin": [680, 770], "value_count": [682, 770, 1233], "9223372036854775807": [683, 770], "proport": [684, 770, 1222, 1233], "binary_str": [687, 770], "250": [687, 770, 1125, 1233, 1251, 1261], "bin_x": [687, 770], "bin_i": [687, 770], "xor_xi": [687, 770], "bin_xor_xi": [687, 770], "00001010": [687, 770], "00001011": [687, 770], "00001000": [687, 770], "00000010": [687, 770], "11111010": [687, 770], "00000011": [687, 770], "249": [687, 770], "11111001": [687, 770], "01000010": [687, 770], "00000100": [687, 770], "01000110": [687, 770], "AND": [688, 689, 749, 882], "OR": [690, 691, 806, 876, 882], "any_horizont": 690, "polarsintegertyp": [693, 726, 727], "arctan": [694, 695, 770, 1233], "angl": [694, 695], "plane": [694, 695], "rai": [694, 695], "atan2": [694, 695, 1252], "356194": [694, 695, 1256], "arctan2": 695, "atan2d": [695, 1252], "135": [695, 1256], "arg_tru": [697, 770, 1233], "oppos": 698, "mimic": 700, "a_lag_": 700, "a_rol": 700, "swim": 701, "walk": 701, "full_sent": 701, "correlationmethod": 702, "propagate_nan": 702, "spearman": 702, "544705": 702, "covari": [704, 747, 770, 880], "acc": [706, 707, 720, 744], "include_init": 706, "accumul": [706, 707, 720, 744], "fn": [706, 707, 720, 744], "new_valu": [706, 707, 720, 744], "cum_reduc": 706, "cumsum_horizont": 708, "1w2d": [711, 712], "1985": [711, 714], "australia": 713, "sydnei": 713, "aedt": 713, "america": 714, "new_york": 714, "est": 714, "contrast": 716, "offset_bi": 716, "sometim": [716, 769], "tbl_width_char": 716, "120": [716, 1256], "add_week": 716, "add_dai": 716, "add_second": 716, "add_milli": 716, "add_hour": 716, "002": [716, 994, 995, 997], "add_calendar_dai": 716, "add_calendar_month": 716, "mo": 716, "add_calendar_year": 716, "a_b_doubl": 717, "presenc": [719, 728, 882, 1025, 1233], "f_string": 721, "placehold": 721, "hello_": 721, "_world": 721, "_bar_": 721, "foo_a_bar_1": 721, "foo_b_bar_2": 721, "foo_c_bar_3": 721, "timestep": 722, "1666683077": 722, "1666683099": 722, "12345": [722, 936, 1020, 1133, 1233], "12346": 722, "agg_group": [723, 770], "allow_object": 730, "valueexcept": 730, "test_func": 731, "list_of_seri": 732, "my_custom_aggreg": 732, "understood": 732, "lf1": [749, 842, 876, 1245, 1247, 1259], "lf2": [749, 842, 876, 1245, 1247, 1259], "888": [749, 842, 876], "freeli": [749, 842, 876, 882], "c_c_c": [749, 842, 876], "BY": [749, 842, 876, 1241, 1244, 1250, 1257, 1258], "pl_frame": 749, "pd_frame": 749, "pa_tabl": 749, "from_arrai": 749, "power": [750, 1233, 1253], "a_a": 750, "a_txt": 750, "605551": 751, "605551275463989": 751, "my_struct": 752, "statement": [760, 1246, 1259], "elif": 760, "met": 760, "own": [760, 1214, 1233, 1261], "isn": 760, "technic": 766, "further": 766, "__call__": 766, "lookup": 766, "__getattr__": 766, "idiomat": [766, 794, 800, 833, 851, 864, 876], "quick": [766, 951, 1233, 1261], "prototyp": 766, "keystrok": 766, "drawback": 766, "readabl": 766, "hamburg": 766, "and_": 770, "arcco": [770, 1233], "arccosh": [770, 1233], "arcsin": [770, 1233], "arcsinh": [770, 1233], "arctanh": [770, 1233], "arg_max": [770, 1233], "arg_min": [770, 1233], "arg_sort": [770, 1233], "arg_uniqu": [770, 1233], "cbrt": [770, 1233, 1252], "clip": [770, 1233], "cosh": [770, 1233], "cot": [770, 1233, 1252], "cum_count": [770, 1233], "cum_max": [770, 1233], "cum_min": [770, 1233], "cumulative_ev": [770, 1233], "entropi": [770, 1233], "eq_miss": [770, 1233], "ewm_mean": [770, 1233], "ewm_mean_bi": [770, 1233], "ewm_std": [770, 1233], "ewm_var": [770, 1233], "extend_const": [770, 1233], "flatten": 770, "from_json": 770, "ge": [770, 1233], "has_nul": [770, 1025, 1233], "hist": [770, 1233, 1237], "implod": [770, 1233, 1250], "inspect": [770, 876], "interpolate_bi": [770, 1233], "is_between": [770, 1233], "is_finit": [770, 1233], "is_first_distinct": [770, 1233], "is_infinit": [770, 1233], "is_last_distinct": [770, 1233], "is_nan": [770, 1233], "is_not_nan": [770, 1233], "is_not_nul": [770, 1233], "kurtosi": [770, 1233], "log10": [770, 1233, 1252], "log1p": [770, 1233, 1252], "map_batch": [770, 876], "mod": [770, 1252], "mul": 770, "nan_max": [770, 1233], "nan_min": [770, 1233], "ne_miss": [770, 1233], "or_": 770, "pct_chang": [770, 1233], "peak_max": [770, 1233], "peak_min": [770, 1233], "pow": [770, 1233, 1252], "register_plugin": 770, "lib": [770, 1208, 1233], "input_wildcard_expans": [770, 880], "cast_to_supertyp": [770, 880], "pass_name_to_appli": [770, 880], "changes_length": [770, 880], "register_plugin_funct": [770, 880], "guid": [770, 880, 1261], "serializ": [770, 880], "ran": [770, 880], "highli": [770, 880], "unsaf": [770, 880], "reinterpret": [770, 1233], "repeat_bi": 770, "rolling_map": [770, 1233], "rolling_max": [770, 1233], "rolling_max_bi": 770, "rolling_mean": [770, 1233], "rolling_mean_bi": 770, "rolling_median": [770, 1233], "rolling_median_bi": 770, "rolling_min": [770, 1233], "rolling_min_bi": 770, "rolling_quantil": [770, 1233], "rolling_quantile_bi": 770, "rolling_skew": [770, 1233], "rolling_std": [770, 1233], "rolling_std_bi": 770, "rolling_sum_bi": 770, "rolling_var": [770, 1233], "rolling_var_bi": 770, "round_sig_fig": [770, 1233], "search_sort": [770, 1233], "shrink_dtyp": [770, 1233], "sin": [770, 1233, 1252], "sinh": [770, 1233], "tan": [770, 1233, 1252], "to_phys": [770, 933, 1233], "unique_count": [770, 1233], "xor": 770, "expos": 782, "miscellan": 782, "claus": [782, 1250, 1257], "parametr": 782, "hit": [787, 876], "node": [787, 791, 812, 819, 823, 828, 830, 876], "job": [787, 876], "_eager": [791, 876], "_kwarg": [791, 876], "inprocessqueri": [791, 876], "cancel": [791, 876], "set_streaming_chunk_s": [791, 876], "collect_all_async": [792, 876], "symmetri": [794, 800, 833, 851, 876], "snippet": [799, 876], "explainformat": [801, 876], "plain": [801, 876], "tree_format": [801, 876], "Be": [803, 876], "suscept": [803, 876], "lazygroupbi": [809, 810, 832, 876], "other_lf": [814, 876], "jan": [815, 876], "1st": [815, 876], "12th": [815, 876], "validate_output_schema": [819, 876], "streamabl": [819, 823, 876], "paramount": [819, 876], "elig": [819, 876], "invari": [819, 876], "upheld": [819, 876], "100_000": [819, 876], "199998": [819, 876], "199996": [819, 876], "199994": [819, 876], "199992": [819, 876], "show_plot": [828, 876], "truncate_nod": [828, 876], "figsiz": [828, 839, 876], "gantt": [828, 876], "group_by_partit": [828, 876], "470": [828, 876], "475": [828, 876], "1964": [828, 876], "swap": [830, 876], "mapfunct": [836, 876], "dataframescan": [836, 876], "output_schema": [836, 876], "output_path": [839, 876], "raw_output": [839, 876], "render": [839, 876], "wors": [841, 876], "290994": [843, 876], "118034": [843, 876], "new_lf": [849, 876], "extern": [854, 876], "lf_other": [854, 876], "afoo": [854, 876], "cfoo": [854, 876], "train_lf": [854, 876], "feature_0": [854, 876], "feature_1": [854, 876], "test_lf": [854, 876], "_train": [854, 876], "feature_0_train": [854, 876], "opaqu": 864, "my_column": 864, "struct_seri": 864, "lf3": [876, 1245], "lf4": [876, 1245], "lf5": 876, "lf6": 876, "sink_csv": 876, "sink_ipc": 876, "sink_ndjson": 876, "sink_parquet": 876, "with_context": 876, "resourc": 880, "plugin_path": 880, "function_nam": 880, "emploi": 882, "complement": 882, "plenti": 882, "cde": [882, 1254], "fgg": 882, "jjk": 882, "lmn": 882, "opp": 882, "qqr": 882, "by_dtyp": 882, "as_expr": 882, "dispatch": 882, "1_234_500": 882, "5_000_555": 882, "1234500": 882, "5000555": 882, "ascii_onli": 882, "ignore_spac": 882, "alphabet": [882, 1261], "accent": 882, "idiograph": 882, "no1": 882, "espresso": 882, "latt": 882, "mocha": 882, "hmm": 882, "\u90fd\u5e02": 882, "\u5927\u962a": 882, "\u4eac\u90fd": 882, "kanji": 882, "alphanumer": 882, "1st_col": 882, "00prefix": 882, "bb": [882, 951, 1233, 1254, 1258], "n_even": 882, "invert": 882, "by_nam": 882, "by_index": 882, "4_500_000": 882, "4500000": 882, "3265500": 882, "c00": 882, "c01": 882, "c02": 882, "c96": 882, "c97": 882, "c98": 882, "c99": 882, "c20": 882, "c40": 882, "c60": 882, "c80": 882, "c75": 882, "c50": 882, "c25": 882, "ones": 882, "51": 882, "c03": 882, "c05": 882, "c93": 882, "c95": 882, "46": 882, "require_al": 882, "zap": 882, "moos": 882, "bear": 882, "2031": 882, "tokyo_tz": 882, "utc_tz": 882, "tstamp_tokyo": 882, "123465": 882, "tstamp_utc": 882, "999000": 882, "666000": 882, "tstamp": 882, "600000": 882, "123000": 882, "666": 882, "0005": 882, "5555": 882, "00050": 882, "55550": 882, "\u0967\u096f\u096f\u096f": 882, "\u0968\u0966\u096d\u096d": 882, "3000": 882, "td1": 882, "987000": 882, "td2": 882, "456789": [882, 987], "td3": 882, "2m": [882, 977], "456m": 882, "7d": 882, "456789\u00b5": 882, "18d": 882, "999999\u00b5": 882, "23h": 882, "987m": 882, "14d": 882, "16h": 882, "39m": 882, "21d": 882, "456001\u00b5": 882, "simpler": 882, "expand_selector": 882, "broader": 882, "colz": [882, 1261], "desc": [882, 1241, 1244, 1248, 1250], "everyth": 882, "signed_integ": 882, "unsigned_integ": 882, "is_selector": 882, "obj": 882, "3456": 882, "7654": 882, "4321": 882, "include_categor": 882, "2345": 882, "292432": [890, 1233], "549306": [894, 1233], "innter": 908, "field_2": [921, 1087], "n00": [921, 1087], "n01": [921, 1087], "n02": [921, 1087], "hexadecim": [925, 926], "aaaa": [925, 926], "8a": [925, 926], "aad": [925, 926], "invalid_valu": 925, "44225": [935, 1233], "56789": [936, 1020, 1133, 1233], "901234": [936, 1020, 1133, 1233], "1232e": [941, 943, 1233], "1656e15": [943, 1233], "581139": [951, 1233], "arraylik": [953, 1233], "ser": [962, 963, 989], "kathmandu": [962, 963, 989], "0545": [962, 963, 989], "500m": [973, 975, 981], "date_minus_1y_2mon": 982, "165": [986, 999], "round_str": 986, "round_td": 986, "111110": 987, "765431": 987, "11111": 987, "timestamp_n": 990, "978307200000000000": 990, "978393600000000000": 990, "978480000000000000": 990, "005": [1005, 1233], "06293300616044681": [1005, 1233], "65": [1005, 1233], "8568409950394724": [1005, 1233], "4000000": [1007, 1233], "814697265625": [1007, 1233], "085537": [1012, 1233], "sorted_asc": [1019, 1233], "sorted_desc": [1019, 1233], "bitmask": [1025, 1233], "absenc": [1025, 1233], "confirm": [1025, 1233], "10734580197236529959": [1026, 1233], "3022416320763508302": [1026, 1233], "13756996518000038261": [1026, 1233], "grade": [1047, 1233], "79": [1047, 1233], "93": [1047, 1233], "0522623626787952": [1047, 1233], "9477376373212048": [1047, 1233], "1040361802642726": [1047, 1233], "2147483648": [1093, 1233], "pythonliter": [1095, 1096, 1097, 1098, 1136, 1233], "166667": [1108, 1233], "142857": [1108, 1233], "1152921504606846976": [1116, 1233], "17293822569102704640": [1116, 1233], "18446744073709551614": [1116, 1233], "150": [1125, 1233], "450": [1125, 1233], "dev": [1130, 1233], "527525": [1130, 1233], "frequent": [1136, 1138, 1233], "2246e": [1146, 1206, 1233], "34776706224699483": [1148, 1233], "732051": [1151, 1233], "idx_rx": 1164, "idx_lit": 1164, "3rd": [1165, 1188], "pap": 1165, "dragonfr": 1165, "orld": 1183, "gonfruit": 1188, "6331e16": [1206, 1233, 1256], "int64arrai": [1208, 1233], "a_2": [1209, 1233], "a_3": [1209, 1233], "s_from_str_repr": [1211, 1233], "zero_copy_onli": [1214, 1233], "127": [1221, 1233], "position": 1233, "scenario": 1233, "chunk_length": 1233, "get_chunk": 1233, "has_valid": 1233, "is_sort": 1233, "new_from_index": 1233, "histogram": [1233, 1237], "kde": [1233, 1237], "037037": 1233, "015625": 1233, "godfath": 1241, "1972": 1241, "6_000_000": 1241, "134_821_952": 1241, "dark": 1241, "knight": 1241, "2008": 1241, "185_000_000": 1241, "533_316_061": 1241, "schindler": 1241, "1993": 1241, "22_000_000": 1241, "96_067_179": 1241, "pulp": 1241, "fiction": 1241, "1994": 1241, "8_000_000": 1241, "107_930_000": 1241, "shawshank": 1241, "redempt": 1241, "25_000_000": 1241, "28_341_469": 1241, "release_year": 1241, "budget": 1241, "gross": 1241, "imdb_scor": 1241, "ctx": [1241, 1243, 1244, 1245, 1246, 1247, 1258], "film": 1241, "decad": [1241, 1255], "total_gross": 1241, "n_film": 1241, "533316061": 1241, "232338648": 1241, "134821952": 1241, "df_panda": 1242, "compatibleframetyp": [1243, 1245, 1258], "register_glob": [1243, 1245, 1247, 1258], "register_mani": [1243, 1244, 1247], "unregist": [1243, 1244, 1245, 1258, 1260], "frame_data": [1243, 1246], "all_compat": 1244, "named_fram": [1245, 1258], "tbl1": [1245, 1247], "tbl2": [1245, 1247], "tbl3": 1245, "tbl4": 1245, "hello_world": 1246, "hello_data": 1246, "persist": 1247, "tbl0": 1247, "misc": 1247, "testing1234": 1247, "test1": 1247, "test2": 1247, "test3": 1247, "delet": [1248, 1260], "greatest": [1249, 1252], "bar_avg": 1249, "n_bar": 1249, "n_foo_uniqu": 1249, "ff": 1249, "bar_max": 1249, "bar_median": 1249, "bar_min": 1249, "stdev_samp": 1249, "stddev_samp": 1249, "foo_std": 1249, "bar_std": 1249, "429101": 1249, "686241": 1249, "foo_sum": [1249, 1250], "bar_sum": 1249, "var_samp": 1249, "foo_var": 1249, "bar_var": 1249, "arr_foo": 1250, "arr_bar": 1250, "has_two": 1250, "foo_at_1": 1250, "bar_at_2": 1250, "n_elem": 1250, "min_elem": 1250, "foo_mean": 1250, "s_foo": 1250, "s_bar": 1250, "foo_uniqu": 1250, "max_elem": 1250, "expr1": [1251, 1258], "expr2": [1251, 1258], "avg": 1252, "stddev": 1252, "array_agg": 1252, "array_contain": 1252, "array_get": 1252, "array_length": 1252, "array_low": 1252, "array_mean": 1252, "array_revers": 1252, "array_sum": 1252, "array_to_str": 1252, "array_uniqu": 1252, "array_upp": 1252, "IF": 1252, "ifnul": 1252, "nullif": 1252, "div": 1252, "log2": 1252, "bit_length": 1252, "initcap": 1252, "ltrim": 1252, "octet_length": 1252, "regexp_lik": 1252, "rtrim": 1252, "strpo": 1252, "date_part": 1252, "trigonometri": [1252, 1257], "aco": 1252, "acosd": 1252, "asin": 1252, "asind": 1252, "atan": 1252, "atand": 1252, "cotd": 1252, "cosd": 1252, "sind": 1252, "tand": 1252, "quotient": 1253, "awai": 1253, "\ud835\udf0b": 1253, "abs_a": 1253, "cbrt_a": 1253, "ceil_a": 1253, "a_div_2": 1253, "a_div_5": 1253, "exp_a": 1253, "floor_a": 1253, "ln_a": 1253, "log16_a": 1253, "a_log2": 1253, "log10_a": 1253, "log1p_a": 1253, "609438": 1253, "a_mod_2": 1253, "x_pow_8": 1253, "65536": 1253, "81": 1253, "x_round": 1253, "x_round_1": 1253, "sign_x": 1253, "4096": 1253, "sqrt_x": 1253, "togeth": 1254, "interleav": 1254, "capit": 1254, "strpost": 1254, "portion": 1254, "dddd": 1254, "n_bit": 1254, "ww": [1254, 1260], "aazz": 1254, "byi": 1254, "cxx": 1254, "ddww": 1254, "ends_a": 1254, "abcd": 1254, "efgh": 1254, "ijkl": 1254, "mnop": 1254, "foo1": 1254, "bar2": 1254, "char_length": 1254, "character_length": 1254, "iso_lang": 1254, "de": 1254, "ru": 1254, "wei\u00df": 1254, "\u0441\u0438\u043d\u0438\u0439": 1254, "amarillo": 1254, "abc123": 1254, "4ab4a": 1254, "321cba": 1254, "ends_in_digit": 1254, "11aabb": 1254, "bcbc45": 1254, "c123": 1254, "11aa": 1254, "c45": 1254, "grape": 1254, "elppa": 1254, "ananab": 1254, "egnaro": 1254, "eparg": 1254, "fghi": 1254, "jklmn": 1254, "mn": 1254, "avocado": 1254, "starts_a": 1254, "pos_a": 1254, "foo_3_4": 1254, "ple": 1254, "nana": 1254, "ang": 1254, "ap": 1254, "8601": 1255, "str_date": 1255, "1969": 1255, "millennium": 1255, "millennia": 1255, "centuri": 1255, "isoyear": 1255, "mon": 1255, "dayofyear": 1255, "doi": 1255, "dayofweek": 1255, "dow": 1255, "isoweek": 1255, "isodow": 1255, "sec": [1255, 1261], "2026": 1255, "196": 1255, "202": 1255, "207": 1255, "rad": 1256, "094395": 1256, "047198": 1256, "deg": 1256, "848062": 1256, "523599": 1256, "107149": 1256, "atan2_ab": 1256, "927295": 1256, "270": 1256, "atan2d_ab": 1256, "434949": 1256, "963757": 1256, "457658": 1256, "642093": 1256, "636253": 1256, "289962": 1256, "416147": 1256, "540302": 1256, "712389": 1256, "introduct": 1257, "granular": 1258, "sql_expr": 1258, "incorpor": 1258, "mediat": 1258, "polars_df": 1258, "pandas_df": 1258, "polars_seri": 1258, "pyarrow_t": 1258, "c_total": 1258, "all_data": 1258, "ON": 1258, "uint4": 1258, "fragment": 1258, "execute_glob": 1258, "two_a": 1258, "__enter__": 1258, "__exit__": 1258, "exc_typ": 1258, "baseexcept": 1258, "exc_val": 1258, "exc_tb": 1258, "tracebacktyp": 1258, "df_a": 1258, "df_b": 1258, "value_a": 1258, "value_b": 1258, "compos": 1259, "david": 1259, "new_tabl": 1260, "existing_t": 1260, "old_tabl": 1260, "some_t": 1260, "machin": 1261, "xdist": 1261, "hardwar": 1261, "setup": 1261, "numeric_dtyp": 1261, "test_numer": 1261, "is_numer": 1261, "col4": 1261, "29096": 1261, "485": 1261, "2147483647": 1261, "8257e14": 1261, "7508": 1261, "37338": 1261, "7264": 1261, "16996": 1261, "121": 1261, "361": 1261, "63204": 1261, "1443e235": 1261, "conform": 1261, "st": 1261, "ascii_lett": 1261, "id_char": 1261, "ccy": 1261, "sampled_from": 1261, "gbp": 1261, "jpy": 1261, "price": 1261, "min_valu": 1261, "max_valu": 1261, "test_price_calcul": 1261, "a101": 1261, "8nin": 1261, "qhoo": 1261, "714": 1261, "544": 1261, "i0e0": 1261, "uint8_pair": 1261, "drawfn": 1261, "uint": 1261, "zip": 1261, "test_miscellan": 1261, "235": 1261, "87": 1261, "186": 1261, "174": 1261, "179": 1261, "213": 1261, "149": 1261, "221": 1261, "86": 1261, "255": 1261}, "objects": {"polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.DataFrame": [[170, 0, 1, "", "__dataframe__"], [171, 0, 1, "", "approx_n_unique"], [172, 0, 1, "", "bottom_k"], [173, 0, 1, "", "cast"], [174, 0, 1, "", "clear"], [175, 0, 1, "", "clone"], [176, 0, 1, "", "collect_schema"], [177, 1, 1, "", "columns"], [178, 0, 1, "", "corr"], [179, 0, 1, "", "count"], [180, 0, 1, "", "describe"], [181, 0, 1, "", "deserialize"], [182, 0, 1, "", "drop"], [183, 0, 1, "", "drop_in_place"], [184, 0, 1, "", "drop_nulls"], [185, 1, 1, "", "dtypes"], [186, 0, 1, "", "equals"], [187, 0, 1, "", "estimated_size"], [188, 0, 1, "", "explode"], [189, 0, 1, "", "extend"], [190, 0, 1, "", "fill_nan"], [191, 0, 1, "", "fill_null"], [192, 0, 1, "", "filter"], [193, 1, 1, "", "flags"], [194, 0, 1, "", "fold"], [195, 0, 1, "", "gather_every"], [196, 0, 1, "", "get_column"], [197, 0, 1, "", "get_column_index"], [198, 0, 1, "", "get_columns"], [199, 0, 1, "", "glimpse"], [200, 0, 1, "", "group_by"], [201, 0, 1, "", "group_by_dynamic"], [202, 0, 1, "", "hash_rows"], [203, 0, 1, "", "head"], [204, 1, 1, "", "height"], [205, 0, 1, "", "hstack"], [206, 0, 1, "", "insert_column"], [207, 0, 1, "", "interpolate"], [208, 0, 1, "", "is_duplicated"], [209, 0, 1, "", "is_empty"], [210, 0, 1, "", "is_unique"], [211, 0, 1, "", "item"], [212, 0, 1, "", "iter_columns"], [213, 0, 1, "", "iter_rows"], [214, 0, 1, "", "iter_slices"], [215, 0, 1, "", "join"], [216, 0, 1, "", "join_asof"], [217, 0, 1, "", "lazy"], [218, 0, 1, "", "limit"], [219, 0, 1, "", "map_rows"], [220, 0, 1, "", "max"], [221, 0, 1, "", "max_horizontal"], [222, 0, 1, "", "mean"], [223, 0, 1, "", "mean_horizontal"], [224, 0, 1, "", "median"], [225, 0, 1, "", "melt"], [226, 0, 1, "", "merge_sorted"], [227, 0, 1, "", "min"], [228, 0, 1, "", "min_horizontal"], [229, 0, 1, "", "n_chunks"], [230, 0, 1, "", "n_unique"], [231, 0, 1, "", "null_count"], [232, 0, 1, "", "partition_by"], [233, 0, 1, "", "pipe"], [234, 0, 1, "", "pivot"], [235, 0, 1, "", "product"], [236, 0, 1, "", "quantile"], [237, 0, 1, "", "rechunk"], [238, 0, 1, "", "rename"], [239, 0, 1, "", "replace_column"], [240, 0, 1, "", "reverse"], [241, 0, 1, "", "rolling"], [242, 0, 1, "", "row"], [243, 0, 1, "", "rows"], [244, 0, 1, "", "rows_by_key"], [245, 0, 1, "", "sample"], [246, 1, 1, "", "schema"], [247, 0, 1, "", "select"], [248, 0, 1, "", "select_seq"], [249, 0, 1, "", "serialize"], [250, 0, 1, "", "set_sorted"], [251, 1, 1, "", "shape"], [252, 0, 1, "", "shift"], [253, 0, 1, "", "shrink_to_fit"], [254, 0, 1, "", "slice"], [255, 0, 1, "", "sort"], [256, 0, 1, "", "sql"], [257, 0, 1, "", "std"], [312, 1, 1, "", "style"], [258, 0, 1, "", "sum"], [259, 0, 1, "", "sum_horizontal"], [260, 0, 1, "", "tail"], [261, 0, 1, "", "to_arrow"], [262, 0, 1, "", "to_dict"], [263, 0, 1, "", "to_dicts"], [264, 0, 1, "", "to_dummies"], [265, 0, 1, "", "to_init_repr"], [266, 0, 1, "", "to_jax"], [267, 0, 1, "", "to_numpy"], [268, 0, 1, "", "to_pandas"], [269, 0, 1, "", "to_series"], [270, 0, 1, "", "to_struct"], [271, 0, 1, "", "to_torch"], [272, 0, 1, "", "top_k"], [273, 0, 1, "", "transpose"], [274, 0, 1, "", "unique"], [275, 0, 1, "", "unnest"], [276, 0, 1, "", "unstack"], [277, 0, 1, "", "update"], [278, 0, 1, "", "upsample"], [279, 0, 1, "", "var"], [280, 0, 1, "", "vstack"], [281, 1, 1, "", "width"], [282, 0, 1, "", "with_columns"], [283, 0, 1, "", "with_columns_seq"], [284, 0, 1, "", "with_row_count"], [285, 0, 1, "", "with_row_index"], [31, 0, 1, "", "write_avro"], [32, 0, 1, "", "write_clipboard"], [33, 0, 1, "", "write_csv"], [34, 0, 1, "", "write_database"], [35, 0, 1, "", "write_delta"], [36, 0, 1, "", "write_excel"], [37, 0, 1, "", "write_ipc"], [38, 0, 1, "", "write_ipc_stream"], [39, 0, 1, "", "write_json"], [40, 0, 1, "", "write_ndjson"], [41, 0, 1, "", "write_parquet"]], "polars.Expr": [[316, 0, 1, "", "abs"], [317, 0, 1, "", "add"], [318, 0, 1, "", "agg_groups"], [319, 0, 1, "", "alias"], [320, 0, 1, "", "all"], [321, 0, 1, "", "and_"], [322, 0, 1, "", "any"], [323, 0, 1, "", "append"], [324, 0, 1, "", "approx_n_unique"], [325, 0, 1, "", "arccos"], [326, 0, 1, "", "arccosh"], [327, 0, 1, "", "arcsin"], [328, 0, 1, "", "arcsinh"], [329, 0, 1, "", "arctan"], [330, 0, 1, "", "arctanh"], [331, 0, 1, "", "arg_max"], [332, 0, 1, "", "arg_min"], [333, 0, 1, "", "arg_sort"], [334, 0, 1, "", "arg_true"], [335, 0, 1, "", "arg_unique"], [360, 0, 1, "", "backward_fill"], [366, 0, 1, "", "bottom_k"], [367, 0, 1, "", "bottom_k_by"], [368, 0, 1, "", "cast"], [370, 0, 1, "", "cbrt"], [371, 0, 1, "", "ceil"], [372, 0, 1, "", "clip"], [373, 0, 1, "", "cos"], [374, 0, 1, "", "cosh"], [375, 0, 1, "", "cot"], [376, 0, 1, "", "count"], [377, 0, 1, "", "cum_count"], [378, 0, 1, "", "cum_max"], [379, 0, 1, "", "cum_min"], [380, 0, 1, "", "cum_prod"], [381, 0, 1, "", "cum_sum"], [382, 0, 1, "", "cumulative_eval"], [383, 0, 1, "", "cut"], [384, 0, 1, "", "degrees"], [385, 0, 1, "", "deserialize"], [386, 0, 1, "", "diff"], [387, 0, 1, "", "dot"], [388, 0, 1, "", "drop_nans"], [389, 0, 1, "", "drop_nulls"], [434, 0, 1, "", "entropy"], [435, 0, 1, "", "eq"], [436, 0, 1, "", "eq_missing"], [437, 0, 1, "", "ewm_mean"], [438, 0, 1, "", "ewm_mean_by"], [439, 0, 1, "", "ewm_std"], [440, 0, 1, "", "ewm_var"], [441, 0, 1, "", "exclude"], [442, 0, 1, "", "exp"], [443, 0, 1, "", "explode"], [444, 0, 1, "", "extend_constant"], [445, 0, 1, "", "fill_nan"], [446, 0, 1, "", "fill_null"], [447, 0, 1, "", "filter"], [448, 0, 1, "", "first"], [449, 0, 1, "", "flatten"], [450, 0, 1, "", "floor"], [451, 0, 1, "", "floordiv"], [452, 0, 1, "", "forward_fill"], [453, 0, 1, "", "from_json"], [454, 0, 1, "", "gather"], [455, 0, 1, "", "gather_every"], [456, 0, 1, "", "ge"], [457, 0, 1, "", "get"], [458, 0, 1, "", "gt"], [459, 0, 1, "", "has_nulls"], [460, 0, 1, "", "hash"], [461, 0, 1, "", "head"], [462, 0, 1, "", "hist"], [463, 0, 1, "", "implode"], [464, 0, 1, "", "inspect"], [465, 0, 1, "", "interpolate"], [466, 0, 1, "", "interpolate_by"], [467, 0, 1, "", "is_between"], [468, 0, 1, "", "is_duplicated"], [469, 0, 1, "", "is_finite"], [470, 0, 1, "", "is_first_distinct"], [471, 0, 1, "", "is_in"], [472, 0, 1, "", "is_infinite"], [473, 0, 1, "", "is_last_distinct"], [474, 0, 1, "", "is_nan"], [475, 0, 1, "", "is_not_nan"], [476, 0, 1, "", "is_not_null"], [477, 0, 1, "", "is_null"], [478, 0, 1, "", "is_unique"], [479, 0, 1, "", "kurtosis"], [480, 0, 1, "", "last"], [481, 0, 1, "", "le"], [482, 0, 1, "", "len"], [483, 0, 1, "", "limit"], [524, 0, 1, "", "log"], [525, 0, 1, "", "log10"], [526, 0, 1, "", "log1p"], [527, 0, 1, "", "lower_bound"], [528, 0, 1, "", "lt"], [529, 0, 1, "", "map_batches"], [530, 0, 1, "", "map_elements"], [531, 0, 1, "", "max"], [532, 0, 1, "", "mean"], [533, 0, 1, "", "median"], [546, 0, 1, "", "min"], [547, 0, 1, "", "mod"], [548, 0, 1, "", "mode"], [549, 0, 1, "", "mul"], [550, 0, 1, "", "n_unique"], [560, 0, 1, "", "nan_max"], [561, 0, 1, "", "nan_min"], [562, 0, 1, "", "ne"], [563, 0, 1, "", "ne_missing"], [564, 0, 1, "", "neg"], [565, 0, 1, "", "not_"], [566, 0, 1, "", "null_count"], [567, 0, 1, "", "or_"], [568, 0, 1, "", "over"], [569, 0, 1, "", "pct_change"], [570, 0, 1, "", "peak_max"], [571, 0, 1, "", "peak_min"], [572, 0, 1, "", "pipe"], [573, 0, 1, "", "pow"], [574, 0, 1, "", "product"], [575, 0, 1, "", "qcut"], [576, 0, 1, "", "quantile"], [577, 0, 1, "", "radians"], [578, 0, 1, "", "rank"], [579, 0, 1, "", "rechunk"], [580, 0, 1, "", "reinterpret"], [581, 0, 1, "", "repeat_by"], [582, 0, 1, "", "replace"], [583, 0, 1, "", "reshape"], [584, 0, 1, "", "reverse"], [585, 0, 1, "", "rle"], [586, 0, 1, "", "rle_id"], [587, 0, 1, "", "rolling"], [588, 0, 1, "", "rolling_map"], [589, 0, 1, "", "rolling_max"], [590, 0, 1, "", "rolling_max_by"], [591, 0, 1, "", "rolling_mean"], [592, 0, 1, "", "rolling_mean_by"], [593, 0, 1, "", "rolling_median"], [594, 0, 1, "", "rolling_median_by"], [595, 0, 1, "", "rolling_min"], [596, 0, 1, "", "rolling_min_by"], [597, 0, 1, "", "rolling_quantile"], [598, 0, 1, "", "rolling_quantile_by"], [599, 0, 1, "", "rolling_skew"], [600, 0, 1, "", "rolling_std"], [601, 0, 1, "", "rolling_std_by"], [602, 0, 1, "", "rolling_sum"], [603, 0, 1, "", "rolling_sum_by"], [604, 0, 1, "", "rolling_var"], [605, 0, 1, "", "rolling_var_by"], [606, 0, 1, "", "round"], [607, 0, 1, "", "round_sig_figs"], [608, 0, 1, "", "sample"], [609, 0, 1, "", "search_sorted"], [610, 0, 1, "", "set_sorted"], [611, 0, 1, "", "shift"], [612, 0, 1, "", "shrink_dtype"], [613, 0, 1, "", "shuffle"], [614, 0, 1, "", "sign"], [615, 0, 1, "", "sin"], [616, 0, 1, "", "sinh"], [617, 0, 1, "", "skew"], [618, 0, 1, "", "slice"], [619, 0, 1, "", "sort"], [620, 0, 1, "", "sort_by"], [621, 0, 1, "", "sqrt"], [622, 0, 1, "", "std"], [672, 0, 1, "", "sub"], [673, 0, 1, "", "sum"], [674, 0, 1, "", "tail"], [675, 0, 1, "", "tan"], [676, 0, 1, "", "tanh"], [677, 0, 1, "", "to_physical"], [678, 0, 1, "", "top_k"], [679, 0, 1, "", "top_k_by"], [680, 0, 1, "", "truediv"], [681, 0, 1, "", "unique"], [682, 0, 1, "", "unique_counts"], [683, 0, 1, "", "upper_bound"], [684, 0, 1, "", "value_counts"], [685, 0, 1, "", "var"], [686, 0, 1, "", "where"], [687, 0, 1, "", "xor"]], "polars.Expr.arr": [[336, 0, 1, "", "all"], [337, 0, 1, "", "any"], [338, 0, 1, "", "arg_max"], [339, 0, 1, "", "arg_min"], [340, 0, 1, "", "contains"], [341, 0, 1, "", "count_matches"], [342, 0, 1, "", "explode"], [343, 0, 1, "", "first"], [344, 0, 1, "", "get"], [345, 0, 1, "", "join"], [346, 0, 1, "", "last"], [347, 0, 1, "", "max"], [348, 0, 1, "", "median"], [349, 0, 1, "", "min"], [350, 0, 1, "", "n_unique"], [351, 0, 1, "", "reverse"], [352, 0, 1, "", "shift"], [353, 0, 1, "", "sort"], [354, 0, 1, "", "std"], [355, 0, 1, "", "sum"], [356, 0, 1, "", "to_list"], [357, 0, 1, "", "to_struct"], [358, 0, 1, "", "unique"], [359, 0, 1, "", "var"]], "polars.Expr.bin": [[361, 0, 1, "", "contains"], [362, 0, 1, "", "decode"], [363, 0, 1, "", "encode"], [364, 0, 1, "", "ends_with"], [365, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[369, 0, 1, "", "get_categories"]], "polars.Expr.dt": [[390, 0, 1, "", "add_business_days"], [391, 0, 1, "", "base_utc_offset"], [392, 0, 1, "", "cast_time_unit"], [393, 0, 1, "", "century"], [394, 0, 1, "", "combine"], [395, 0, 1, "", "convert_time_zone"], [396, 0, 1, "", "date"], [397, 0, 1, "", "datetime"], [398, 0, 1, "", "day"], [399, 0, 1, "", "dst_offset"], [400, 0, 1, "", "epoch"], [401, 0, 1, "", "hour"], [402, 0, 1, "", "is_leap_year"], [403, 0, 1, "", "iso_year"], [404, 0, 1, "", "microsecond"], [405, 0, 1, "", "millennium"], [406, 0, 1, "", "millisecond"], [407, 0, 1, "", "minute"], [408, 0, 1, "", "month"], [409, 0, 1, "", "month_end"], [410, 0, 1, "", "month_start"], [411, 0, 1, "", "nanosecond"], [412, 0, 1, "", "offset_by"], [413, 0, 1, "", "ordinal_day"], [414, 0, 1, "", "quarter"], [415, 0, 1, "", "replace_time_zone"], [416, 0, 1, "", "round"], [417, 0, 1, "", "second"], [418, 0, 1, "", "strftime"], [419, 0, 1, "", "time"], [420, 0, 1, "", "timestamp"], [421, 0, 1, "", "to_string"], [422, 0, 1, "", "total_days"], [423, 0, 1, "", "total_hours"], [424, 0, 1, "", "total_microseconds"], [425, 0, 1, "", "total_milliseconds"], [426, 0, 1, "", "total_minutes"], [427, 0, 1, "", "total_nanoseconds"], [428, 0, 1, "", "total_seconds"], [429, 0, 1, "", "truncate"], [430, 0, 1, "", "week"], [431, 0, 1, "", "weekday"], [432, 0, 1, "", "with_time_unit"], [433, 0, 1, "", "year"]], "polars.Expr.list": [[484, 0, 1, "", "all"], [485, 0, 1, "", "any"], [486, 0, 1, "", "arg_max"], [487, 0, 1, "", "arg_min"], [488, 0, 1, "", "concat"], [489, 0, 1, "", "contains"], [490, 0, 1, "", "count_matches"], [491, 0, 1, "", "diff"], [492, 0, 1, "", "drop_nulls"], [493, 0, 1, "", "eval"], [494, 0, 1, "", "explode"], [495, 0, 1, "", "first"], [496, 0, 1, "", "gather"], [497, 0, 1, "", "gather_every"], [498, 0, 1, "", "get"], [499, 0, 1, "", "head"], [500, 0, 1, "", "join"], [501, 0, 1, "", "last"], [502, 0, 1, "", "len"], [503, 0, 1, "", "max"], [504, 0, 1, "", "mean"], [505, 0, 1, "", "median"], [506, 0, 1, "", "min"], [507, 0, 1, "", "n_unique"], [508, 0, 1, "", "reverse"], [509, 0, 1, "", "sample"], [510, 0, 1, "", "set_difference"], [511, 0, 1, "", "set_intersection"], [512, 0, 1, "", "set_symmetric_difference"], [513, 0, 1, "", "set_union"], [514, 0, 1, "", "shift"], [515, 0, 1, "", "slice"], [516, 0, 1, "", "sort"], [517, 0, 1, "", "std"], [518, 0, 1, "", "sum"], [519, 0, 1, "", "tail"], [520, 0, 1, "", "to_array"], [521, 0, 1, "", "to_struct"], [522, 0, 1, "", "unique"], [523, 0, 1, "", "var"]], "polars.Expr.meta": [[534, 0, 1, "", "eq"], [535, 0, 1, "", "has_multiple_outputs"], [536, 0, 1, "", "is_column_selection"], [537, 0, 1, "", "is_regex_projection"], [538, 0, 1, "", "ne"], [539, 0, 1, "", "output_name"], [540, 0, 1, "", "pop"], [541, 0, 1, "", "root_names"], [542, 0, 1, "", "serialize"], [543, 0, 1, "", "tree_format"], [544, 0, 1, "", "undo_aliases"], [545, 0, 1, "", "write_json"]], "polars.Expr.name": [[551, 0, 1, "", "keep"], [552, 0, 1, "", "map"], [553, 0, 1, "", "map_fields"], [554, 0, 1, "", "prefix"], [555, 0, 1, "", "prefix_fields"], [556, 0, 1, "", "suffix"], [557, 0, 1, "", "suffix_fields"], [558, 0, 1, "", "to_lowercase"], [559, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[623, 0, 1, "", "concat"], [624, 0, 1, "", "contains"], [625, 0, 1, "", "contains_any"], [626, 0, 1, "", "count_matches"], [627, 0, 1, "", "decode"], [628, 0, 1, "", "encode"], [629, 0, 1, "", "ends_with"], [630, 0, 1, "", "explode"], [631, 0, 1, "", "extract"], [632, 0, 1, "", "extract_all"], [633, 0, 1, "", "extract_groups"], [634, 0, 1, "", "find"], [635, 0, 1, "", "head"], [636, 0, 1, "", "join"], [637, 0, 1, "", "json_decode"], [638, 0, 1, "", "json_path_match"], [639, 0, 1, "", "len_bytes"], [640, 0, 1, "", "len_chars"], [641, 0, 1, "", "pad_end"], [642, 0, 1, "", "pad_start"], [643, 0, 1, "", "replace"], [644, 0, 1, "", "replace_all"], [645, 0, 1, "", "replace_many"], [646, 0, 1, "", "reverse"], [647, 0, 1, "", "slice"], [648, 0, 1, "", "split"], [649, 0, 1, "", "split_exact"], [650, 0, 1, "", "splitn"], [651, 0, 1, "", "starts_with"], [652, 0, 1, "", "strip_chars"], [653, 0, 1, "", "strip_chars_end"], [654, 0, 1, "", "strip_chars_start"], [655, 0, 1, "", "strip_prefix"], [656, 0, 1, "", "strip_suffix"], [657, 0, 1, "", "strptime"], [658, 0, 1, "", "tail"], [659, 0, 1, "", "to_date"], [660, 0, 1, "", "to_datetime"], [661, 0, 1, "", "to_decimal"], [662, 0, 1, "", "to_integer"], [663, 0, 1, "", "to_lowercase"], [664, 0, 1, "", "to_time"], [665, 0, 1, "", "to_titlecase"], [666, 0, 1, "", "to_uppercase"], [667, 0, 1, "", "zfill"]], "polars.Expr.struct": [[668, 0, 1, "", "field"], [669, 0, 1, "", "json_encode"], [670, 0, 1, "", "rename_fields"], [671, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[785, 0, 1, "", "approx_n_unique"], [786, 0, 1, "", "bottom_k"], [787, 0, 1, "", "cache"], [788, 0, 1, "", "cast"], [789, 0, 1, "", "clear"], [790, 0, 1, "", "clone"], [791, 0, 1, "", "collect"], [792, 0, 1, "", "collect_async"], [793, 0, 1, "", "collect_schema"], [794, 1, 1, "", "columns"], [795, 0, 1, "", "count"], [796, 0, 1, "", "describe"], [797, 0, 1, "", "deserialize"], [798, 0, 1, "", "drop"], [799, 0, 1, "", "drop_nulls"], [800, 1, 1, "", "dtypes"], [801, 0, 1, "", "explain"], [802, 0, 1, "", "explode"], [803, 0, 1, "", "fetch"], [804, 0, 1, "", "fill_nan"], [805, 0, 1, "", "fill_null"], [806, 0, 1, "", "filter"], [807, 0, 1, "", "first"], [808, 0, 1, "", "gather_every"], [809, 0, 1, "", "group_by"], [810, 0, 1, "", "group_by_dynamic"], [811, 0, 1, "", "head"], [812, 0, 1, "", "inspect"], [813, 0, 1, "", "interpolate"], [814, 0, 1, "", "join"], [815, 0, 1, "", "join_asof"], [816, 0, 1, "", "last"], [817, 0, 1, "", "lazy"], [818, 0, 1, "", "limit"], [819, 0, 1, "", "map_batches"], [820, 0, 1, "", "max"], [821, 0, 1, "", "mean"], [822, 0, 1, "", "median"], [823, 0, 1, "", "melt"], [824, 0, 1, "", "merge_sorted"], [825, 0, 1, "", "min"], [826, 0, 1, "", "null_count"], [827, 0, 1, "", "pipe"], [828, 0, 1, "", "profile"], [829, 0, 1, "", "quantile"], [830, 0, 1, "", "rename"], [831, 0, 1, "", "reverse"], [832, 0, 1, "", "rolling"], [833, 1, 1, "", "schema"], [834, 0, 1, "", "select"], [835, 0, 1, "", "select_seq"], [836, 0, 1, "", "serialize"], [837, 0, 1, "", "set_sorted"], [838, 0, 1, "", "shift"], [839, 0, 1, "", "show_graph"], [42, 0, 1, "", "sink_csv"], [43, 0, 1, "", "sink_ipc"], [44, 0, 1, "", "sink_ndjson"], [45, 0, 1, "", "sink_parquet"], [840, 0, 1, "", "slice"], [841, 0, 1, "", "sort"], [842, 0, 1, "", "sql"], [843, 0, 1, "", "std"], [844, 0, 1, "", "sum"], [845, 0, 1, "", "tail"], [846, 0, 1, "", "top_k"], [847, 0, 1, "", "unique"], [848, 0, 1, "", "unnest"], [849, 0, 1, "", "update"], [850, 0, 1, "", "var"], [851, 1, 1, "", "width"], [852, 0, 1, "", "with_columns"], [853, 0, 1, "", "with_columns_seq"], [854, 0, 1, "", "with_context"], [855, 0, 1, "", "with_row_count"], [856, 0, 1, "", "with_row_index"]], "polars": [[1258, 2, 1, "", "SQLContext"], [46, 2, 1, "", "StringCache"], [47, 4, 1, "", "align_frames"], [688, 4, 1, "", "all"], [689, 4, 1, "", "all_horizontal"], [690, 4, 1, "", "any"], [691, 4, 1, "", "any_horizontal"], [692, 4, 1, "", "approx_n_unique"], [693, 4, 1, "", "arange"], [694, 4, 1, "", "arctan2"], [695, 4, 1, "", "arctan2d"], [696, 4, 1, "", "arg_sort_by"], [697, 4, 1, "", "arg_where"], [52, 4, 1, "", "build_info"], [698, 4, 1, "", "business_day_count"], [699, 4, 1, "", "coalesce"], [53, 4, 1, "", "collect_all"], [54, 4, 1, "", "collect_all_async"], [55, 4, 1, "", "concat"], [700, 4, 1, "", "concat_list"], [701, 4, 1, "", "concat_str"], [702, 4, 1, "", "corr"], [703, 4, 1, "", "count"], [704, 4, 1, "", "cov"], [705, 4, 1, "", "cum_count"], [706, 4, 1, "", "cum_fold"], [707, 4, 1, "", "cum_reduce"], [708, 4, 1, "", "cum_sum"], [709, 4, 1, "", "cum_sum_horizontal"], [710, 4, 1, "", "date"], [711, 4, 1, "", "date_range"], [712, 4, 1, "", "date_ranges"], [713, 4, 1, "", "datetime"], [714, 4, 1, "", "datetime_range"], [715, 4, 1, "", "datetime_ranges"], [84, 4, 1, "", "disable_string_cache"], [716, 4, 1, "", "duration"], [717, 4, 1, "", "element"], [85, 4, 1, "", "enable_string_cache"], [718, 4, 1, "", "exclude"], [719, 4, 1, "", "first"], [720, 4, 1, "", "fold"], [721, 4, 1, "", "format"], [116, 4, 1, "", "from_arrow"], [117, 4, 1, "", "from_dataframe"], [118, 4, 1, "", "from_dict"], [119, 4, 1, "", "from_dicts"], [722, 4, 1, "", "from_epoch"], [120, 4, 1, "", "from_numpy"], [121, 4, 1, "", "from_pandas"], [122, 4, 1, "", "from_records"], [123, 4, 1, "", "from_repr"], [124, 4, 1, "", "get_index_type"], [723, 4, 1, "", "groups"], [724, 4, 1, "", "head"], [725, 4, 1, "", "implode"], [726, 4, 1, "", "int_range"], [727, 4, 1, "", "int_ranges"], [126, 4, 1, "", "json_normalize"], [728, 4, 1, "", "last"], [729, 4, 1, "", "len"], [730, 4, 1, "", "lit"], [731, 4, 1, "", "map_batches"], [732, 4, 1, "", "map_groups"], [733, 4, 1, "", "max"], [734, 4, 1, "", "max_horizontal"], [735, 4, 1, "", "mean"], [736, 4, 1, "", "mean_horizontal"], [737, 4, 1, "", "median"], [738, 4, 1, "", "min"], [739, 4, 1, "", "min_horizontal"], [740, 4, 1, "", "n_unique"], [741, 4, 1, "", "nth"], [742, 4, 1, "", "ones"], [880, 6, 0, "-", "plugins"], [743, 4, 1, "", "quantile"], [127, 4, 1, "", "read_avro"], [128, 4, 1, "", "read_clipboard"], [129, 4, 1, "", "read_csv"], [130, 4, 1, "", "read_csv_batched"], [131, 4, 1, "", "read_database"], [132, 4, 1, "", "read_database_uri"], [133, 4, 1, "", "read_delta"], [134, 4, 1, "", "read_excel"], [135, 4, 1, "", "read_ipc"], [136, 4, 1, "", "read_ipc_schema"], [137, 4, 1, "", "read_ipc_stream"], [138, 4, 1, "", "read_json"], [139, 4, 1, "", "read_ndjson"], [140, 4, 1, "", "read_ods"], [141, 4, 1, "", "read_parquet"], [142, 4, 1, "", "read_parquet_schema"], [744, 4, 1, "", "reduce"], [745, 4, 1, "", "repeat"], [746, 4, 1, "", "rolling_corr"], [747, 4, 1, "", "rolling_cov"], [143, 4, 1, "", "scan_csv"], [144, 4, 1, "", "scan_delta"], [145, 4, 1, "", "scan_iceberg"], [146, 4, 1, "", "scan_ipc"], [147, 4, 1, "", "scan_ndjson"], [148, 4, 1, "", "scan_parquet"], [149, 4, 1, "", "scan_pyarrow_dataset"], [748, 4, 1, "", "select"], [882, 6, 0, "-", "selectors"], [150, 4, 1, "", "set_random_seed"], [151, 4, 1, "", "show_versions"], [749, 4, 1, "", "sql"], [750, 4, 1, "", "sql_expr"], [751, 4, 1, "", "std"], [752, 4, 1, "", "struct"], [753, 4, 1, "", "sum"], [754, 4, 1, "", "sum_horizontal"], [755, 4, 1, "", "tail"], [165, 4, 1, "", "thread_pool_size"], [166, 4, 1, "", "threadpool_size"], [756, 4, 1, "", "time"], [757, 4, 1, "", "time_range"], [758, 4, 1, "", "time_ranges"], [167, 4, 1, "", "using_string_cache"], [759, 4, 1, "", "var"], [760, 4, 1, "", "when"], [761, 4, 1, "", "zeros"]], "polars.SQLContext": [[1258, 0, 1, "", "__enter__"], [1258, 0, 1, "", "__exit__"], [1258, 0, 1, "", "__init__"], [1241, 0, 1, "", "execute"], [1242, 0, 1, "", "execute_global"], [1243, 0, 1, "", "register"], [1244, 0, 1, "", "register_globals"], [1245, 0, 1, "", "register_many"], [1246, 0, 1, "", "tables"], [1247, 0, 1, "", "unregister"]], "polars.Series": [[884, 0, 1, "", "abs"], [885, 0, 1, "", "alias"], [886, 0, 1, "", "all"], [887, 0, 1, "", "any"], [888, 0, 1, "", "append"], [889, 0, 1, "", "arccos"], [890, 0, 1, "", "arccosh"], [891, 0, 1, "", "arcsin"], [892, 0, 1, "", "arcsinh"], [893, 0, 1, "", "arctan"], [894, 0, 1, "", "arctanh"], [895, 0, 1, "", "arg_max"], [896, 0, 1, "", "arg_min"], [897, 0, 1, "", "arg_sort"], [898, 0, 1, "", "arg_true"], [899, 0, 1, "", "arg_unique"], [929, 0, 1, "", "bottom_k"], [930, 0, 1, "", "cast"], [935, 0, 1, "", "cbrt"], [936, 0, 1, "", "ceil"], [937, 0, 1, "", "chunk_lengths"], [938, 0, 1, "", "clear"], [939, 0, 1, "", "clip"], [940, 0, 1, "", "clone"], [941, 0, 1, "", "cos"], [942, 0, 1, "", "cosh"], [943, 0, 1, "", "cot"], [944, 0, 1, "", "cum_count"], [945, 0, 1, "", "cum_max"], [946, 0, 1, "", "cum_min"], [947, 0, 1, "", "cum_prod"], [948, 0, 1, "", "cum_sum"], [949, 0, 1, "", "cumulative_eval"], [950, 0, 1, "", "cut"], [951, 0, 1, "", "describe"], [952, 0, 1, "", "diff"], [953, 0, 1, "", "dot"], [954, 0, 1, "", "drop_nans"], [955, 0, 1, "", "drop_nulls"], [1004, 3, 1, "", "dtype"], [1005, 0, 1, "", "entropy"], [1006, 0, 1, "", "equals"], [1007, 0, 1, "", "estimated_size"], [1008, 0, 1, "", "ewm_mean"], [1009, 0, 1, "", "ewm_mean_by"], [1010, 0, 1, "", "ewm_std"], [1011, 0, 1, "", "ewm_var"], [1012, 0, 1, "", "exp"], [1013, 0, 1, "", "explode"], [1014, 0, 1, "", "extend"], [1015, 0, 1, "", "extend_constant"], [1016, 0, 1, "", "fill_nan"], [1017, 0, 1, "", "fill_null"], [1018, 0, 1, "", "filter"], [1019, 3, 1, "", "flags"], [1020, 0, 1, "", "floor"], [1021, 0, 1, "", "gather"], [1022, 0, 1, "", "gather_every"], [1023, 0, 1, "", "get_chunks"], [1024, 0, 1, "", "has_nulls"], [1025, 0, 1, "", "has_validity"], [1026, 0, 1, "", "hash"], [1027, 0, 1, "", "head"], [1028, 0, 1, "", "hist"], [1029, 0, 1, "", "implode"], [1030, 0, 1, "", "interpolate"], [1031, 0, 1, "", "interpolate_by"], [1032, 0, 1, "", "is_between"], [1033, 0, 1, "", "is_duplicated"], [1034, 0, 1, "", "is_empty"], [1035, 0, 1, "", "is_finite"], [1036, 0, 1, "", "is_first_distinct"], [1037, 0, 1, "", "is_in"], [1038, 0, 1, "", "is_infinite"], [1039, 0, 1, "", "is_last_distinct"], [1040, 0, 1, "", "is_nan"], [1041, 0, 1, "", "is_not_nan"], [1042, 0, 1, "", "is_not_null"], [1043, 0, 1, "", "is_null"], [1044, 0, 1, "", "is_sorted"], [1045, 0, 1, "", "is_unique"], [1046, 0, 1, "", "item"], [1047, 0, 1, "", "kurtosis"], [1048, 0, 1, "", "len"], [1049, 0, 1, "", "limit"], [1090, 0, 1, "", "log"], [1091, 0, 1, "", "log10"], [1092, 0, 1, "", "log1p"], [1093, 0, 1, "", "lower_bound"], [1094, 0, 1, "", "map_elements"], [1095, 0, 1, "", "max"], [1096, 0, 1, "", "mean"], [1097, 0, 1, "", "median"], [1098, 0, 1, "", "min"], [1099, 0, 1, "", "mode"], [1100, 0, 1, "", "n_chunks"], [1101, 0, 1, "", "n_unique"], [1102, 3, 1, "", "name"], [1103, 0, 1, "", "nan_max"], [1104, 0, 1, "", "nan_min"], [1105, 0, 1, "", "new_from_index"], [1106, 0, 1, "", "not_"], [1107, 0, 1, "", "null_count"], [1108, 0, 1, "", "pct_change"], [1109, 0, 1, "", "peak_max"], [1110, 0, 1, "", "peak_min"], [1111, 0, 1, "", "product"], [1112, 0, 1, "", "qcut"], [1113, 0, 1, "", "quantile"], [1114, 0, 1, "", "rank"], [1115, 0, 1, "", "rechunk"], [1116, 0, 1, "", "reinterpret"], [1117, 0, 1, "", "rename"], [1118, 0, 1, "", "replace"], [1119, 0, 1, "", "reshape"], [1120, 0, 1, "", "reverse"], [1121, 0, 1, "", "rle"], [1122, 0, 1, "", "rle_id"], [1123, 0, 1, "", "rolling_map"], [1124, 0, 1, "", "rolling_max"], [1125, 0, 1, "", "rolling_mean"], [1126, 0, 1, "", "rolling_median"], [1127, 0, 1, "", "rolling_min"], [1128, 0, 1, "", "rolling_quantile"], [1129, 0, 1, "", "rolling_skew"], [1130, 0, 1, "", "rolling_std"], [1131, 0, 1, "", "rolling_sum"], [1132, 0, 1, "", "rolling_var"], [1133, 0, 1, "", "round"], [1134, 0, 1, "", "round_sig_figs"], [1135, 0, 1, "", "sample"], [1136, 0, 1, "", "scatter"], [1137, 0, 1, "", "search_sorted"], [1138, 0, 1, "", "set"], [1139, 0, 1, "", "set_sorted"], [1140, 3, 1, "", "shape"], [1141, 0, 1, "", "shift"], [1142, 0, 1, "", "shrink_dtype"], [1143, 0, 1, "", "shrink_to_fit"], [1144, 0, 1, "", "shuffle"], [1145, 0, 1, "", "sign"], [1146, 0, 1, "", "sin"], [1147, 0, 1, "", "sinh"], [1148, 0, 1, "", "skew"], [1149, 0, 1, "", "slice"], [1150, 0, 1, "", "sort"], [1151, 0, 1, "", "sqrt"], [1152, 0, 1, "", "std"], [1204, 0, 1, "", "sum"], [1205, 0, 1, "", "tail"], [1206, 0, 1, "", "tan"], [1207, 0, 1, "", "tanh"], [1208, 0, 1, "", "to_arrow"], [1209, 0, 1, "", "to_dummies"], [1210, 0, 1, "", "to_frame"], [1211, 0, 1, "", "to_init_repr"], [1212, 0, 1, "", "to_jax"], [1213, 0, 1, "", "to_list"], [1214, 0, 1, "", "to_numpy"], [1215, 0, 1, "", "to_pandas"], [1216, 0, 1, "", "to_physical"], [1217, 0, 1, "", "to_torch"], [1218, 0, 1, "", "top_k"], [1219, 0, 1, "", "unique"], [1220, 0, 1, "", "unique_counts"], [1221, 0, 1, "", "upper_bound"], [1222, 0, 1, "", "value_counts"], [1223, 0, 1, "", "var"], [1224, 0, 1, "", "zip_with"]], "polars.Series.arr": [[900, 0, 1, "", "all"], [901, 0, 1, "", "any"], [902, 0, 1, "", "arg_max"], [903, 0, 1, "", "arg_min"], [904, 0, 1, "", "contains"], [905, 0, 1, "", "count_matches"], [906, 0, 1, "", "explode"], [907, 0, 1, "", "first"], [908, 0, 1, "", "get"], [909, 0, 1, "", "join"], [910, 0, 1, "", "last"], [911, 0, 1, "", "max"], [912, 0, 1, "", "median"], [913, 0, 1, "", "min"], [914, 0, 1, "", "n_unique"], [915, 0, 1, "", "reverse"], [916, 0, 1, "", "shift"], [917, 0, 1, "", "sort"], [918, 0, 1, "", "std"], [919, 0, 1, "", "sum"], [920, 0, 1, "", "to_list"], [921, 0, 1, "", "to_struct"], [922, 0, 1, "", "unique"], [923, 0, 1, "", "var"]], "polars.Series.bin": [[924, 0, 1, "", "contains"], [925, 0, 1, "", "decode"], [926, 0, 1, "", "encode"], [927, 0, 1, "", "ends_with"], [928, 0, 1, "", "starts_with"]], "polars.Series.cat": [[931, 0, 1, "", "get_categories"], [932, 0, 1, "", "is_local"], [933, 0, 1, "", "to_local"], [934, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[956, 0, 1, "", "add_business_days"], [957, 0, 1, "", "base_utc_offset"], [958, 0, 1, "", "cast_time_unit"], [959, 0, 1, "", "century"], [960, 0, 1, "", "combine"], [961, 0, 1, "", "convert_time_zone"], [962, 0, 1, "", "date"], [963, 0, 1, "", "datetime"], [964, 0, 1, "", "day"], [965, 0, 1, "", "dst_offset"], [966, 0, 1, "", "epoch"], [967, 0, 1, "", "hour"], [968, 0, 1, "", "is_leap_year"], [969, 0, 1, "", "iso_year"], [970, 0, 1, "", "max"], [971, 0, 1, "", "mean"], [972, 0, 1, "", "median"], [973, 0, 1, "", "microsecond"], [974, 0, 1, "", "millennium"], [975, 0, 1, "", "millisecond"], [976, 0, 1, "", "min"], [977, 0, 1, "", "minute"], [978, 0, 1, "", "month"], [979, 0, 1, "", "month_end"], [980, 0, 1, "", "month_start"], [981, 0, 1, "", "nanosecond"], [982, 0, 1, "", "offset_by"], [983, 0, 1, "", "ordinal_day"], [984, 0, 1, "", "quarter"], [985, 0, 1, "", "replace_time_zone"], [986, 0, 1, "", "round"], [987, 0, 1, "", "second"], [988, 0, 1, "", "strftime"], [989, 0, 1, "", "time"], [990, 0, 1, "", "timestamp"], [991, 0, 1, "", "to_string"], [992, 0, 1, "", "total_days"], [993, 0, 1, "", "total_hours"], [994, 0, 1, "", "total_microseconds"], [995, 0, 1, "", "total_milliseconds"], [996, 0, 1, "", "total_minutes"], [997, 0, 1, "", "total_nanoseconds"], [998, 0, 1, "", "total_seconds"], [999, 0, 1, "", "truncate"], [1000, 0, 1, "", "week"], [1001, 0, 1, "", "weekday"], [1002, 0, 1, "", "with_time_unit"], [1003, 0, 1, "", "year"]], "polars.Series.list": [[1050, 0, 1, "", "all"], [1051, 0, 1, "", "any"], [1052, 0, 1, "", "arg_max"], [1053, 0, 1, "", "arg_min"], [1054, 0, 1, "", "concat"], [1055, 0, 1, "", "contains"], [1056, 0, 1, "", "count_matches"], [1057, 0, 1, "", "diff"], [1058, 0, 1, "", "drop_nulls"], [1059, 0, 1, "", "eval"], [1060, 0, 1, "", "explode"], [1061, 0, 1, "", "first"], [1062, 0, 1, "", "gather"], [1063, 0, 1, "", "gather_every"], [1064, 0, 1, "", "get"], [1065, 0, 1, "", "head"], [1066, 0, 1, "", "join"], [1067, 0, 1, "", "last"], [1068, 0, 1, "", "len"], [1069, 0, 1, "", "max"], [1070, 0, 1, "", "mean"], [1071, 0, 1, "", "median"], [1072, 0, 1, "", "min"], [1073, 0, 1, "", "n_unique"], [1074, 0, 1, "", "reverse"], [1075, 0, 1, "", "sample"], [1076, 0, 1, "", "set_difference"], [1077, 0, 1, "", "set_intersection"], [1078, 0, 1, "", "set_symmetric_difference"], [1079, 0, 1, "", "set_union"], [1080, 0, 1, "", "shift"], [1081, 0, 1, "", "slice"], [1082, 0, 1, "", "sort"], [1083, 0, 1, "", "std"], [1084, 0, 1, "", "sum"], [1085, 0, 1, "", "tail"], [1086, 0, 1, "", "to_array"], [1087, 0, 1, "", "to_struct"], [1088, 0, 1, "", "unique"], [1089, 0, 1, "", "var"]], "polars.Series.str": [[1153, 0, 1, "", "concat"], [1154, 0, 1, "", "contains"], [1155, 0, 1, "", "contains_any"], [1156, 0, 1, "", "count_matches"], [1157, 0, 1, "", "decode"], [1158, 0, 1, "", "encode"], [1159, 0, 1, "", "ends_with"], [1160, 0, 1, "", "explode"], [1161, 0, 1, "", "extract"], [1162, 0, 1, "", "extract_all"], [1163, 0, 1, "", "extract_groups"], [1164, 0, 1, "", "find"], [1165, 0, 1, "", "head"], [1166, 0, 1, "", "join"], [1167, 0, 1, "", "json_decode"], [1168, 0, 1, "", "json_path_match"], [1169, 0, 1, "", "len_bytes"], [1170, 0, 1, "", "len_chars"], [1171, 0, 1, "", "pad_end"], [1172, 0, 1, "", "pad_start"], [1173, 0, 1, "", "replace"], [1174, 0, 1, "", "replace_all"], [1175, 0, 1, "", "replace_many"], [1176, 0, 1, "", "reverse"], [1177, 0, 1, "", "slice"], [1178, 0, 1, "", "split"], [1179, 0, 1, "", "split_exact"], [1180, 0, 1, "", "splitn"], [1181, 0, 1, "", "starts_with"], [1182, 0, 1, "", "strip_chars"], [1183, 0, 1, "", "strip_chars_end"], [1184, 0, 1, "", "strip_chars_start"], [1185, 0, 1, "", "strip_prefix"], [1186, 0, 1, "", "strip_suffix"], [1187, 0, 1, "", "strptime"], [1188, 0, 1, "", "tail"], [1189, 0, 1, "", "to_date"], [1190, 0, 1, "", "to_datetime"], [1191, 0, 1, "", "to_decimal"], [1192, 0, 1, "", "to_integer"], [1193, 0, 1, "", "to_lowercase"], [1194, 0, 1, "", "to_time"], [1195, 0, 1, "", "to_titlecase"], [1196, 0, 1, "", "to_uppercase"], [1197, 0, 1, "", "zfill"]], "polars.Series.struct": [[1198, 0, 1, "", "field"], [1199, 3, 1, "", "fields"], [1200, 0, 1, "", "json_encode"], [1201, 0, 1, "", "rename_fields"], [1202, 3, 1, "", "schema"], [1203, 0, 1, "", "unnest"]], "polars.StringCache": [[46, 0, 1, "", "__init__"]], "polars.api": [[48, 4, 1, "", "register_dataframe_namespace"], [49, 4, 1, "", "register_expr_namespace"], [50, 4, 1, "", "register_lazyframe_namespace"], [51, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[286, 0, 1, "", "__iter__"], [287, 0, 1, "", "agg"], [288, 0, 1, "", "all"], [289, 0, 1, "", "count"], [290, 0, 1, "", "first"], [291, 0, 1, "", "head"], [292, 0, 1, "", "last"], [293, 0, 1, "", "len"], [294, 0, 1, "", "map_groups"], [295, 0, 1, "", "max"], [296, 0, 1, "", "mean"], [297, 0, 1, "", "median"], [298, 0, 1, "", "min"], [299, 0, 1, "", "n_unique"], [300, 0, 1, "", "quantile"], [301, 0, 1, "", "sum"], [302, 0, 1, "", "tail"]], "polars.datatypes": [[56, 2, 1, "", "Array"], [57, 2, 1, "", "Binary"], [58, 2, 1, "", "Boolean"], [59, 2, 1, "", "Categorical"], [60, 2, 1, "", "DataType"], [61, 2, 1, "", "Date"], [62, 2, 1, "", "Datetime"], [63, 2, 1, "", "Decimal"], [64, 2, 1, "", "Duration"], [65, 2, 1, "", "Enum"], [66, 2, 1, "", "Float32"], [67, 2, 1, "", "Float64"], [68, 2, 1, "", "Int16"], [69, 2, 1, "", "Int32"], [70, 2, 1, "", "Int64"], [71, 2, 1, "", "Int8"], [72, 2, 1, "", "List"], [73, 2, 1, "", "Null"], [74, 2, 1, "", "Object"], [75, 2, 1, "", "String"], [76, 2, 1, "", "Struct"], [77, 2, 1, "", "Time"], [78, 2, 1, "", "UInt16"], [79, 2, 1, "", "UInt32"], [80, 2, 1, "", "UInt64"], [81, 2, 1, "", "UInt8"], [82, 2, 1, "", "Unknown"], [83, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[56, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[57, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[58, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[59, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[71, 0, 1, "", "__init__"]], "polars.datatypes.List": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[74, 0, 1, "", "__init__"]], "polars.datatypes.String": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[77, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[78, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[79, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[82, 0, 1, "", "__init__"]], "polars.exceptions": [[86, 5, 1, "", "CategoricalRemappingWarning"], [87, 5, 1, "", "ChronoFormatWarning"], [88, 5, 1, "", "ColumnNotFoundError"], [89, 5, 1, "", "ComputeError"], [90, 5, 1, "", "CustomUFuncWarning"], [91, 5, 1, "", "DataOrientationWarning"], [92, 5, 1, "", "DuplicateError"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "MapWithoutReturnDtypeWarning"], [95, 5, 1, "", "ModuleUpgradeRequiredError"], [96, 5, 1, "", "NoDataError"], [97, 5, 1, "", "NoRowsReturnedError"], [98, 5, 1, "", "OutOfBoundsError"], [99, 5, 1, "", "PanicException"], [100, 5, 1, "", "ParameterCollisionError"], [101, 5, 1, "", "PerformanceWarning"], [102, 5, 1, "", "PolarsError"], [103, 5, 1, "", "PolarsInefficientMapWarning"], [104, 5, 1, "", "PolarsWarning"], [105, 5, 1, "", "RowsError"], [106, 5, 1, "", "SQLInterfaceError"], [107, 5, 1, "", "SQLSyntaxError"], [108, 5, 1, "", "SchemaError"], [109, 5, 1, "", "SchemaFieldNotFoundError"], [110, 5, 1, "", "ShapeError"], [111, 5, 1, "", "StringCacheMismatchError"], [112, 5, 1, "", "StructFieldNotFoundError"], [113, 5, 1, "", "TooManyRowsReturnedError"], [114, 5, 1, "", "UnstableWarning"], [115, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[125, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[857, 0, 1, "", "agg"], [858, 0, 1, "", "all"], [859, 0, 1, "", "count"], [860, 0, 1, "", "first"], [861, 0, 1, "", "head"], [862, 0, 1, "", "last"], [863, 0, 1, "", "len"], [864, 0, 1, "", "map_groups"], [865, 0, 1, "", "max"], [866, 0, 1, "", "mean"], [867, 0, 1, "", "median"], [868, 0, 1, "", "min"], [869, 0, 1, "", "n_unique"], [870, 0, 1, "", "quantile"], [871, 0, 1, "", "sum"], [872, 0, 1, "", "tail"]], "polars.plugins": [[880, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[882, 4, 1, "", "all"], [882, 4, 1, "", "alpha"], [882, 4, 1, "", "alphanumeric"], [882, 4, 1, "", "binary"], [882, 4, 1, "", "boolean"], [882, 4, 1, "", "by_dtype"], [882, 4, 1, "", "by_index"], [882, 4, 1, "", "by_name"], [882, 4, 1, "", "categorical"], [882, 4, 1, "", "contains"], [882, 4, 1, "", "date"], [882, 4, 1, "", "datetime"], [882, 4, 1, "", "decimal"], [882, 4, 1, "", "digit"], [882, 4, 1, "", "duration"], [882, 4, 1, "", "ends_with"], [882, 4, 1, "", "exclude"], [882, 4, 1, "", "expand_selector"], [882, 4, 1, "", "first"], [882, 4, 1, "", "float"], [882, 4, 1, "", "integer"], [882, 4, 1, "", "is_selector"], [882, 4, 1, "", "last"], [882, 4, 1, "", "matches"], [882, 4, 1, "", "numeric"], [882, 4, 1, "", "signed_integer"], [882, 4, 1, "", "starts_with"], [882, 4, 1, "", "string"], [882, 4, 1, "", "temporal"], [882, 4, 1, "", "time"], [882, 4, 1, "", "unsigned_integer"]], "polars.testing": [[152, 4, 1, "", "assert_frame_equal"], [153, 4, 1, "", "assert_frame_not_equal"], [154, 4, 1, "", "assert_series_equal"], [155, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[156, 2, 1, "", "column"], [157, 4, 1, "", "columns"], [158, 4, 1, "", "create_list_strategy"], [159, 4, 1, "", "dataframes"], [160, 4, 1, "", "dtypes"], [161, 4, 1, "", "lists"], [162, 4, 1, "", "load_profile"], [163, 4, 1, "", "series"], [164, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[156, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 189, 1014], "api": [1, 48, 49, 50, 51, 782, 1258], "provid": 1, "new": 1, "function": [1, 769, 781, 882, 1249, 1252, 1253, 1254], "avail": 1, "registr": 1, "exampl": [1, 311, 882, 1237, 1261], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 766, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1261], "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 168], "load": [2, 168], "load_from_fil": 3, "restore_default": 4, "save": [5, 168], "save_to_fil": 6, "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_streaming_chunk_s": 14, "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_verbos": 29, "state": [30, 168], "datafram": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 159, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308], "write_avro": 31, "write_clipboard": 32, "write_csv": 33, "write_databas": 34, "write_delta": 35, "write_excel": 36, "write_ipc": 37, "write_ipc_stream": 38, "write_json": [39, 545], "write_ndjson": 40, "write_parquet": 41, "lazyfram": [42, 43, 44, 45, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876], "sink_csv": 42, "sink_ipc": 43, "sink_ndjson": 44, "sink_parquet": 45, "stringcach": [46, 781], "align_fram": 47, "register_dataframe_namespac": 48, "register_expr_namespac": 49, "register_lazyframe_namespac": 50, "register_series_namespac": 51, "build_info": 52, "collect_al": 53, "collect_all_async": 54, "concat": [55, 488, 623, 1054, 1153, 1254], "datatyp": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 313], "arrai": [56, 762, 1225, 1250], "binari": [57, 763, 776, 1227], "boolean": [58, 764, 1228], "categor": 59, "date": [61, 396, 710, 962, 1255], "datetim": [62, 397, 713, 963], "decim": 63, "durat": [64, 716], "enum": 65, "float32": 66, "float64": 67, "int16": 68, "int32": 69, "int64": 70, "int8": 71, "list": [72, 161, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 771, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1234], "null": 73, "object": 74, "string": [75, 313, 777, 1238, 1254], "struct": [76, 668, 669, 670, 671, 752, 778, 1198, 1199, 1200, 1201, 1202, 1203, 1239], "time": [77, 419, 756, 989], "uint16": 78, "uint32": 79, "uint64": 80, "uint8": 81, "unknown": 82, "utf8": 83, "disable_string_cach": 84, "enable_string_cach": 85, "except": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 314, 1259], "categoricalremappingwarn": 86, "chronoformatwarn": 87, "columnnotfounderror": 88, "computeerror": 89, "customufuncwarn": 90, "dataorientationwarn": 91, "duplicateerror": 92, "invalidoperationerror": 93, "mapwithoutreturndtypewarn": 94, "moduleupgraderequirederror": 95, "nodataerror": 96, "norowsreturnederror": 97, "outofboundserror": 98, "panicexcept": 99, "parametercollisionerror": 100, "performancewarn": 101, "polarserror": 102, "polarsinefficientmapwarn": 103, "polarswarn": 104, "rowserror": 105, "sqlinterfaceerror": 106, "sqlsyntaxerror": 107, "schemaerror": 108, "schemafieldnotfounderror": 109, "shapeerror": 110, "stringcachemismatcherror": 111, "structfieldnotfounderror": 112, "toomanyrowsreturnederror": 113, "unstablewarn": 114, "unsuitablesqlerror": 115, "from_arrow": 116, "from_datafram": 117, "from_dict": [118, 119], "from_numpi": 120, "from_panda": 121, "from_record": 122, "from_repr": 123, "get_index_typ": 124, "io": 125, "csv": [125, 783], "batched_read": 125, "batchedcsvread": 125, "next_batch": 125, "json_norm": 126, "read_avro": 127, "read_clipboard": 128, "read_csv": 129, "read_csv_batch": 130, "read_databas": 131, "read_database_uri": 132, "read_delta": 133, "read_excel": 134, "read_ipc": 135, "read_ipc_schema": 136, "read_ipc_stream": 137, "read_json": 138, "read_ndjson": 139, "read_od": 140, "read_parquet": 141, "read_parquet_schema": 142, "scan_csv": 143, "scan_delta": 144, "scan_iceberg": 145, "scan_ipc": 146, "scan_ndjson": 147, "scan_parquet": 148, "scan_pyarrow_dataset": 149, "set_random_se": 150, "show_vers": 151, "test": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 1261], "assert_frame_equ": 152, "assert_frame_not_equ": 153, "assert_series_equ": 154, "assert_series_not_equ": 155, "parametr": [156, 157, 158, 159, 160, 161, 162, 163, 164, 1261], "column": [156, 157, 177, 767, 794], "create_list_strategi": 158, "dtype": [160, 185, 800, 1004], "load_profil": 162, "seri": [163, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1233], "set_profil": 164, "thread_pool_s": 165, "threadpool_s": 166, "using_string_cach": 167, "option": 168, "us": 168, "context": 168, "manag": 168, "decor": 168, "aggreg": [169, 315, 784, 883, 1249], "__dataframe__": 170, "approx_n_uniqu": [171, 324, 692, 785], "bottom_k": [172, 366, 786, 929], "cast": [173, 368, 788, 930], "clear": [174, 789, 938], "clone": [175, 790, 940], "collect_schema": [176, 793], "corr": [178, 702], "count": [179, 289, 376, 703, 795, 859, 1249], "describ": [180, 796, 951], "deseri": [181, 385, 797], "drop": [182, 798, 1260], "drop_in_plac": 183, "drop_nul": [184, 389, 492, 799, 955, 1058], "equal": [186, 1006], "estimated_s": [187, 1007], "explod": [188, 342, 443, 494, 630, 802, 906, 1013, 1060, 1160], "fill_nan": [190, 445, 804, 1016], "fill_nul": [191, 446, 805, 1017], "filter": [192, 447, 806, 1018], "flag": [193, 1019], "fold": [194, 720], "gather_everi": [195, 455, 497, 808, 1022, 1063], "get_column": [196, 198], "get_column_index": 197, "glimps": 199, "group_bi": [200, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 809, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872], "group_by_dynam": [201, 810], "hash_row": 202, "head": [203, 291, 461, 499, 635, 724, 811, 861, 1027, 1065, 1165], "height": 204, "hstack": 205, "insert_column": 206, "interpol": [207, 465, 813, 1030], "is_dupl": [208, 468, 1033], "is_empti": [209, 1034], "is_uniqu": [210, 478, 1045], "item": [211, 1046], "iter_column": 212, "iter_row": 213, "iter_slic": 214, "join": [215, 345, 500, 636, 814, 909, 1066, 1166, 1248], "join_asof": [216, 815], "lazi": [217, 817], "limit": [218, 483, 818, 1049, 1248], "map_row": 219, "max": [220, 295, 347, 503, 531, 733, 820, 865, 911, 970, 1069, 1095, 1249], "max_horizont": [221, 734], "mean": [222, 296, 504, 532, 735, 821, 866, 971, 1070, 1096], "mean_horizont": [223, 736], "median": [224, 297, 348, 505, 533, 737, 822, 867, 912, 972, 1071, 1097, 1249], "melt": [225, 823], "merge_sort": [226, 824], "min": [227, 298, 349, 506, 546, 738, 825, 868, 913, 976, 1072, 1098, 1249], "min_horizont": [228, 739], "n_chunk": [229, 1100], "n_uniqu": [230, 299, 350, 507, 550, 740, 869, 914, 1073, 1101], "null_count": [231, 566, 826, 1107], "partition_bi": 232, "pipe": [233, 572, 827], "pivot": 234, "product": [235, 574, 1111], "quantil": [236, 300, 576, 743, 829, 870, 1113], "rechunk": [237, 579, 1115], "renam": [238, 830, 1117], "replace_column": 239, "revers": [240, 351, 508, 584, 646, 831, 915, 1074, 1120, 1176, 1254], "roll": [241, 587, 832], "row": [242, 243], "rows_by_kei": 244, "sampl": [245, 509, 608, 1075, 1135], "schema": [246, 833, 881, 1202], "select": [247, 310, 748, 774, 834, 878, 1236, 1248], "select_seq": [248, 835], "serial": [249, 309, 542, 836, 877], "set_sort": [250, 610, 837, 1139], "shape": [251, 1140], "shift": [252, 352, 514, 611, 838, 916, 1080, 1141], "shrink_to_fit": [253, 1143], "slice": [254, 515, 618, 647, 840, 1081, 1149, 1177], "sort": [255, 353, 516, 619, 841, 917, 1082, 1150], "sql": [256, 749, 842, 1248, 1252, 1257, 1258], "std": [257, 354, 517, 622, 751, 843, 918, 1083, 1152], "sum": [258, 301, 355, 518, 673, 753, 844, 871, 919, 1084, 1204, 1249], "sum_horizont": [259, 754], "tail": [260, 302, 519, 658, 674, 755, 845, 872, 1085, 1188, 1205], "to_arrow": [261, 1208], "to_dict": [262, 263], "to_dummi": [264, 1209], "to_init_repr": [265, 1211], "to_jax": [266, 1212], "to_numpi": [267, 1214], "to_panda": [268, 1215], "to_seri": 269, "to_struct": [270, 357, 521, 921, 1087], "to_torch": [271, 1217], "top_k": [272, 678, 846, 1218], "transpos": 273, "uniqu": [274, 358, 522, 681, 847, 922, 1088, 1219], "unnest": [275, 848, 1203, 1250, 1260], "unstack": 276, "updat": [277, 849], "upsampl": 278, "var": [279, 359, 523, 685, 759, 850, 923, 1089, 1223], "vstack": 280, "width": [281, 851], "with_column": [282, 852], "with_columns_seq": [283, 853], "with_row_count": [284, 855], "with_row_index": [285, 856], "groupbi": [286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 307, 875], "__iter__": 286, "agg": [287, 857], "all": [288, 320, 336, 484, 688, 858, 886, 900, 1050, 1259], "first": [290, 343, 448, 495, 719, 807, 860, 907, 1061, 1249], "last": [292, 346, 480, 501, 728, 816, 862, 910, 1067, 1249], "len": [293, 482, 502, 729, 863, 1048, 1068], "map_group": [294, 732, 864], "attribut": [303, 873, 1226], "comput": [304, 768, 1230], "descript": [305, 874, 1231], "export": [306, 1232], "miscellan": [309, 773, 781, 877, 1235], "manipul": [310, 774, 878, 1236], "plot": [311, 1237], "style": 312, "data": 313, "type": 313, "numer": [313, 776], "tempor": [313, 779, 1240, 1255], "nest": 313, "other": 313, "error": 314, "warn": 314, "panic": 314, "expr": [316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687], "ab": [316, 884, 1253], "add": 317, "agg_group": 318, "alia": [319, 885], "and_": 321, "ani": [322, 337, 485, 690, 887, 901, 1051], "append": [323, 888], "arcco": [325, 889], "arccosh": [326, 890], "arcsin": [327, 891], "arcsinh": [328, 892], "arctan": [329, 893], "arctanh": [330, 894], "arg_max": [331, 338, 486, 895, 902, 1052], "arg_min": [332, 339, 487, 896, 903, 1053], "arg_sort": [333, 897], "arg_tru": [334, 898], "arg_uniqu": [335, 899], "arr": [336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923], "contain": [340, 361, 489, 624, 904, 924, 1055, 1154], "count_match": [341, 490, 626, 905, 1056, 1156], "get": [344, 457, 498, 908, 1064], "to_list": [356, 920, 1213], "backward_fil": 360, "bin": [361, 362, 363, 364, 365, 924, 925, 926, 927, 928], "decod": [362, 627, 925, 1157], "encod": [363, 628, 926, 1158], "ends_with": [364, 629, 927, 1159, 1254], "starts_with": [365, 651, 928, 1181, 1254], "bottom_k_bi": 367, "cat": [369, 931, 932, 933, 934], "get_categori": [369, 931], "cbrt": [370, 935, 1253], "ceil": [371, 936, 1253], "clip": [372, 939], "co": [373, 941, 1256], "cosh": [374, 942], "cot": [375, 943, 1256], "cum_count": [377, 705, 944], "cum_max": [378, 945], "cum_min": [379, 946], "cum_prod": [380, 947], "cum_sum": [381, 708, 948], "cumulative_ev": [382, 949], "cut": [383, 950], "degre": [384, 1256], "diff": [386, 491, 952, 1057], "dot": [387, 953], "drop_nan": [388, 954], "dt": [390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "add_business_dai": [390, 956], "base_utc_offset": [391, 957], "cast_time_unit": [392, 958], "centuri": [393, 959], "combin": [394, 960], "convert_time_zon": [395, 961], "dai": [398, 964], "dst_offset": [399, 965], "epoch": [400, 966], "hour": [401, 967], "is_leap_year": [402, 968], "iso_year": [403, 969], "microsecond": [404, 973], "millennium": [405, 974], "millisecond": [406, 975], "minut": [407, 977], "month": [408, 978], "month_end": [409, 979], "month_start": [410, 980], "nanosecond": [411, 981], "offset_bi": [412, 982], "ordinal_dai": [413, 983], "quarter": [414, 984], "replace_time_zon": [415, 985], "round": [416, 606, 986, 1133, 1253], "second": [417, 987], "strftime": [418, 988], "timestamp": [420, 990], "to_str": [421, 991], "total_dai": [422, 992], "total_hour": [423, 993], "total_microsecond": [424, 994], "total_millisecond": [425, 995], "total_minut": [426, 996], "total_nanosecond": [427, 997], "total_second": [428, 998], "truncat": [429, 999, 1260], "week": [430, 1000], "weekdai": [431, 1001], "with_time_unit": [432, 1002], "year": [433, 1003], "entropi": [434, 1005], "eq": [435, 534], "eq_miss": 436, "ewm_mean": [437, 1008], "ewm_mean_bi": [438, 1009], "ewm_std": [439, 1010], "ewm_var": [440, 1011], "exclud": [441, 718], "exp": [442, 1012, 1253], "extend_const": [444, 1015], "flatten": 449, "floor": [450, 1020, 1253], "floordiv": 451, "forward_fil": 452, "from_json": 453, "gather": [454, 496, 1021, 1062], "ge": 456, "gt": 458, "has_nul": [459, 1024], "hash": [460, 1026], "hist": [462, 1028], "implod": [463, 725, 1029], "inspect": [464, 812], "interpolate_bi": [466, 1031], "is_between": [467, 1032], "is_finit": [469, 1035], "is_first_distinct": [470, 1036], "is_in": [471, 1037], "is_infinit": [472, 1038], "is_last_distinct": [473, 1039], "is_nan": [474, 1040], "is_not_nan": [475, 1041], "is_not_nul": [476, 1042], "is_nul": [477, 1043], "kurtosi": [479, 1047], "le": 481, "eval": [493, 1059], "set_differ": [510, 1076], "set_intersect": [511, 1077], "set_symmetric_differ": [512, 1078], "set_union": [513, 1079], "to_arrai": [520, 1086], "log": [524, 1090, 1253], "log10": [525, 1091, 1253], "log1p": [526, 1092, 1253], "lower_bound": [527, 1093], "lt": 528, "map_batch": [529, 731, 819], "map_el": [530, 1094], "meta": [534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 772], "has_multiple_output": 535, "is_column_select": 536, "is_regex_project": 537, "ne": [538, 562], "output_nam": 539, "pop": 540, "root_nam": 541, "tree_format": 543, "undo_alias": 544, "mod": [547, 1253], "mode": [548, 1099], "mul": 549, "name": [551, 552, 553, 554, 555, 556, 557, 558, 559, 767, 775, 1102, 1259], "keep": 551, "map": 552, "map_field": 553, "prefix": 554, "prefix_field": 555, "suffix": 556, "suffix_field": 557, "to_lowercas": [558, 663, 1193], "to_uppercas": [559, 666, 1196], "nan_max": [560, 1103], "nan_min": [561, 1104], "ne_miss": 563, "neg": 564, "not_": [565, 1106], "or_": 567, "over": 568, "pct_chang": [569, 1108], "peak_max": [570, 1109], "peak_min": [571, 1110], "pow": [573, 1253], "qcut": [575, 1112], "radian": [577, 1256], "rank": [578, 1114], "reinterpret": [580, 1116], "repeat_bi": 581, "replac": [582, 643, 1118, 1173, 1254], "reshap": [583, 1119], "rle": [585, 1121], "rle_id": [586, 1122], "rolling_map": [588, 1123], "rolling_max": [589, 1124], "rolling_max_bi": 590, "rolling_mean": [591, 1125], "rolling_mean_bi": 592, "rolling_median": [593, 1126], "rolling_median_bi": 594, "rolling_min": [595, 1127], "rolling_min_bi": 596, "rolling_quantil": [597, 1128], "rolling_quantile_bi": 598, "rolling_skew": [599, 1129], "rolling_std": [600, 1130], "rolling_std_bi": 601, "rolling_sum": [602, 1131], "rolling_sum_bi": 603, "rolling_var": [604, 1132], "rolling_var_bi": 605, "round_sig_fig": [607, 1134], "search_sort": [609, 1137], "shrink_dtyp": [612, 1142], "shuffl": [613, 1144], "sign": [614, 1145, 1253], "sin": [615, 1146, 1256], "sinh": [616, 1147], "skew": [617, 1148], "sort_bi": 620, "sqrt": [621, 1151, 1253], "str": [623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197], "contains_ani": [625, 1155], "extract": [631, 1161, 1255], "extract_al": [632, 1162], "extract_group": [633, 1163], "find": [634, 1164], "json_decod": [637, 1167], "json_path_match": [638, 1168], "len_byt": [639, 1169], "len_char": [640, 1170], "pad_end": [641, 1171], "pad_start": [642, 1172], "replace_al": [644, 1174], "replace_mani": [645, 1175], "split": [648, 1178], "split_exact": [649, 1179], "splitn": [650, 1180], "strip_char": [652, 1182], "strip_chars_end": [653, 1183], "strip_chars_start": [654, 1184], "strip_prefix": [655, 1185], "strip_suffix": [656, 1186], "strptime": [657, 1187], "to_dat": [659, 1189], "to_datetim": [660, 1190], "to_decim": [661, 1191], "to_integ": [662, 1192], "to_tim": [664, 1194], "to_titlecas": [665, 1195], "zfill": [667, 1197], "field": [668, 1198, 1199], "json_encod": [669, 1200], "rename_field": [670, 1201], "with_field": 671, "sub": 672, "tan": [675, 1206, 1256], "tanh": [676, 1207], "to_phys": [677, 1216], "top_k_bi": 679, "truediv": 680, "unique_count": [682, 1220], "upper_bound": [683, 1221], "value_count": [684, 1222], "where": [686, 1248], "xor": 687, "all_horizont": 689, "any_horizont": 691, "arang": 693, "arctan2": 694, "arctan2d": 695, "arg_sort_bi": 696, "arg_wher": 697, "business_day_count": 698, "coalesc": [699, 1251], "concat_list": 700, "concat_str": 701, "cov": 704, "cum_fold": 706, "cum_reduc": 707, "cum_sum_horizont": 709, "date_rang": [711, 712], "datetime_rang": [714, 715], "element": 717, "format": 721, "from_epoch": 722, "group": [723, 1248], "int_rang": [726, 727], "lit": 730, "nth": 741, "ones": 742, "reduc": 744, "repeat": 745, "rolling_corr": 746, "rolling_cov": 747, "sql_expr": 750, "time_rang": [757, 758], "when": 760, "zero": 761, "categori": [765, 1229], "col": 766, "express": [770, 1258], "oper": [776, 882, 1259, 1260], "conjunct": 776, "comparison": 776, "window": 780, "convers": 781, "parallel": 781, "random": 781, "python": [782, 1258], "refer": 782, "input": 783, "output": 783, "avro": 783, "clipboard": 783, "databas": 783, "delta": 783, "lake": 783, "excel": 783, "od": 783, "feather": 783, "ipc": 783, "iceberg": 783, "json": 783, "parquet": 783, "pyarrow": 783, "dataset": 783, "cach": 787, "collect": 791, "collect_async": 792, "explain": [801, 1260], "fetch": 803, "profil": [828, 1261], "show_graph": 839, "with_context": 854, "lazygroupbi": [857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872], "metadata": 879, "plugin": 880, "selector": 882, "import": 882, "set": [882, 1138, 1259], "is_loc": 932, "to_loc": 933, "uses_lexical_ord": 934, "chunk_length": 937, "get_chunk": 1023, "has_valid": 1025, "is_sort": 1044, "new_from_index": 1105, "scatter": 1136, "to_fram": 1210, "zip_with": 1224, "sqlcontext": [1241, 1242, 1243, 1244, 1245, 1246, 1247, 1258], "execut": 1241, "execute_glob": 1242, "regist": 1243, "register_glob": 1244, "register_mani": 1245, "tabl": [1246, 1260], "unregist": 1247, "claus": 1248, "distinct": 1248, "from": 1248, "BY": [1248, 1259], "have": 1248, "order": 1248, "offset": 1248, "avg": 1249, "stddev": 1249, "alias": [1249, 1253, 1254], "varianc": 1249, "array_agg": 1250, "array_contain": 1250, "array_get": 1250, "array_length": 1250, "array_low": 1250, "array_mean": 1250, "array_revers": 1250, "array_sum": 1250, "array_to_str": 1250, "array_uniqu": 1250, "array_upp": 1250, "condit": 1251, "greatest": 1251, "IF": 1251, "ifnul": 1251, "least": 1251, "nullif": 1251, "math": 1253, "div": 1253, "ln": 1253, "log2": 1253, "pi": 1253, "bit_length": 1254, "concat_w": 1254, "initcap": 1254, "left": 1254, "length": 1254, "lower": 1254, "ltrim": 1254, "octet_length": 1254, "regexp_lik": 1254, "right": 1254, "rtrim": 1254, "strpo": 1254, "substr": 1254, "upper": 1254, "date_part": 1255, "trigonometri": 1256, "aco": 1256, "acosd": 1256, "asin": 1256, "asind": 1256, "atan": 1256, "atand": 1256, "atan2": 1256, "atan2d": 1256, "cotd": 1256, "cosd": 1256, "sind": 1256, "tand": 1256, "interfac": 1257, "introduct": 1258, "queri": 1258, "global": 1258, "document": 1258, "frame": 1258, "method": 1258, "intersect": 1259, "union": 1259, "creat": 1260, "show": 1260, "assert": 1261, "strategi": 1261, "helper": 1261}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.head": [[203, "polars-dataframe-head"]], "polars.DataFrame.join": [[215, "polars-dataframe-join"]], "polars.DataFrame.fill_null": [[191, "polars-dataframe-fill-null"]], "polars.DataFrame.join_asof": [[216, "polars-dataframe-join-asof"]], "polars.DataFrame.flags": [[193, "polars-dataframe-flags"]], "polars.DataFrame.max_horizontal": [[221, "polars-dataframe-max-horizontal"]], "polars.DataFrame.item": [[211, "polars-dataframe-item"]], "polars.DataFrame.cast": [[173, "polars-dataframe-cast"]], "Aggregation": [[169, "aggregation"], [784, "aggregation"], [883, "aggregation"], [315, "aggregation"]], "polars.DataFrame.mean_horizontal": [[223, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.filter": [[192, "polars-dataframe-filter"]], "polars.DataFrame.get_column_index": [[197, "polars-dataframe-get-column-index"]], "polars.DataFrame.clone": [[175, "polars-dataframe-clone"]], "polars.DataFrame.approx_n_unique": [[171, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.fill_nan": [[190, "polars-dataframe-fill-nan"]], "polars.DataFrame.is_empty": [[209, "polars-dataframe-is-empty"]], "polars.DataFrame.insert_column": [[206, "polars-dataframe-insert-column"]], "polars.DataFrame.interpolate": [[207, "polars-dataframe-interpolate"]], "polars.DataFrame.get_columns": [[198, "polars-dataframe-get-columns"]], "polars.DataFrame.drop_in_place": [[183, "polars-dataframe-drop-in-place"]], "polars.DataFrame.mean": [[222, "polars-dataframe-mean"]], "polars.DataFrame.iter_columns": [[212, "polars-dataframe-iter-columns"]], "polars.DataFrame.hash_rows": [[202, "polars-dataframe-hash-rows"]], "polars.DataFrame.deserialize": [[181, "polars-dataframe-deserialize"]], "polars.DataFrame.columns": [[177, "polars-dataframe-columns"]], "polars.DataFrame.__dataframe__": [[170, "polars-dataframe-dataframe"]], "polars.DataFrame.dtypes": [[185, "polars-dataframe-dtypes"]], "polars.DataFrame.describe": [[180, "polars-dataframe-describe"]], "polars.DataFrame.iter_rows": [[213, "polars-dataframe-iter-rows"]], "polars.DataFrame.bottom_k": [[172, "polars-dataframe-bottom-k"]], "polars.DataFrame.drop_nulls": [[184, "polars-dataframe-drop-nulls"]], "polars.DataFrame.group_by_dynamic": [[201, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.collect_schema": [[176, "polars-dataframe-collect-schema"]], "polars.DataFrame.map_rows": [[219, "polars-dataframe-map-rows"]], "polars.DataFrame.count": [[179, "polars-dataframe-count"]], "polars.DataFrame.max": [[220, "polars-dataframe-max"]], "polars.DataFrame.clear": [[174, "polars-dataframe-clear"]], "polars.DataFrame.is_duplicated": [[208, "polars-dataframe-is-duplicated"]], "Config": [[168, "config"]], "Config options": [[168, "config-options"]], "Config load, save, state": [[168, "config-load-save-state"]], "Use as a context manager": [[168, "use-as-a-context-manager"]], "Use as a decorator": [[168, "use-as-a-decorator"]], "polars.DataFrame.limit": [[218, "polars-dataframe-limit"]], "polars.DataFrame.hstack": [[205, "polars-dataframe-hstack"]], "polars.DataFrame.explode": [[188, "polars-dataframe-explode"]], "polars.DataFrame.iter_slices": [[214, "polars-dataframe-iter-slices"]], "polars.DataFrame.drop": [[182, "polars-dataframe-drop"]], "polars.DataFrame.group_by": [[200, "polars-dataframe-group-by"]], "polars.DataFrame.height": [[204, "polars-dataframe-height"]], "polars.DataFrame.extend": [[189, "polars-dataframe-extend"]], "polars.DataFrame.lazy": [[217, "polars-dataframe-lazy"]], "polars.DataFrame.get_column": [[196, "polars-dataframe-get-column"]], "polars.DataFrame.fold": [[194, "polars-dataframe-fold"]], "polars.DataFrame.corr": [[178, "polars-dataframe-corr"]], "polars.DataFrame.is_unique": [[210, "polars-dataframe-is-unique"]], "polars.DataFrame.gather_every": [[195, "polars-dataframe-gather-every"]], "polars.DataFrame.equals": [[186, "polars-dataframe-equals"]], "polars.DataFrame.glimpse": [[199, "polars-dataframe-glimpse"]], "polars.DataFrame.estimated_size": [[187, "polars-dataframe-estimated-size"]], "polars.Config.set_streaming_chunk_size": [[14, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_column_data_type_inline": [[18, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_rows": [[25, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_formatting": [[20, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_dataframe_shape_below": [[19, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_thousands_separator": [[27, "polars-config-set-thousands-separator"]], "polars.LazyFrame.sink_ipc": [[43, "polars-lazyframe-sink-ipc"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.api.register_expr_namespace": [[49, "polars-api-register-expr-namespace"]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.restore_defaults": [[4, "polars-config-restore-defaults"]], "polars.DataFrame.write_clipboard": [[32, "polars-dataframe-write-clipboard"]], "polars.Config.load_from_file": [[3, "polars-config-load-from-file"]], "polars.Config.set_trim_decimal_zeros": [[28, "polars-config-set-trim-decimal-zeros"]], "polars.Config.save_to_file": [[6, "polars-config-save-to-file"]], "polars.Config.set_decimal_separator": [[9, "polars-config-set-decimal-separator"]], "polars.DataFrame.write_ndjson": [[40, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_csv": [[33, "polars-dataframe-write-csv"]], "polars.Config.state": [[30, "polars-config-state"]], "polars.DataFrame.write_ipc_stream": [[38, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_parquet": [[41, "polars-dataframe-write-parquet"]], "polars.collect_all": [[53, "polars-collect-all"]], "polars.Config.set_tbl_hide_dtype_separator": [[24, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_cell_alignment": [[15, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_width_chars": [[26, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_delta": [[35, "polars-dataframe-write-delta"]], "polars.api.register_dataframe_namespace": [[48, "polars-api-register-dataframe-namespace"]], "polars.collect_all_async": [[54, "polars-collect-all-async"]], "polars.Config.set_tbl_hide_column_data_types": [[21, "polars-config-set-tbl-hide-column-data-types"]], "polars.build_info": [[52, "polars-build-info"]], "Index": [[0, "index"]], "polars.DataFrame.write_database": [[34, "polars-dataframe-write-database"]], "polars.Config.set_auto_structify": [[8, "polars-config-set-auto-structify"]], "polars.Config.set_float_precision": [[10, "polars-config-set-float-precision"]], "polars.Config.load": [[2, "polars-config-load"]], "polars.Config.set_fmt_table_cell_list_len": [[13, "polars-config-set-fmt-table-cell-list-len"]], "polars.LazyFrame.sink_ndjson": [[44, "polars-lazyframe-sink-ndjson"]], "polars.api.register_series_namespace": [[51, "polars-api-register-series-namespace"]], "polars.LazyFrame.sink_parquet": [[45, "polars-lazyframe-sink-parquet"]], "polars.Config.set_verbose": [[29, "polars-config-set-verbose"]], "polars.LazyFrame.sink_csv": [[42, "polars-lazyframe-sink-csv"]], "polars.Config.set_tbl_hide_column_names": [[22, "polars-config-set-tbl-hide-column-names"]], "polars.align_frames": [[47, "polars-align-frames"]], "polars.Config.set_ascii_tables": [[7, "polars-config-set-ascii-tables"]], "polars.concat": [[55, "polars-concat"]], "polars.api.register_lazyframe_namespace": [[50, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.DataFrame.write_ipc": [[37, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_avro": [[31, "polars-dataframe-write-avro"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.DataFrame.write_excel": [[36, "polars-dataframe-write-excel"]], "polars.Config.save": [[5, "polars-config-save"]], "polars.Config.set_tbl_cols": [[17, "polars-config-set-tbl-cols"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1261, "examples"], [1237, "examples"], [882, "examples"], [311, "examples"]], "polars.DataFrame.write_json": [[39, "polars-dataframe-write-json"]], "polars.using_string_cache": [[167, "polars-using-string-cache"]], "polars.exceptions.UnstableWarning": [[114, "polars-exceptions-unstablewarning"]], "polars.from_repr": [[123, "polars-from-repr"]], "polars.testing.parametric.dataframes": [[159, "polars-testing-parametric-dataframes"]], "polars.read_ods": [[140, "polars-read-ods"]], "polars.scan_parquet": [[148, "polars-scan-parquet"]], "polars.scan_csv": [[143, "polars-scan-csv"]], "polars.set_random_seed": [[150, "polars-set-random-seed"]], "polars.testing.parametric.set_profile": [[164, "polars-testing-parametric-set-profile"]], "polars.from_dict": [[118, "polars-from-dict"]], "polars.show_versions": [[151, "polars-show-versions"]], "polars.read_ipc_stream": [[137, "polars-read-ipc-stream"]], "polars.read_avro": [[127, "polars-read-avro"]], "polars.scan_iceberg": [[145, "polars-scan-iceberg"]], "polars.testing.assert_series_not_equal": [[155, "polars-testing-assert-series-not-equal"]], "polars.testing.parametric.lists": [[161, "polars-testing-parametric-lists"]], "polars.read_clipboard": [[128, "polars-read-clipboard"]], "polars.threadpool_size": [[166, "polars-threadpool-size"]], "polars.read_parquet": [[141, "polars-read-parquet"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[125, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.testing.parametric.load_profile": [[162, "polars-testing-parametric-load-profile"]], "polars.from_arrow": [[116, "polars-from-arrow"]], "polars.from_records": [[122, "polars-from-records"]], "polars.testing.assert_frame_not_equal": [[153, "polars-testing-assert-frame-not-equal"]], "polars.json_normalize": [[126, "polars-json-normalize"]], "polars.read_ndjson": [[139, "polars-read-ndjson"]], "polars.testing.parametric.columns": [[157, "polars-testing-parametric-columns"]], "polars.testing.parametric.dtypes": [[160, "polars-testing-parametric-dtypes"]], "polars.get_index_type": [[124, "polars-get-index-type"]], "polars.scan_ndjson": [[147, "polars-scan-ndjson"]], "polars.read_csv_batched": [[130, "polars-read-csv-batched"]], "polars.testing.parametric.series": [[163, "polars-testing-parametric-series"]], "polars.read_excel": [[134, "polars-read-excel"]], "polars.testing.assert_frame_equal": [[152, "polars-testing-assert-frame-equal"]], "polars.testing.parametric.column": [[156, "polars-testing-parametric-column"]], "polars.thread_pool_size": [[165, "polars-thread-pool-size"]], "polars.read_database_uri": [[132, "polars-read-database-uri"]], "polars.read_database": [[131, "polars-read-database"]], "polars.scan_pyarrow_dataset": [[149, "polars-scan-pyarrow-dataset"]], "polars.testing.parametric.create_list_strategy": [[158, "polars-testing-parametric-create-list-strategy"]], "polars.exceptions.StructFieldNotFoundError": [[112, "polars-exceptions-structfieldnotfounderror"]], "polars.read_delta": [[133, "polars-read-delta"]], "polars.read_ipc": [[135, "polars-read-ipc"]], "polars.exceptions.UnsuitableSQLError": [[115, "polars-exceptions-unsuitablesqlerror"]], "polars.from_numpy": [[120, "polars-from-numpy"]], "polars.exceptions.TooManyRowsReturnedError": [[113, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_dataframe": [[117, "polars-from-dataframe"]], "polars.read_ipc_schema": [[136, "polars-read-ipc-schema"]], "polars.read_csv": [[129, "polars-read-csv"]], "polars.read_json": [[138, "polars-read-json"]], "polars.from_pandas": [[121, "polars-from-pandas"]], "polars.scan_delta": [[144, "polars-scan-delta"]], "polars.from_dicts": [[119, "polars-from-dicts"]], "polars.testing.assert_series_equal": [[154, "polars-testing-assert-series-equal"]], "polars.scan_ipc": [[146, "polars-scan-ipc"]], "polars.read_parquet_schema": [[142, "polars-read-parquet-schema"]], "polars.Series.str.to_time": [[1194, "polars-series-str-to-time"]], "polars.Series.struct.rename_fields": [[1201, "polars-series-struct-rename-fields"]], "Computation": [[1230, "computation"], [768, "computation"], [304, "computation"]], "polars.Series.to_pandas": [[1215, "polars-series-to-pandas"]], "polars.Series.str.to_uppercase": [[1196, "polars-series-str-to-uppercase"]], "polars.Series.str.split": [[1178, "polars-series-str-split"]], "polars.Series.tanh": [[1207, "polars-series-tanh"]], "polars.Series.unique_counts": [[1220, "polars-series-unique-counts"]], "polars.Series.str.strip_suffix": [[1186, "polars-series-str-strip-suffix"]], "polars.Series.struct.schema": [[1202, "polars-series-struct-schema"]], "Binary": [[1227, "binary"], [763, "binary"], [776, "binary"]], "polars.Series.str.strip_chars_end": [[1183, "polars-series-str-strip-chars-end"]], "polars.Series.str.to_integer": [[1192, "polars-series-str-to-integer"]], "polars.Series.str.strip_prefix": [[1185, "polars-series-str-strip-prefix"]], "polars.Series.str.zfill": [[1197, "polars-series-str-zfill"]], "polars.Series.str.split_exact": [[1179, "polars-series-str-split-exact"]], "polars.Series.struct.field": [[1198, "polars-series-struct-field"]], "polars.Series.to_numpy": [[1214, "polars-series-to-numpy"]], "polars.Series.to_dummies": [[1209, "polars-series-to-dummies"]], "polars.Series.var": [[1223, "polars-series-var"]], "Descriptive": [[1231, "descriptive"], [874, "descriptive"], [305, "descriptive"]], "polars.Series.str.splitn": [[1180, "polars-series-str-splitn"]], "polars.Series.str.to_datetime": [[1190, "polars-series-str-to-datetime"]], "polars.Series.str.to_titlecase": [[1195, "polars-series-str-to-titlecase"]], "polars.Series.zip_with": [[1224, "polars-series-zip-with"]], "Array": [[1225, "array"], [1250, "array"], [762, "array"]], "polars.Series.tail": [[1205, "polars-series-tail"]], "polars.Series.to_jax": [[1212, "polars-series-to-jax"]], "polars.Series.str.to_lowercase": [[1193, "polars-series-str-to-lowercase"]], "polars.Series.to_physical": [[1216, "polars-series-to-physical"]], "polars.Series.str.strptime": [[1187, "polars-series-str-strptime"]], "polars.Series.struct.fields": [[1199, "polars-series-struct-fields"]], "Attributes": [[1226, "attributes"], [873, "attributes"], [303, "attributes"]], "polars.Series.upper_bound": [[1221, "polars-series-upper-bound"]], "polars.Series.str.to_decimal": [[1191, "polars-series-str-to-decimal"]], "polars.Series.top_k": [[1218, "polars-series-top-k"]], "polars.Series.str.tail": [[1188, "polars-series-str-tail"]], "polars.Series.value_counts": [[1222, "polars-series-value-counts"]], "polars.Series.struct.unnest": [[1203, "polars-series-struct-unnest"]], "polars.Series.to_torch": [[1217, "polars-series-to-torch"]], "polars.Series.to_init_repr": [[1211, "polars-series-to-init-repr"]], "polars.Series.to_list": [[1213, "polars-series-to-list"]], "polars.Series.str.starts_with": [[1181, "polars-series-str-starts-with"]], "polars.Series.to_frame": [[1210, "polars-series-to-frame"]], "polars.Series.struct.json_encode": [[1200, "polars-series-struct-json-encode"]], "polars.Series.tan": [[1206, "polars-series-tan"]], "polars.Series.str.strip_chars_start": [[1184, "polars-series-str-strip-chars-start"]], "polars.Series.sum": [[1204, "polars-series-sum"]], "Categories": [[1229, "categories"], [765, "categories"]], "polars.Series.str.to_date": [[1189, "polars-series-str-to-date"]], "polars.Series.unique": [[1219, "polars-series-unique"]], "polars.Series.str.slice": [[1177, "polars-series-str-slice"]], "polars.Series.str.strip_chars": [[1182, "polars-series-str-strip-chars"]], "Boolean": [[1228, "boolean"], [764, "boolean"]], "polars.Series.str.reverse": [[1176, "polars-series-str-reverse"]], "polars.Series.to_arrow": [[1208, "polars-series-to-arrow"]], "polars.Series.rolling_min": [[1127, "polars-series-rolling-min"]], "polars.Series.rle_id": [[1122, "polars-series-rle-id"]], "polars.Series.shrink_to_fit": [[1143, "polars-series-shrink-to-fit"]], "polars.Series.set_sorted": [[1139, "polars-series-set-sorted"]], "polars.Series.shape": [[1140, "polars-series-shape"]], "polars.Series.str.explode": [[1160, "polars-series-str-explode"]], "polars.Series.sample": [[1135, "polars-series-sample"]], "polars.Series.str.decode": [[1157, "polars-series-str-decode"]], "polars.Series.str.len_chars": [[1170, "polars-series-str-len-chars"]], "polars.Series.search_sorted": [[1137, "polars-series-search-sorted"]], "polars.Series.slice": [[1149, "polars-series-slice"]], "polars.Series.str.concat": [[1153, "polars-series-str-concat"]], "polars.Series.rolling_std": [[1130, "polars-series-rolling-std"]], "polars.Series.rolling_map": [[1123, "polars-series-rolling-map"]], "polars.Series.str.join": [[1166, "polars-series-str-join"]], "polars.Series.str.json_path_match": [[1168, "polars-series-str-json-path-match"]], "polars.Series.str.replace_all": [[1174, "polars-series-str-replace-all"]], "polars.Series.reverse": [[1120, "polars-series-reverse"]], "polars.Series.std": [[1152, "polars-series-std"]], "polars.Series.sin": [[1146, "polars-series-sin"]], "polars.Series.sort": [[1150, "polars-series-sort"]], "polars.Series.str.contains_any": [[1155, "polars-series-str-contains-any"]], "polars.Series.rolling_var": [[1132, "polars-series-rolling-var"]], "polars.Series.round": [[1133, "polars-series-round"]], "polars.Series.set": [[1138, "polars-series-set"]], "polars.Series.str.replace_many": [[1175, "polars-series-str-replace-many"]], "polars.Series.sinh": [[1147, "polars-series-sinh"]], "polars.Series.str.head": [[1165, "polars-series-str-head"]], "polars.Series.rolling_max": [[1124, "polars-series-rolling-max"]], "polars.Series.str.len_bytes": [[1169, "polars-series-str-len-bytes"]], "polars.Series.str.pad_start": [[1172, "polars-series-str-pad-start"]], "polars.Series.str.encode": [[1158, "polars-series-str-encode"]], "polars.Series.str.json_decode": [[1167, "polars-series-str-json-decode"]], "polars.Series.shift": [[1141, "polars-series-shift"]], "polars.Series.rolling_mean": [[1125, "polars-series-rolling-mean"]], "polars.Series.rolling_skew": [[1129, "polars-series-rolling-skew"]], "polars.Series.rle": [[1121, "polars-series-rle"]], "polars.Series.round_sig_figs": [[1134, "polars-series-round-sig-figs"]], "polars.Series.str.contains": [[1154, "polars-series-str-contains"]], "polars.Series.rolling_median": [[1126, "polars-series-rolling-median"]], "polars.Series.skew": [[1148, "polars-series-skew"]], "polars.Series.shuffle": [[1144, "polars-series-shuffle"]], "polars.Series.sqrt": [[1151, "polars-series-sqrt"]], "polars.Series.rolling_quantile": [[1128, "polars-series-rolling-quantile"]], "polars.Series.str.extract_all": [[1162, "polars-series-str-extract-all"]], "polars.Series.str.extract_groups": [[1163, "polars-series-str-extract-groups"]], "polars.Series.sign": [[1145, "polars-series-sign"]], "polars.Series.str.extract": [[1161, "polars-series-str-extract"]], "polars.Series.rolling_sum": [[1131, "polars-series-rolling-sum"]], "polars.Series.str.count_matches": [[1156, "polars-series-str-count-matches"]], "polars.Series.str.ends_with": [[1159, "polars-series-str-ends-with"]], "polars.Series.scatter": [[1136, "polars-series-scatter"]], "polars.Series.str.replace": [[1173, "polars-series-str-replace"]], "polars.Series.str.pad_end": [[1171, "polars-series-str-pad-end"]], "polars.Series.shrink_dtype": [[1142, "polars-series-shrink-dtype"]], "polars.Series.str.find": [[1164, "polars-series-str-find"]], "polars.exceptions.ShapeError": [[110, "polars-exceptions-shapeerror"]], "polars.exceptions.ChronoFormatWarning": [[87, "polars-exceptions-chronoformatwarning"]], "polars.datatypes.Utf8": [[83, "polars-datatypes-utf8"]], "polars.exceptions.ModuleUpgradeRequiredError": [[95, "polars-exceptions-moduleupgraderequirederror"]], "polars.datatypes.Duration": [[64, "polars-datatypes-duration"]], "polars.datatypes.Decimal": [[63, "polars-datatypes-decimal"]], "polars.exceptions.NoRowsReturnedError": [[97, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.ParameterCollisionError": [[100, "polars-exceptions-parametercollisionerror"]], "polars.exceptions.PerformanceWarning": [[101, "polars-exceptions-performancewarning"]], "polars.datatypes.UInt32": [[79, "polars-datatypes-uint32"]], "polars.exceptions.SchemaError": [[108, "polars-exceptions-schemaerror"]], "polars.datatypes.String": [[75, "polars-datatypes-string"]], "polars.datatypes.UInt16": [[78, "polars-datatypes-uint16"]], "polars.exceptions.ComputeError": [[89, "polars-exceptions-computeerror"]], "polars.datatypes.Int32": [[69, "polars-datatypes-int32"]], "polars.datatypes.Int64": [[70, "polars-datatypes-int64"]], "polars.datatypes.Struct": [[76, "polars-datatypes-struct"]], "polars.datatypes.Time": [[77, "polars-datatypes-time"]], "polars.exceptions.DataOrientationWarning": [[91, "polars-exceptions-dataorientationwarning"]], "polars.exceptions.OutOfBoundsError": [[98, "polars-exceptions-outofboundserror"]], "polars.disable_string_cache": [[84, "polars-disable-string-cache"]], "polars.datatypes.Datetime": [[62, "polars-datatypes-datetime"]], "polars.datatypes.Int16": [[68, "polars-datatypes-int16"]], "polars.exceptions.SQLSyntaxError": [[107, "polars-exceptions-sqlsyntaxerror"]], "polars.datatypes.Enum": [[65, "polars-datatypes-enum"]], "polars.exceptions.PolarsWarning": [[104, "polars-exceptions-polarswarning"]], "polars.exceptions.DuplicateError": [[92, "polars-exceptions-duplicateerror"]], "polars.datatypes.Object": [[74, "polars-datatypes-object"]], "polars.datatypes.List": [[72, "polars-datatypes-list"]], "polars.datatypes.Categorical": [[59, "polars-datatypes-categorical"]], "polars.datatypes.Float32": [[66, "polars-datatypes-float32"]], "polars.datatypes.Binary": [[57, "polars-datatypes-binary"]], "polars.exceptions.SchemaFieldNotFoundError": [[109, "polars-exceptions-schemafieldnotfounderror"]], "polars.datatypes.UInt64": [[80, "polars-datatypes-uint64"]], "polars.exceptions.PanicException": [[99, "polars-exceptions-panicexception"]], "polars.exceptions.PolarsError": [[102, "polars-exceptions-polarserror"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.NoDataError": [[96, "polars-exceptions-nodataerror"]], "polars.datatypes.Float64": [[67, "polars-datatypes-float64"]], "polars.exceptions.SQLInterfaceError": [[106, "polars-exceptions-sqlinterfaceerror"]], "polars.datatypes.Array": [[56, "polars-datatypes-array"]], "polars.exceptions.CategoricalRemappingWarning": [[86, "polars-exceptions-categoricalremappingwarning"]], "polars.exceptions.StringCacheMismatchError": [[111, "polars-exceptions-stringcachemismatcherror"]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[94, "polars-exceptions-mapwithoutreturndtypewarning"]], "polars.exceptions.RowsError": [[105, "polars-exceptions-rowserror"]], "polars.datatypes.DataType": [[60, "polars-datatypes-datatype"]], "polars.datatypes.Unknown": [[82, "polars-datatypes-unknown"]], "polars.exceptions.PolarsInefficientMapWarning": [[103, "polars-exceptions-polarsinefficientmapwarning"]], "polars.datatypes.Date": [[61, "polars-datatypes-date"]], "polars.exceptions.ColumnNotFoundError": [[88, "polars-exceptions-columnnotfounderror"]], "polars.datatypes.Null": [[73, "polars-datatypes-null"]], "polars.exceptions.CustomUFuncWarning": [[90, "polars-exceptions-customufuncwarning"]], "polars.datatypes.Boolean": [[58, "polars-datatypes-boolean"]], "polars.enable_string_cache": [[85, "polars-enable-string-cache"]], "polars.datatypes.Int8": [[71, "polars-datatypes-int8"]], "polars.datatypes.UInt8": [[81, "polars-datatypes-uint8"]], "polars.Series.log1p": [[1092, "polars-series-log1p"]], "polars.Series.list.tail": [[1085, "polars-series-list-tail"]], "polars.Series.null_count": [[1107, "polars-series-null-count"]], "polars.Series.name": [[1102, "polars-series-name"]], "polars.Series.peak_min": [[1110, "polars-series-peak-min"]], "polars.Series.mean": [[1096, "polars-series-mean"]], "polars.Series.map_elements": [[1094, "polars-series-map-elements"]], "polars.Series.max": [[1095, "polars-series-max"]], "polars.Series.pct_change": [[1108, "polars-series-pct-change"]], "polars.Series.list.median": [[1071, "polars-series-list-median"]], "polars.Series.log10": [[1091, "polars-series-log10"]], "polars.Series.rechunk": [[1115, "polars-series-rechunk"]], "polars.Series.nan_min": [[1104, "polars-series-nan-min"]], "polars.Series.list.set_difference": [[1076, "polars-series-list-set-difference"]], "polars.Series.peak_max": [[1109, "polars-series-peak-max"]], "polars.Series.log": [[1090, "polars-series-log"]], "polars.Series.replace": [[1118, "polars-series-replace"]], "polars.Series.nan_max": [[1103, "polars-series-nan-max"]], "polars.Series.n_unique": [[1101, "polars-series-n-unique"]], "polars.Series.list.last": [[1067, "polars-series-list-last"]], "polars.Series.qcut": [[1112, "polars-series-qcut"]], "polars.Series.rename": [[1117, "polars-series-rename"]], "polars.Series.reshape": [[1119, "polars-series-reshape"]], "polars.Series.list.sample": [[1075, "polars-series-list-sample"]], "polars.Series.median": [[1097, "polars-series-median"]], "polars.Series.mode": [[1099, "polars-series-mode"]], "polars.Series.list.set_union": [[1079, "polars-series-list-set-union"]], "polars.Series.list.to_struct": [[1087, "polars-series-list-to-struct"]], "polars.Series.n_chunks": [[1100, "polars-series-n-chunks"]], "polars.Series.rank": [[1114, "polars-series-rank"]], "polars.Series.list.n_unique": [[1073, "polars-series-list-n-unique"]], "polars.Series.list.unique": [[1088, "polars-series-list-unique"]], "polars.Series.list.sum": [[1084, "polars-series-list-sum"]], "polars.Series.quantile": [[1113, "polars-series-quantile"]], "polars.Series.list.set_symmetric_difference": [[1078, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.head": [[1065, "polars-series-list-head"]], "polars.Series.list.min": [[1072, "polars-series-list-min"]], "polars.Series.list.join": [[1066, "polars-series-list-join"]], "polars.Series.product": [[1111, "polars-series-product"]], "polars.Series.list.set_intersection": [[1077, "polars-series-list-set-intersection"]], "polars.Series.list.reverse": [[1074, "polars-series-list-reverse"]], "polars.Series.list.sort": [[1082, "polars-series-list-sort"]], "polars.Series.list.std": [[1083, "polars-series-list-std"]], "polars.Series.lower_bound": [[1093, "polars-series-lower-bound"]], "polars.Series.list.var": [[1089, "polars-series-list-var"]], "polars.Series.list.slice": [[1081, "polars-series-list-slice"]], "polars.Series.new_from_index": [[1105, "polars-series-new-from-index"]], "polars.Series.list.len": [[1068, "polars-series-list-len"]], "polars.Series.list.max": [[1069, "polars-series-list-max"]], "polars.Series.list.to_array": [[1086, "polars-series-list-to-array"]], "polars.Series.not_": [[1106, "polars-series-not"]], "polars.Series.reinterpret": [[1116, "polars-series-reinterpret"]], "polars.Series.min": [[1098, "polars-series-min"]], "polars.Series.list.shift": [[1080, "polars-series-list-shift"]], "polars.Series.list.mean": [[1070, "polars-series-list-mean"]], "polars.Series.list.get": [[1064, "polars-series-list-get"]], "polars.Series.is_unique": [[1045, "polars-series-is-unique"]], "polars.Series.list.contains": [[1055, "polars-series-list-contains"]], "polars.Series.is_finite": [[1035, "polars-series-is-finite"]], "polars.Series.item": [[1046, "polars-series-item"]], "polars.Series.list.all": [[1050, "polars-series-list-all"]], "polars.Series.is_not_null": [[1042, "polars-series-is-not-null"]], "polars.Series.filter": [[1018, "polars-series-filter"]], "polars.Series.ewm_std": [[1010, "polars-series-ewm-std"]], "polars.Series.is_last_distinct": [[1039, "polars-series-is-last-distinct"]], "polars.Series.list.any": [[1051, "polars-series-list-any"]], "polars.Series.list.drop_nulls": [[1058, "polars-series-list-drop-nulls"]], "polars.Series.list.explode": [[1060, "polars-series-list-explode"]], "polars.Series.interpolate": [[1030, "polars-series-interpolate"]], "polars.Series.list.first": [[1061, "polars-series-list-first"]], "polars.Series.ewm_var": [[1011, "polars-series-ewm-var"]], "polars.Series.hash": [[1026, "polars-series-hash"]], "polars.Series.is_not_nan": [[1041, "polars-series-is-not-nan"]], "polars.Series.list.eval": [[1059, "polars-series-list-eval"]], "polars.Series.head": [[1027, "polars-series-head"]], "polars.Series.is_first_distinct": [[1036, "polars-series-is-first-distinct"]], "polars.Series.fill_nan": [[1016, "polars-series-fill-nan"]], "polars.Series.explode": [[1013, "polars-series-explode"]], "polars.Series.list.gather": [[1062, "polars-series-list-gather"]], "polars.Series.list.concat": [[1054, "polars-series-list-concat"]], "polars.Series.kurtosis": [[1047, "polars-series-kurtosis"]], "polars.Series.has_nulls": [[1024, "polars-series-has-nulls"]], "polars.Series.is_duplicated": [[1033, "polars-series-is-duplicated"]], "polars.Series.interpolate_by": [[1031, "polars-series-interpolate-by"]], "polars.Series.is_sorted": [[1044, "polars-series-is-sorted"]], "polars.Series.has_validity": [[1025, "polars-series-has-validity"]], "polars.Series.len": [[1048, "polars-series-len"]], "polars.Series.gather_every": [[1022, "polars-series-gather-every"]], "polars.Series.extend_constant": [[1015, "polars-series-extend-constant"]], "polars.Series.list.arg_min": [[1053, "polars-series-list-arg-min"]], "polars.Series.is_in": [[1037, "polars-series-is-in"]], "polars.Series.list.diff": [[1057, "polars-series-list-diff"]], "polars.Series.is_infinite": [[1038, "polars-series-is-infinite"]], "polars.Series.limit": [[1049, "polars-series-limit"]], "polars.Series.exp": [[1012, "polars-series-exp"]], "polars.Series.hist": [[1028, "polars-series-hist"]], "polars.Series.get_chunks": [[1023, "polars-series-get-chunks"]], "polars.Series.ewm_mean_by": [[1009, "polars-series-ewm-mean-by"]], "polars.Series.is_null": [[1043, "polars-series-is-null"]], "polars.Series.flags": [[1019, "polars-series-flags"]], "polars.Series.is_empty": [[1034, "polars-series-is-empty"]], "polars.Series.list.gather_every": [[1063, "polars-series-list-gather-every"]], "polars.Series.is_between": [[1032, "polars-series-is-between"]], "polars.Series.implode": [[1029, "polars-series-implode"]], "polars.Series.extend": [[1014, "polars-series-extend"]], "polars.Series.gather": [[1021, "polars-series-gather"]], "polars.Series.list.count_matches": [[1056, "polars-series-list-count-matches"]], "polars.Series.floor": [[1020, "polars-series-floor"]], "polars.Series.is_nan": [[1040, "polars-series-is-nan"]], "polars.Series.ewm_mean": [[1008, "polars-series-ewm-mean"]], "polars.Series.list.arg_max": [[1052, "polars-series-list-arg-max"]], "polars.Series.fill_null": [[1017, "polars-series-fill-null"]], "polars.Series.cast": [[930, "polars-series-cast"]], "polars.Series.arr.arg_max": [[902, "polars-series-arr-arg-max"]], "polars.Series.arr.arg_min": [[903, "polars-series-arr-arg-min"]], "polars.Series.arr.all": [[900, "polars-series-arr-all"]], "polars.Series.arg_unique": [[899, "polars-series-arg-unique"]], "polars.Series.bin.contains": [[924, "polars-series-bin-contains"]], "polars.Series.arr.median": [[912, "polars-series-arr-median"]], "polars.Series.cum_count": [[944, "polars-series-cum-count"]], "polars.Series.arg_min": [[896, "polars-series-arg-min"]], "polars.Series.arg_true": [[898, "polars-series-arg-true"]], "polars.Series.arr.explode": [[906, "polars-series-arr-explode"]], "polars.Series.arr.var": [[923, "polars-series-arr-var"]], "polars.Series.arr.first": [[907, "polars-series-arr-first"]], "polars.Series.arr.n_unique": [[914, "polars-series-arr-n-unique"]], "polars.Series.bin.decode": [[925, "polars-series-bin-decode"]], "polars.Series.cat.uses_lexical_ordering": [[934, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.arr.any": [[901, "polars-series-arr-any"]], "polars.Series.chunk_lengths": [[937, "polars-series-chunk-lengths"]], "polars.Series.arr.last": [[910, "polars-series-arr-last"]], "polars.Series.arr.contains": [[904, "polars-series-arr-contains"]], "polars.Series.arr.max": [[911, "polars-series-arr-max"]], "polars.Series.cum_min": [[946, "polars-series-cum-min"]], "polars.Series.cum_sum": [[948, "polars-series-cum-sum"]], "polars.Series.describe": [[951, "polars-series-describe"]], "polars.Series.cos": [[941, "polars-series-cos"]], "polars.Series.ceil": [[936, "polars-series-ceil"]], "polars.Series.arr.unique": [[922, "polars-series-arr-unique"]], "polars.Series.cbrt": [[935, "polars-series-cbrt"]], "polars.Series.arr.shift": [[916, "polars-series-arr-shift"]], "polars.Series.cumulative_eval": [[949, "polars-series-cumulative-eval"]], "polars.Series.arg_sort": [[897, "polars-series-arg-sort"]], "polars.Series.arr.min": [[913, "polars-series-arr-min"]], "polars.Series.arr.std": [[918, "polars-series-arr-std"]], "polars.Series.arr.to_struct": [[921, "polars-series-arr-to-struct"]], "polars.Series.clip": [[939, "polars-series-clip"]], "polars.Series.cat.to_local": [[933, "polars-series-cat-to-local"]], "polars.Series.cot": [[943, "polars-series-cot"]], "polars.Series.cum_max": [[945, "polars-series-cum-max"]], "polars.Series.cut": [[950, "polars-series-cut"]], "polars.Series.cum_prod": [[947, "polars-series-cum-prod"]], "polars.Series.arr.sum": [[919, "polars-series-arr-sum"]], "polars.Series.arr.sort": [[917, "polars-series-arr-sort"]], "polars.Series.clear": [[938, "polars-series-clear"]], "polars.Series.arr.count_matches": [[905, "polars-series-arr-count-matches"]], "polars.Series.arr.reverse": [[915, "polars-series-arr-reverse"]], "polars.Series.arr.join": [[909, "polars-series-arr-join"]], "polars.Series.cat.is_local": [[932, "polars-series-cat-is-local"]], "polars.Series.cosh": [[942, "polars-series-cosh"]], "polars.Series.bin.encode": [[926, "polars-series-bin-encode"]], "polars.Series.bin.starts_with": [[928, "polars-series-bin-starts-with"]], "polars.Series.clone": [[940, "polars-series-clone"]], "polars.Series.arr.get": [[908, "polars-series-arr-get"]], "polars.Series.cat.get_categories": [[931, "polars-series-cat-get-categories"]], "polars.Series.bottom_k": [[929, "polars-series-bottom-k"]], "polars.Series.arr.to_list": [[920, "polars-series-arr-to-list"]], "polars.Series.bin.ends_with": [[927, "polars-series-bin-ends-with"]], "polars.Series.dt.with_time_unit": [[1002, "polars-series-dt-with-time-unit"]], "polars.Series.diff": [[952, "polars-series-diff"]], "polars.Series.dt.year": [[1003, "polars-series-dt-year"]], "polars.Series.drop_nans": [[954, "polars-series-drop-nans"]], "polars.Series.dt.cast_time_unit": [[958, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.microsecond": [[973, "polars-series-dt-microsecond"]], "polars.Series.dt.replace_time_zone": [[985, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.hour": [[967, "polars-series-dt-hour"]], "polars.Series.dt.total_nanoseconds": [[997, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.to_string": [[991, "polars-series-dt-to-string"]], "polars.Series.dt.millennium": [[974, "polars-series-dt-millennium"]], "polars.Series.dt.day": [[964, "polars-series-dt-day"]], "polars.Series.dt.date": [[962, "polars-series-dt-date"]], "polars.Series.dt.nanosecond": [[981, "polars-series-dt-nanosecond"]], "polars.Series.dt.time": [[989, "polars-series-dt-time"]], "polars.Series.dtype": [[1004, "polars-series-dtype"]], "polars.Series.dt.weekday": [[1001, "polars-series-dt-weekday"]], "polars.Series.entropy": [[1005, "polars-series-entropy"]], "polars.Series.dt.minute": [[977, "polars-series-dt-minute"]], "polars.Series.dt.total_milliseconds": [[995, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.truncate": [[999, "polars-series-dt-truncate"]], "polars.Series.dt.base_utc_offset": [[957, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.ordinal_day": [[983, "polars-series-dt-ordinal-day"]], "polars.Series.dt.combine": [[960, "polars-series-dt-combine"]], "polars.Series.dt.century": [[959, "polars-series-dt-century"]], "polars.Series.dt.add_business_days": [[956, "polars-series-dt-add-business-days"]], "polars.Series.dt.month_start": [[980, "polars-series-dt-month-start"]], "polars.Series.dt.total_seconds": [[998, "polars-series-dt-total-seconds"]], "polars.Series.drop_nulls": [[955, "polars-series-drop-nulls"]], "polars.Series.dt.total_days": [[992, "polars-series-dt-total-days"]], "polars.Series.dt.offset_by": [[982, "polars-series-dt-offset-by"]], "polars.Series.dt.millisecond": [[975, "polars-series-dt-millisecond"]], "polars.Series.dt.total_hours": [[993, "polars-series-dt-total-hours"]], "polars.Series.dt.epoch": [[966, "polars-series-dt-epoch"]], "polars.Series.dt.second": [[987, "polars-series-dt-second"]], "polars.Series.dt.strftime": [[988, "polars-series-dt-strftime"]], "polars.Series.dot": [[953, "polars-series-dot"]], "polars.Series.dt.min": [[976, "polars-series-dt-min"]], "polars.Series.dt.quarter": [[984, "polars-series-dt-quarter"]], "polars.Series.dt.month_end": [[979, "polars-series-dt-month-end"]], "polars.Series.dt.total_microseconds": [[994, "polars-series-dt-total-microseconds"]], "polars.Series.dt.week": [[1000, "polars-series-dt-week"]], "polars.Series.dt.round": [[986, "polars-series-dt-round"]], "polars.Series.estimated_size": [[1007, "polars-series-estimated-size"]], "polars.Series.dt.dst_offset": [[965, "polars-series-dt-dst-offset"]], "polars.Series.dt.max": [[970, "polars-series-dt-max"]], "polars.Series.dt.mean": [[971, "polars-series-dt-mean"]], "polars.Series.dt.month": [[978, "polars-series-dt-month"]], "polars.Series.dt.timestamp": [[990, "polars-series-dt-timestamp"]], "polars.Series.dt.is_leap_year": [[968, "polars-series-dt-is-leap-year"]], "polars.Series.dt.datetime": [[963, "polars-series-dt-datetime"]], "polars.Series.dt.convert_time_zone": [[961, "polars-series-dt-convert-time-zone"]], "polars.Series.equals": [[1006, "polars-series-equals"]], "polars.Series.dt.total_minutes": [[996, "polars-series-dt-total-minutes"]], "polars.Series.dt.median": [[972, "polars-series-dt-median"]], "polars.Series.dt.iso_year": [[969, "polars-series-dt-iso-year"]], "polars.LazyFrame.head": [[811, "polars-lazyframe-head"]], "polars.LazyFrame.merge_sorted": [[824, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.lazy": [[817, "polars-lazyframe-lazy"]], "polars.LazyFrame.fetch": [[803, "polars-lazyframe-fetch"]], "polars.LazyFrame.explain": [[801, "polars-lazyframe-explain"]], "polars.LazyFrame.join": [[814, "polars-lazyframe-join"]], "polars.LazyFrame.pipe": [[827, "polars-lazyframe-pipe"]], "polars.LazyFrame.rolling": [[832, "polars-lazyframe-rolling"]], "polars.LazyFrame.deserialize": [[797, "polars-lazyframe-deserialize"]], "polars.LazyFrame.profile": [[828, "polars-lazyframe-profile"]], "polars.LazyFrame.quantile": [[829, "polars-lazyframe-quantile"]], "polars.LazyFrame.describe": [[796, "polars-lazyframe-describe"]], "polars.LazyFrame.collect_schema": [[793, "polars-lazyframe-collect-schema"]], "polars.LazyFrame.select": [[834, "polars-lazyframe-select"]], "polars.LazyFrame.max": [[820, "polars-lazyframe-max"]], "polars.LazyFrame.limit": [[818, "polars-lazyframe-limit"]], "polars.LazyFrame.gather_every": [[808, "polars-lazyframe-gather-every"]], "polars.LazyFrame.columns": [[794, "polars-lazyframe-columns"]], "polars.LazyFrame.collect_async": [[792, "polars-lazyframe-collect-async"]], "polars.LazyFrame.mean": [[821, "polars-lazyframe-mean"]], "polars.LazyFrame.reverse": [[831, "polars-lazyframe-reverse"]], "polars.LazyFrame.serialize": [[836, "polars-lazyframe-serialize"]], "polars.LazyFrame.median": [[822, "polars-lazyframe-median"]], "polars.LazyFrame.first": [[807, "polars-lazyframe-first"]], "polars.LazyFrame.set_sorted": [[837, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.interpolate": [[813, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join_asof": [[815, "polars-lazyframe-join-asof"]], "polars.LazyFrame.null_count": [[826, "polars-lazyframe-null-count"]], "polars.LazyFrame.group_by": [[809, "polars-lazyframe-group-by"]], "polars.LazyFrame.cache": [[787, "polars-lazyframe-cache"]], "polars.LazyFrame.map_batches": [[819, "polars-lazyframe-map-batches"]], "polars.LazyFrame.shift": [[838, "polars-lazyframe-shift"]], "polars.LazyFrame.inspect": [[812, "polars-lazyframe-inspect"]], "polars.LazyFrame.show_graph": [[839, "polars-lazyframe-show-graph"]], "polars.LazyFrame.melt": [[823, "polars-lazyframe-melt"]], "polars.LazyFrame.fill_nan": [[804, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.filter": [[806, "polars-lazyframe-filter"]], "polars.LazyFrame.rename": [[830, "polars-lazyframe-rename"]], "polars.LazyFrame.last": [[816, "polars-lazyframe-last"]], "polars.LazyFrame.drop": [[798, "polars-lazyframe-drop"]], "polars.LazyFrame.schema": [[833, "polars-lazyframe-schema"]], "polars.LazyFrame.bottom_k": [[786, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.min": [[825, "polars-lazyframe-min"]], "polars.LazyFrame.select_seq": [[835, "polars-lazyframe-select-seq"]], "polars.LazyFrame.clone": [[790, "polars-lazyframe-clone"]], "polars.LazyFrame.explode": [[802, "polars-lazyframe-explode"]], "polars.LazyFrame.group_by_dynamic": [[810, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.approx_n_unique": [[785, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.drop_nulls": [[799, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.dtypes": [[800, "polars-lazyframe-dtypes"]], "polars.LazyFrame.collect": [[791, "polars-lazyframe-collect"]], "polars.LazyFrame.fill_null": [[805, "polars-lazyframe-fill-null"]], "polars.LazyFrame.cast": [[788, "polars-lazyframe-cast"]], "polars.LazyFrame.clear": [[789, "polars-lazyframe-clear"]], "polars.LazyFrame.count": [[795, "polars-lazyframe-count"]], "Set Operations": [[1259, "set-operations"]], "EXCEPT": [[1259, "except"]], "INTERSECT": [[1259, "intersect"]], "UNION": [[1259, "union"]], "UNION ALL": [[1259, "union-all"]], "UNION BY NAME": [[1259, "union-by-name"]], "Python API": [[1258, "python-api"]], "Introduction": [[1258, "introduction"]], "Querying": [[1258, "querying"]], "Global SQL": [[1258, "global-sql"]], "Documentation": [[1258, null], [1258, null], [1258, null]], "Frame SQL": [[1258, "frame-sql"]], "Expression SQL": [[1258, "expression-sql"]], "SQLContext": [[1258, "sqlcontext"]], "Methods": [[1258, "methods"]], "String": [[1254, "string"], [1238, "string"], [777, "string"], [313, "string"]], "BIT_LENGTH": [[1254, "bit-length"]], "CONCAT": [[1254, "concat"]], "CONCAT_WS": [[1254, "concat-ws"]], "ENDS_WITH": [[1254, "ends-with"]], "INITCAP": [[1254, "initcap"]], "LEFT": [[1254, "left"]], "LENGTH": [[1254, "length"]], "Function aliases": [[1254, null], [1253, null], [1253, null], [1249, null], [1249, null]], "LOWER": [[1254, "lower"]], "LTRIM": [[1254, "ltrim"]], "OCTET_LENGTH": [[1254, "octet-length"]], "REGEXP_LIKE": [[1254, "regexp-like"]], "REPLACE": [[1254, "replace"]], "REVERSE": [[1254, "reverse"]], "RIGHT": [[1254, "right"]], "RTRIM": [[1254, "rtrim"]], "STARTS_WITH": [[1254, "starts-with"]], "STRPOS": [[1254, "strpos"]], "SUBSTRING": [[1254, "substring"]], "UPPER": [[1254, "upper"]], "SQL Clauses": [[1248, "sql-clauses"]], "SELECT": [[1248, "select"]], "DISTINCT": [[1248, "distinct"]], "FROM": [[1248, "from"]], "JOIN": [[1248, "join"]], "WHERE": [[1248, "where"]], "GROUP BY": [[1248, "group-by"]], "HAVING": [[1248, "having"]], "ORDER BY": [[1248, "order-by"]], "LIMIT": [[1248, "limit"]], "OFFSET": [[1248, "offset"]], "ARRAY_AGG": [[1250, "array-agg"]], "ARRAY_CONTAINS": [[1250, "array-contains"]], "ARRAY_GET": [[1250, "array-get"]], "ARRAY_LENGTH": [[1250, "array-length"]], "ARRAY_LOWER": [[1250, "array-lower"]], "ARRAY_MEAN": [[1250, "array-mean"]], "ARRAY_REVERSE": [[1250, "array-reverse"]], "ARRAY_SUM": [[1250, "array-sum"]], "ARRAY_TO_STRING": [[1250, "array-to-string"]], "ARRAY_UNIQUE": [[1250, "array-unique"]], "ARRAY_UPPER": [[1250, "array-upper"]], "UNNEST": [[1250, "unnest"], [1260, "unnest"]], "Miscellaneous": [[1235, "miscellaneous"], [877, "miscellaneous"], [781, "miscellaneous"], [773, "miscellaneous"], [309, "miscellaneous"]], "Struct": [[1239, "struct"], [778, "struct"]], "Trigonometry": [[1256, "trigonometry"]], "ACOS": [[1256, "acos"]], "ACOSD": [[1256, "acosd"]], "ASIN": [[1256, "asin"]], "ASIND": [[1256, "asind"]], "ATAN": [[1256, "atan"]], "ATAND": [[1256, "atand"]], "ATAN2": [[1256, "atan2"]], "ATAN2D": [[1256, "atan2d"]], "COT": [[1256, "cot"]], "COTD": [[1256, "cotd"]], "COS": [[1256, "cos"]], "COSD": [[1256, "cosd"]], "DEGREES": [[1256, "degrees"]], "RADIANS": [[1256, "radians"]], "SIN": [[1256, "sin"]], "SIND": [[1256, "sind"]], "TAN": [[1256, "tan"]], "TAND": [[1256, "tand"]], "Manipulation/selection": [[1236, "manipulation-selection"], [878, "manipulation-selection"], [774, "manipulation-selection"], [310, "manipulation-selection"]], "Export": [[1232, "export"], [306, "export"]], "Table Operations": [[1260, "table-operations"]], "CREATE TABLE": [[1260, "create-table"]], "DROP TABLES": [[1260, "drop-tables"]], "EXPLAIN": [[1260, "explain"]], "SHOW TABLES": [[1260, "show-tables"]], "TRUNCATE": [[1260, "truncate"]], "Conditional": [[1251, "conditional"]], "COALESCE": [[1251, "coalesce"]], "GREATEST": [[1251, "greatest"]], "IF": [[1251, "if"]], "IFNULL": [[1251, "ifnull"]], "LEAST": [[1251, "least"]], "NULLIF": [[1251, "nullif"]], "polars.SQLContext.unregister": [[1247, "polars-sqlcontext-unregister"]], "Temporal": [[1240, "temporal"], [1255, "temporal"], [779, "temporal"], [313, "temporal"]], "Series": [[1233, "series"]], "Math": [[1253, "math"]], "ABS": [[1253, "abs"]], "CBRT": [[1253, "cbrt"]], "CEIL": [[1253, "ceil"]], "DIV": [[1253, "div"]], "EXP": [[1253, "exp"]], "FLOOR": [[1253, "floor"]], "LN": [[1253, "ln"]], "LOG": [[1253, "log"]], "LOG2": [[1253, "log2"]], "LOG10": [[1253, "log10"]], "LOG1P": [[1253, "log1p"]], "MOD": [[1253, "mod"]], "PI": [[1253, "pi"]], "POW": [[1253, "pow"]], "ROUND": [[1253, "round"]], "SIGN": [[1253, "sign"]], "SQRT": [[1253, "sqrt"]], "SQL Interface": [[1257, "sql-interface"]], "Testing": [[1261, "testing"]], "Asserts": [[1261, "asserts"]], "Parametric testing": [[1261, "parametric-testing"]], "Polars strategies": [[1261, "polars-strategies"]], "Strategy helpers": [[1261, "strategy-helpers"]], "Profiles": [[1261, "profiles"]], "Aggregate": [[1249, "aggregate"]], "AVG": [[1249, "avg"]], "COUNT": [[1249, "count"]], "FIRST": [[1249, "first"]], "LAST": [[1249, "last"]], "MAX": [[1249, "max"]], "MEDIAN": [[1249, "median"]], "MIN": [[1249, "min"]], "STDDEV": [[1249, "stddev"]], "SUM": [[1249, "sum"]], "VARIANCE": [[1249, "variance"]], "SQL Functions": [[1252, "sql-functions"]], "polars.SQLContext.register_globals": [[1244, "polars-sqlcontext-register-globals"]], "polars.SQLContext.execute_global": [[1242, "polars-sqlcontext-execute-global"]], "polars.SQLContext.tables": [[1246, "polars-sqlcontext-tables"]], "DATE": [[1255, "date"]], "DATE_PART": [[1255, "date-part"]], "EXTRACT": [[1255, "extract"]], "polars.SQLContext.register": [[1243, "polars-sqlcontext-register"]], "polars.SQLContext.execute": [[1241, "polars-sqlcontext-execute"]], "Plot": [[1237, "plot"], [311, "plot"]], "List": [[1234, "list"], [771, "list"]], "polars.SQLContext.register_many": [[1245, "polars-sqlcontext-register-many"]], "polars.arctan2": [[694, "polars-arctan2"]], "polars.date_ranges": [[712, "polars-date-ranges"]], "polars.head": [[724, "polars-head"]], "polars.corr": [[702, "polars-corr"]], "polars.date": [[710, "polars-date"]], "polars.element": [[717, "polars-element"]], "polars.groups": [[723, "polars-groups"]], "polars.Expr.tail": [[674, "polars-expr-tail"]], "polars.int_ranges": [[727, "polars-int-ranges"]], "polars.concat_str": [[701, "polars-concat-str"]], "polars.cum_fold": [[706, "polars-cum-fold"]], "polars.duration": [[716, "polars-duration"]], "polars.Expr.truediv": [[680, "polars-expr-truediv"]], "polars.datetime": [[713, "polars-datetime"]], "polars.exclude": [[718, "polars-exclude"]], "polars.count": [[703, "polars-count"]], "polars.any": [[690, "polars-any"]], "polars.cum_sum_horizontal": [[709, "polars-cum-sum-horizontal"]], "polars.Expr.upper_bound": [[683, "polars-expr-upper-bound"]], "polars.arctan2d": [[695, "polars-arctan2d"]], "polars.cum_reduce": [[707, "polars-cum-reduce"]], "polars.date_range": [[711, "polars-date-range"]], "polars.cum_count": [[705, "polars-cum-count"]], "polars.Expr.xor": [[687, "polars-expr-xor"]], "polars.arg_where": [[697, "polars-arg-where"]], "polars.all": [[688, "polars-all"]], "polars.implode": [[725, "polars-implode"]], "polars.Expr.where": [[686, "polars-expr-where"]], "polars.business_day_count": [[698, "polars-business-day-count"]], "polars.Expr.tanh": [[676, "polars-expr-tanh"]], "polars.Expr.tan": [[675, "polars-expr-tan"]], "polars.int_range": [[726, "polars-int-range"]], "polars.concat_list": [[700, "polars-concat-list"]], "polars.Expr.unique_counts": [[682, "polars-expr-unique-counts"]], "polars.arg_sort_by": [[696, "polars-arg-sort-by"]], "polars.Expr.sum": [[673, "polars-expr-sum"]], "polars.Expr.value_counts": [[684, "polars-expr-value-counts"]], "polars.Expr.to_physical": [[677, "polars-expr-to-physical"]], "polars.coalesce": [[699, "polars-coalesce"]], "polars.approx_n_unique": [[692, "polars-approx-n-unique"]], "polars.all_horizontal": [[689, "polars-all-horizontal"]], "polars.fold": [[720, "polars-fold"]], "polars.cov": [[704, "polars-cov"]], "polars.Expr.unique": [[681, "polars-expr-unique"]], "polars.Expr.top_k_by": [[679, "polars-expr-top-k-by"]], "polars.datetime_range": [[714, "polars-datetime-range"]], "polars.Expr.var": [[685, "polars-expr-var"]], "polars.first": [[719, "polars-first"]], "polars.from_epoch": [[722, "polars-from-epoch"]], "polars.format": [[721, "polars-format"]], "polars.Expr.sub": [[672, "polars-expr-sub"]], "polars.any_horizontal": [[691, "polars-any-horizontal"]], "polars.datetime_ranges": [[715, "polars-datetime-ranges"]], "polars.arange": [[693, "polars-arange"]], "polars.cum_sum": [[708, "polars-cum-sum"]], "polars.Expr.top_k": [[678, "polars-expr-top-k"]], "polars.Expr.str.strip_chars": [[652, "polars-expr-str-strip-chars"]], "polars.Expr.str.splitn": [[650, "polars-expr-str-splitn"]], "polars.Expr.struct.field": [[668, "polars-expr-struct-field"]], "polars.Expr.str.join": [[636, "polars-expr-str-join"]], "polars.Expr.str.len_chars": [[640, "polars-expr-str-len-chars"]], "polars.Expr.str.reverse": [[646, "polars-expr-str-reverse"]], "polars.Expr.str.ends_with": [[629, "polars-expr-str-ends-with"]], "polars.Expr.str.concat": [[623, "polars-expr-str-concat"]], "polars.Expr.str.json_path_match": [[638, "polars-expr-str-json-path-match"]], "polars.Expr.sort_by": [[620, "polars-expr-sort-by"]], "polars.Expr.str.replace_many": [[645, "polars-expr-str-replace-many"]], "polars.Expr.str.to_decimal": [[661, "polars-expr-str-to-decimal"]], "polars.Expr.str.tail": [[658, "polars-expr-str-tail"]], "polars.Expr.str.json_decode": [[637, "polars-expr-str-json-decode"]], "polars.Expr.str.explode": [[630, "polars-expr-str-explode"]], "polars.Expr.sort": [[619, "polars-expr-sort"]], "polars.Expr.str.extract_groups": [[633, "polars-expr-str-extract-groups"]], "polars.Expr.str.replace": [[643, "polars-expr-str-replace"]], "polars.Expr.str.strip_chars_start": [[654, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.replace_all": [[644, "polars-expr-str-replace-all"]], "polars.Expr.str.encode": [[628, "polars-expr-str-encode"]], "polars.Expr.str.starts_with": [[651, "polars-expr-str-starts-with"]], "polars.Expr.str.contains_any": [[625, "polars-expr-str-contains-any"]], "polars.Expr.str.to_datetime": [[660, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_integer": [[662, "polars-expr-str-to-integer"]], "polars.Expr.str.to_uppercase": [[666, "polars-expr-str-to-uppercase"]], "polars.Expr.str.count_matches": [[626, "polars-expr-str-count-matches"]], "polars.Expr.str.split": [[648, "polars-expr-str-split"]], "polars.Expr.str.strip_suffix": [[656, "polars-expr-str-strip-suffix"]], "polars.Expr.str.len_bytes": [[639, "polars-expr-str-len-bytes"]], "polars.Expr.str.to_date": [[659, "polars-expr-str-to-date"]], "polars.Expr.struct.json_encode": [[669, "polars-expr-struct-json-encode"]], "polars.Expr.slice": [[618, "polars-expr-slice"]], "polars.Expr.struct.with_fields": [[671, "polars-expr-struct-with-fields"]], "polars.Expr.str.extract_all": [[632, "polars-expr-str-extract-all"]], "polars.Expr.struct.rename_fields": [[670, "polars-expr-struct-rename-fields"]], "polars.Expr.str.extract": [[631, "polars-expr-str-extract"]], "polars.Expr.sqrt": [[621, "polars-expr-sqrt"]], "polars.Expr.str.pad_start": [[642, "polars-expr-str-pad-start"]], "polars.Expr.str.contains": [[624, "polars-expr-str-contains"]], "polars.Expr.str.to_lowercase": [[663, "polars-expr-str-to-lowercase"]], "polars.Expr.std": [[622, "polars-expr-std"]], "polars.Expr.str.split_exact": [[649, "polars-expr-str-split-exact"]], "polars.Expr.str.strip_prefix": [[655, "polars-expr-str-strip-prefix"]], "polars.Expr.str.find": [[634, "polars-expr-str-find"]], "polars.Expr.str.slice": [[647, "polars-expr-str-slice"]], "polars.Expr.str.zfill": [[667, "polars-expr-str-zfill"]], "polars.Expr.str.to_titlecase": [[665, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_time": [[664, "polars-expr-str-to-time"]], "polars.Expr.str.decode": [[627, "polars-expr-str-decode"]], "polars.Expr.str.pad_end": [[641, "polars-expr-str-pad-end"]], "polars.Expr.str.strip_chars_end": [[653, "polars-expr-str-strip-chars-end"]], "polars.Expr.sinh": [[616, "polars-expr-sinh"]], "polars.Expr.str.head": [[635, "polars-expr-str-head"]], "polars.Expr.skew": [[617, "polars-expr-skew"]], "polars.Expr.str.strptime": [[657, "polars-expr-str-strptime"]], "polars.Expr.round": [[606, "polars-expr-round"]], "polars.Expr.rolling_sum": [[602, "polars-expr-rolling-sum"]], "polars.Expr.rle": [[585, "polars-expr-rle"]], "polars.Expr.pow": [[573, "polars-expr-pow"]], "polars.Expr.rank": [[578, "polars-expr-rank"]], "polars.Expr.quantile": [[576, "polars-expr-quantile"]], "polars.Expr.ne": [[562, "polars-expr-ne"]], "polars.Expr.sin": [[615, "polars-expr-sin"]], "polars.Expr.rolling_median_by": [[594, "polars-expr-rolling-median-by"]], "polars.Expr.over": [[568, "polars-expr-over"]], "polars.Expr.rolling_min": [[595, "polars-expr-rolling-min"]], "polars.Expr.qcut": [[575, "polars-expr-qcut"]], "polars.Expr.rolling_var_by": [[605, "polars-expr-rolling-var-by"]], "polars.Expr.rolling_skew": [[599, "polars-expr-rolling-skew"]], "polars.Expr.round_sig_figs": [[607, "polars-expr-round-sig-figs"]], "polars.Expr.rolling_std": [[600, "polars-expr-rolling-std"]], "polars.Expr.nan_min": [[561, "polars-expr-nan-min"]], "polars.Expr.rolling_sum_by": [[603, "polars-expr-rolling-sum-by"]], "polars.Expr.rolling_mean_by": [[592, "polars-expr-rolling-mean-by"]], "polars.Expr.search_sorted": [[609, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[610, "polars-expr-set-sorted"]], "polars.Expr.ne_missing": [[563, "polars-expr-ne-missing"]], "polars.Expr.peak_min": [[571, "polars-expr-peak-min"]], "polars.Expr.rolling": [[587, "polars-expr-rolling"]], "polars.Expr.rolling_std_by": [[601, "polars-expr-rolling-std-by"]], "polars.Expr.rolling_mean": [[591, "polars-expr-rolling-mean"]], "polars.Expr.rolling_median": [[593, "polars-expr-rolling-median"]], "polars.Expr.or_": [[567, "polars-expr-or"]], "polars.Expr.rolling_min_by": [[596, "polars-expr-rolling-min-by"]], "polars.Expr.shuffle": [[613, "polars-expr-shuffle"]], "polars.Expr.rolling_map": [[588, "polars-expr-rolling-map"]], "polars.Expr.reshape": [[583, "polars-expr-reshape"]], "polars.Expr.replace": [[582, "polars-expr-replace"]], "polars.Expr.rolling_max": [[589, "polars-expr-rolling-max"]], "polars.Expr.shift": [[611, "polars-expr-shift"]], "polars.Expr.rolling_var": [[604, "polars-expr-rolling-var"]], "polars.Expr.null_count": [[566, "polars-expr-null-count"]], "polars.Expr.reinterpret": [[580, "polars-expr-reinterpret"]], "polars.Expr.product": [[574, "polars-expr-product"]], "polars.Expr.radians": [[577, "polars-expr-radians"]], "polars.Expr.rechunk": [[579, "polars-expr-rechunk"]], "polars.Expr.peak_max": [[570, "polars-expr-peak-max"]], "polars.Expr.sample": [[608, "polars-expr-sample"]], "polars.Expr.rolling_quantile_by": [[598, "polars-expr-rolling-quantile-by"]], "polars.Expr.repeat_by": [[581, "polars-expr-repeat-by"]], "polars.Expr.rle_id": [[586, "polars-expr-rle-id"]], "polars.Expr.pipe": [[572, "polars-expr-pipe"]], "polars.Expr.rolling_quantile": [[597, "polars-expr-rolling-quantile"]], "polars.Expr.sign": [[614, "polars-expr-sign"]], "polars.Expr.neg": [[564, "polars-expr-neg"]], "polars.Expr.nan_max": [[560, "polars-expr-nan-max"]], "polars.Expr.shrink_dtype": [[612, "polars-expr-shrink-dtype"]], "polars.Expr.rolling_max_by": [[590, "polars-expr-rolling-max-by"]], "polars.Expr.pct_change": [[569, "polars-expr-pct-change"]], "polars.Expr.not_": [[565, "polars-expr-not"]], "polars.Expr.reverse": [[584, "polars-expr-reverse"]], "Selectors": [[882, "selectors"]], "Importing": [[882, "importing"]], "Set operations": [[882, "set-operations"]], "Functions": [[882, "functions"], [781, "functions"], [769, "functions"]], "Metadata": [[879, "metadata"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[864, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.LazyFrame.sort": [[841, "polars-lazyframe-sort"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[857, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.Series.arctanh": [[894, "polars-series-arctanh"]], "polars.LazyFrame.tail": [[845, "polars-lazyframe-tail"]], "polars.LazyFrame.var": [[850, "polars-lazyframe-var"]], "Serialization": [[877, "serialization"], [309, "serialization"]], "polars.LazyFrame.sum": [[844, "polars-lazyframe-sum"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[868, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.LazyFrame.update": [[849, "polars-lazyframe-update"]], "Schema": [[881, "schema"]], "polars.Series.arccos": [[889, "polars-series-arccos"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[858, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.LazyFrame.width": [[851, "polars-lazyframe-width"]], "polars.LazyFrame.with_row_index": [[856, "polars-lazyframe-with-row-index"]], "LazyFrame": [[876, "lazyframe"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[859, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.LazyFrame.with_columns_seq": [[853, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.slice": [[840, "polars-lazyframe-slice"]], "polars.Series.arg_max": [[895, "polars-series-arg-max"]], "Plugins": [[880, "plugins"]], "polars.LazyFrame.sql": [[842, "polars-lazyframe-sql"]], "polars.Series.arctan": [[893, "polars-series-arctan"]], "polars.LazyFrame.with_row_count": [[855, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.top_k": [[846, "polars-lazyframe-top-k"]], "polars.Series.arcsin": [[891, "polars-series-arcsin"]], "polars.Series.all": [[886, "polars-series-all"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[870, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[860, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[861, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.Series.append": [[888, "polars-series-append"]], "polars.LazyFrame.with_columns": [[852, "polars-lazyframe-with-columns"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[863, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[866, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.LazyFrame.unique": [[847, "polars-lazyframe-unique"]], "GroupBy": [[875, "groupby"], [307, "groupby"]], "polars.Series.abs": [[884, "polars-series-abs"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[872, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[865, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[871, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.LazyFrame.unnest": [[848, "polars-lazyframe-unnest"]], "polars.Series.arcsinh": [[892, "polars-series-arcsinh"]], "polars.Series.arccosh": [[890, "polars-series-arccosh"]], "polars.LazyFrame.std": [[843, "polars-lazyframe-std"]], "polars.Series.alias": [[885, "polars-series-alias"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[862, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.Series.any": [[887, "polars-series-any"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[869, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.LazyFrame.with_context": [[854, "polars-lazyframe-with-context"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[867, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.Expr.name.map_fields": [[553, "polars-expr-name-map-fields"]], "polars.Expr.min": [[546, "polars-expr-min"]], "polars.Expr.list.n_unique": [[507, "polars-expr-list-n-unique"]], "polars.Expr.name.prefix_fields": [[555, "polars-expr-name-prefix-fields"]], "polars.Expr.list.to_struct": [[521, "polars-expr-list-to-struct"]], "polars.Expr.name.map": [[552, "polars-expr-name-map"]], "polars.Expr.meta.ne": [[538, "polars-expr-meta-ne"]], "polars.Expr.meta.is_regex_projection": [[537, "polars-expr-meta-is-regex-projection"]], "polars.Expr.n_unique": [[550, "polars-expr-n-unique"]], "polars.Expr.mode": [[548, "polars-expr-mode"]], "polars.Expr.median": [[533, "polars-expr-median"]], "polars.Expr.list.shift": [[514, "polars-expr-list-shift"]], "polars.Expr.list.sort": [[516, "polars-expr-list-sort"]], "polars.Expr.list.set_symmetric_difference": [[512, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.meta.write_json": [[545, "polars-expr-meta-write-json"]], "polars.Expr.list.tail": [[519, "polars-expr-list-tail"]], "polars.Expr.name.suffix_fields": [[557, "polars-expr-name-suffix-fields"]], "polars.Expr.map_batches": [[529, "polars-expr-map-batches"]], "polars.Expr.list.median": [[505, "polars-expr-list-median"]], "polars.Expr.lt": [[528, "polars-expr-lt"]], "polars.Expr.meta.eq": [[534, "polars-expr-meta-eq"]], "polars.Expr.max": [[531, "polars-expr-max"]], "polars.Expr.lower_bound": [[527, "polars-expr-lower-bound"]], "polars.Expr.meta.tree_format": [[543, "polars-expr-meta-tree-format"]], "polars.Expr.meta.serialize": [[542, "polars-expr-meta-serialize"]], "polars.Expr.list.to_array": [[520, "polars-expr-list-to-array"]], "polars.Expr.map_elements": [[530, "polars-expr-map-elements"]], "polars.Expr.mod": [[547, "polars-expr-mod"]], "polars.Expr.meta.root_names": [[541, "polars-expr-meta-root-names"]], "polars.Expr.log": [[524, "polars-expr-log"]], "polars.Expr.name.prefix": [[554, "polars-expr-name-prefix"]], "polars.Expr.list.unique": [[522, "polars-expr-list-unique"]], "polars.Expr.list.reverse": [[508, "polars-expr-list-reverse"]], "polars.Expr.mean": [[532, "polars-expr-mean"]], "polars.Expr.name.to_uppercase": [[559, "polars-expr-name-to-uppercase"]], "polars.Expr.log10": [[525, "polars-expr-log10"]], "polars.Expr.list.var": [[523, "polars-expr-list-var"]], "polars.Expr.meta.undo_aliases": [[544, "polars-expr-meta-undo-aliases"]], "polars.Expr.list.sum": [[518, "polars-expr-list-sum"]], "polars.Expr.list.set_intersection": [[511, "polars-expr-list-set-intersection"]], "polars.Expr.name.suffix": [[556, "polars-expr-name-suffix"]], "polars.Expr.list.sample": [[509, "polars-expr-list-sample"]], "polars.Expr.list.min": [[506, "polars-expr-list-min"]], "polars.Expr.list.set_difference": [[510, "polars-expr-list-set-difference"]], "polars.Expr.list.mean": [[504, "polars-expr-list-mean"]], "polars.Expr.list.std": [[517, "polars-expr-list-std"]], "polars.Expr.mul": [[549, "polars-expr-mul"]], "polars.Expr.list.slice": [[515, "polars-expr-list-slice"]], "polars.Expr.log1p": [[526, "polars-expr-log1p"]], "polars.Expr.meta.is_column_selection": [[536, "polars-expr-meta-is-column-selection"]], "polars.Expr.name.keep": [[551, "polars-expr-name-keep"]], "polars.Expr.meta.has_multiple_outputs": [[535, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.list.set_union": [[513, "polars-expr-list-set-union"]], "polars.Expr.meta.pop": [[540, "polars-expr-meta-pop"]], "polars.Expr.meta.output_name": [[539, "polars-expr-meta-output-name"]], "polars.Expr.name.to_lowercase": [[558, "polars-expr-name-to-lowercase"]], "polars.Expr.list.arg_max": [[486, "polars-expr-list-arg-max"]], "polars.Expr.list.head": [[499, "polars-expr-list-head"]], "polars.Expr.is_first_distinct": [[470, "polars-expr-is-first-distinct"]], "polars.Expr.is_last_distinct": [[473, "polars-expr-is-last-distinct"]], "polars.Expr.gt": [[458, "polars-expr-gt"]], "polars.Expr.is_in": [[471, "polars-expr-is-in"]], "polars.Expr.le": [[481, "polars-expr-le"]], "polars.Expr.ge": [[456, "polars-expr-ge"]], "polars.Expr.hist": [[462, "polars-expr-hist"]], "polars.Expr.list.all": [[484, "polars-expr-list-all"]], "polars.Expr.first": [[448, "polars-expr-first"]], "polars.Expr.list.any": [[485, "polars-expr-list-any"]], "polars.Expr.list.contains": [[489, "polars-expr-list-contains"]], "polars.Expr.is_nan": [[474, "polars-expr-is-nan"]], "polars.Expr.floor": [[450, "polars-expr-floor"]], "polars.Expr.interpolate": [[465, "polars-expr-interpolate"]], "polars.Expr.list.eval": [[493, "polars-expr-list-eval"]], "polars.Expr.list.explode": [[494, "polars-expr-list-explode"]], "polars.Expr.floordiv": [[451, "polars-expr-floordiv"]], "polars.Expr.interpolate_by": [[466, "polars-expr-interpolate-by"]], "polars.Expr.is_between": [[467, "polars-expr-is-between"]], "polars.Expr.list.drop_nulls": [[492, "polars-expr-list-drop-nulls"]], "polars.Expr.list.join": [[500, "polars-expr-list-join"]], "polars.Expr.is_duplicated": [[468, "polars-expr-is-duplicated"]], "polars.Expr.limit": [[483, "polars-expr-limit"]], "polars.Expr.gather_every": [[455, "polars-expr-gather-every"]], "polars.Expr.last": [[480, "polars-expr-last"]], "polars.Expr.implode": [[463, "polars-expr-implode"]], "polars.Expr.list.arg_min": [[487, "polars-expr-list-arg-min"]], "polars.Expr.is_infinite": [[472, "polars-expr-is-infinite"]], "polars.Expr.list.max": [[503, "polars-expr-list-max"]], "polars.Expr.get": [[457, "polars-expr-get"]], "polars.Expr.list.count_matches": [[490, "polars-expr-list-count-matches"]], "polars.Expr.list.diff": [[491, "polars-expr-list-diff"]], "polars.Expr.is_null": [[477, "polars-expr-is-null"]], "polars.Expr.gather": [[454, "polars-expr-gather"]], "polars.Expr.is_unique": [[478, "polars-expr-is-unique"]], "polars.Expr.head": [[461, "polars-expr-head"]], "polars.Expr.is_not_nan": [[475, "polars-expr-is-not-nan"]], "polars.Expr.list.get": [[498, "polars-expr-list-get"]], "polars.Expr.forward_fill": [[452, "polars-expr-forward-fill"]], "polars.Expr.kurtosis": [[479, "polars-expr-kurtosis"]], "polars.Expr.list.last": [[501, "polars-expr-list-last"]], "polars.Expr.has_nulls": [[459, "polars-expr-has-nulls"]], "polars.Expr.list.len": [[502, "polars-expr-list-len"]], "polars.Expr.is_not_null": [[476, "polars-expr-is-not-null"]], "polars.Expr.list.gather": [[496, "polars-expr-list-gather"]], "polars.Expr.flatten": [[449, "polars-expr-flatten"]], "polars.Expr.list.gather_every": [[497, "polars-expr-list-gather-every"]], "polars.Expr.len": [[482, "polars-expr-len"]], "polars.Expr.list.first": [[495, "polars-expr-list-first"]], "polars.Expr.list.concat": [[488, "polars-expr-list-concat"]], "polars.Expr.from_json": [[453, "polars-expr-from-json"]], "polars.Expr.is_finite": [[469, "polars-expr-is-finite"]], "polars.Expr.inspect": [[464, "polars-expr-inspect"]], "polars.Expr.hash": [[460, "polars-expr-hash"]], "polars.Expr.dt.weekday": [[431, "polars-expr-dt-weekday"]], "polars.Expr.dt.total_microseconds": [[424, "polars-expr-dt-total-microseconds"]], "polars.Expr.eq": [[435, "polars-expr-eq"]], "polars.Expr.dt.round": [[416, "polars-expr-dt-round"]], "polars.Expr.dt.day": [[398, "polars-expr-dt-day"]], "polars.Expr.dt.is_leap_year": [[402, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.time": [[419, "polars-expr-dt-time"]], "polars.Expr.dt.microsecond": [[404, "polars-expr-dt-microsecond"]], "polars.Expr.fill_null": [[446, "polars-expr-fill-null"]], "polars.Expr.dt.epoch": [[400, "polars-expr-dt-epoch"]], "polars.Expr.dt.minute": [[407, "polars-expr-dt-minute"]], "polars.Expr.dt.ordinal_day": [[413, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.to_string": [[421, "polars-expr-dt-to-string"]], "polars.Expr.entropy": [[434, "polars-expr-entropy"]], "polars.Expr.ewm_std": [[439, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[440, "polars-expr-ewm-var"]], "polars.Expr.dt.hour": [[401, "polars-expr-dt-hour"]], "polars.Expr.dt.total_milliseconds": [[425, "polars-expr-dt-total-milliseconds"]], "polars.Expr.ewm_mean_by": [[438, "polars-expr-ewm-mean-by"]], "polars.Expr.dt.total_seconds": [[428, "polars-expr-dt-total-seconds"]], "polars.Expr.filter": [[447, "polars-expr-filter"]], "polars.Expr.dt.timestamp": [[420, "polars-expr-dt-timestamp"]], "polars.Expr.dt.total_minutes": [[426, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.strftime": [[418, "polars-expr-dt-strftime"]], "polars.Expr.dt.truncate": [[429, "polars-expr-dt-truncate"]], "polars.Expr.dt.datetime": [[397, "polars-expr-dt-datetime"]], "polars.Expr.dt.with_time_unit": [[432, "polars-expr-dt-with-time-unit"]], "polars.Expr.ewm_mean": [[437, "polars-expr-ewm-mean"]], "polars.Expr.extend_constant": [[444, "polars-expr-extend-constant"]], "polars.Expr.dt.month_start": [[410, "polars-expr-dt-month-start"]], "polars.Expr.dt.millisecond": [[406, "polars-expr-dt-millisecond"]], "polars.Expr.dt.total_nanoseconds": [[427, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.dst_offset": [[399, "polars-expr-dt-dst-offset"]], "polars.Expr.fill_nan": [[445, "polars-expr-fill-nan"]], "polars.Expr.dt.date": [[396, "polars-expr-dt-date"]], "polars.Expr.dt.week": [[430, "polars-expr-dt-week"]], "polars.Expr.explode": [[443, "polars-expr-explode"]], "polars.Expr.dt.second": [[417, "polars-expr-dt-second"]], "polars.Expr.dt.combine": [[394, "polars-expr-dt-combine"]], "polars.Expr.dt.quarter": [[414, "polars-expr-dt-quarter"]], "polars.Expr.dt.convert_time_zone": [[395, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.year": [[433, "polars-expr-dt-year"]], "polars.Expr.eq_missing": [[436, "polars-expr-eq-missing"]], "polars.Expr.dt.iso_year": [[403, "polars-expr-dt-iso-year"]], "polars.Expr.dt.millennium": [[405, "polars-expr-dt-millennium"]], "polars.Expr.dt.month_end": [[409, "polars-expr-dt-month-end"]], "polars.Expr.exclude": [[441, "polars-expr-exclude"]], "polars.Expr.dt.replace_time_zone": [[415, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.cast_time_unit": [[392, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.total_days": [[422, "polars-expr-dt-total-days"]], "polars.Expr.dt.century": [[393, "polars-expr-dt-century"]], "polars.Expr.exp": [[442, "polars-expr-exp"]], "polars.Expr.dt.month": [[408, "polars-expr-dt-month"]], "polars.Expr.dt.nanosecond": [[411, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.offset_by": [[412, "polars-expr-dt-offset-by"]], "polars.Expr.dt.total_hours": [[423, "polars-expr-dt-total-hours"]], "polars.Expr.diff": [[386, "polars-expr-diff"]], "polars.Expr.cast": [[368, "polars-expr-cast"]], "polars.Expr.cos": [[373, "polars-expr-cos"]], "polars.Expr.arr.max": [[347, "polars-expr-arr-max"]], "polars.Expr.arr.min": [[349, "polars-expr-arr-min"]], "polars.Expr.arr.n_unique": [[350, "polars-expr-arr-n-unique"]], "polars.Expr.arr.to_struct": [[357, "polars-expr-arr-to-struct"]], "polars.Expr.bin.starts_with": [[365, "polars-expr-bin-starts-with"]], "polars.Expr.cum_sum": [[381, "polars-expr-cum-sum"]], "polars.Expr.cut": [[383, "polars-expr-cut"]], "polars.Expr.cum_count": [[377, "polars-expr-cum-count"]], "polars.Expr.bin.decode": [[362, "polars-expr-bin-decode"]], "polars.Expr.ceil": [[371, "polars-expr-ceil"]], "polars.Expr.arr.last": [[346, "polars-expr-arr-last"]], "polars.Expr.arr.get": [[344, "polars-expr-arr-get"]], "polars.Expr.arr.sum": [[355, "polars-expr-arr-sum"]], "polars.Expr.arr.arg_max": [[338, "polars-expr-arr-arg-max"]], "polars.Expr.arr.arg_min": [[339, "polars-expr-arr-arg-min"]], "polars.Expr.clip": [[372, "polars-expr-clip"]], "polars.Expr.bin.ends_with": [[364, "polars-expr-bin-ends-with"]], "polars.Expr.bottom_k": [[366, "polars-expr-bottom-k"]], "polars.Expr.bottom_k_by": [[367, "polars-expr-bottom-k-by"]], "polars.Expr.count": [[376, "polars-expr-count"]], "polars.Expr.cbrt": [[370, "polars-expr-cbrt"]], "polars.Expr.drop_nulls": [[389, "polars-expr-drop-nulls"]], "polars.Expr.arr.count_matches": [[341, "polars-expr-arr-count-matches"]], "polars.Expr.arr.unique": [[358, "polars-expr-arr-unique"]], "polars.Expr.dt.add_business_days": [[390, "polars-expr-dt-add-business-days"]], "polars.Expr.dt.base_utc_offset": [[391, "polars-expr-dt-base-utc-offset"]], "polars.Expr.cum_max": [[378, "polars-expr-cum-max"]], "polars.Expr.backward_fill": [[360, "polars-expr-backward-fill"]], "polars.Expr.deserialize": [[385, "polars-expr-deserialize"]], "polars.Expr.arr.var": [[359, "polars-expr-arr-var"]], "polars.Expr.cosh": [[374, "polars-expr-cosh"]], "polars.Expr.cum_prod": [[380, "polars-expr-cum-prod"]], "polars.Expr.arr.join": [[345, "polars-expr-arr-join"]], "polars.Expr.cot": [[375, "polars-expr-cot"]], "polars.Expr.drop_nans": [[388, "polars-expr-drop-nans"]], "polars.Expr.cumulative_eval": [[382, "polars-expr-cumulative-eval"]], "polars.Expr.cum_min": [[379, "polars-expr-cum-min"]], "polars.Expr.arr.all": [[336, "polars-expr-arr-all"]], "polars.Expr.arr.explode": [[342, "polars-expr-arr-explode"]], "polars.Expr.degrees": [[384, "polars-expr-degrees"]], "polars.Expr.arr.std": [[354, "polars-expr-arr-std"]], "polars.Expr.cat.get_categories": [[369, "polars-expr-cat-get-categories"]], "polars.Expr.arr.contains": [[340, "polars-expr-arr-contains"]], "polars.Expr.bin.encode": [[363, "polars-expr-bin-encode"]], "polars.Expr.arr.shift": [[352, "polars-expr-arr-shift"]], "polars.Expr.arr.first": [[343, "polars-expr-arr-first"]], "polars.Expr.arr.to_list": [[356, "polars-expr-arr-to-list"]], "polars.Expr.arr.sort": [[353, "polars-expr-arr-sort"]], "polars.Expr.arr.reverse": [[351, "polars-expr-arr-reverse"]], "polars.Expr.arr.any": [[337, "polars-expr-arr-any"]], "polars.Expr.arr.median": [[348, "polars-expr-arr-median"]], "polars.Expr.bin.contains": [[361, "polars-expr-bin-contains"]], "polars.Expr.dot": [[387, "polars-expr-dot"]], "polars.DataFrame.pivot": [[234, "polars-dataframe-pivot"]], "polars.DataFrame.shrink_to_fit": [[253, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.update": [[277, "polars-dataframe-update"]], "polars.DataFrame.unique": [[274, "polars-dataframe-unique"]], "polars.DataFrame.to_struct": [[270, "polars-dataframe-to-struct"]], "polars.DataFrame.upsample": [[278, "polars-dataframe-upsample"]], "polars.DataFrame.sql": [[256, "polars-dataframe-sql"]], "polars.DataFrame.sum_horizontal": [[259, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.min_horizontal": [[228, "polars-dataframe-min-horizontal"]], "polars.DataFrame.unnest": [[275, "polars-dataframe-unnest"]], "polars.DataFrame.pipe": [[233, "polars-dataframe-pipe"]], "polars.DataFrame.to_dicts": [[263, "polars-dataframe-to-dicts"]], "polars.DataFrame.tail": [[260, "polars-dataframe-tail"]], "polars.DataFrame.melt": [[225, "polars-dataframe-melt"]], "polars.DataFrame.rename": [[238, "polars-dataframe-rename"]], "polars.DataFrame.to_dummies": [[264, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_torch": [[271, "polars-dataframe-to-torch"]], "polars.DataFrame.reverse": [[240, "polars-dataframe-reverse"]], "polars.DataFrame.rolling": [[241, "polars-dataframe-rolling"]], "polars.DataFrame.n_chunks": [[229, "polars-dataframe-n-chunks"]], "polars.DataFrame.quantile": [[236, "polars-dataframe-quantile"]], "polars.DataFrame.slice": [[254, "polars-dataframe-slice"]], "polars.DataFrame.to_arrow": [[261, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_series": [[269, "polars-dataframe-to-series"]], "polars.DataFrame.unstack": [[276, "polars-dataframe-unstack"]], "polars.DataFrame.to_numpy": [[267, "polars-dataframe-to-numpy"]], "polars.DataFrame.sum": [[258, "polars-dataframe-sum"]], "polars.DataFrame.to_dict": [[262, "polars-dataframe-to-dict"]], "polars.DataFrame.var": [[279, "polars-dataframe-var"]], "polars.DataFrame.product": [[235, "polars-dataframe-product"]], "polars.DataFrame.shift": [[252, "polars-dataframe-shift"]], "polars.DataFrame.serialize": [[249, "polars-dataframe-serialize"]], "polars.DataFrame.schema": [[246, "polars-dataframe-schema"]], "polars.DataFrame.to_pandas": [[268, "polars-dataframe-to-pandas"]], "polars.DataFrame.select_seq": [[248, "polars-dataframe-select-seq"]], "polars.DataFrame.rows_by_key": [[244, "polars-dataframe-rows-by-key"]], "polars.DataFrame.n_unique": [[230, "polars-dataframe-n-unique"]], "polars.DataFrame.sort": [[255, "polars-dataframe-sort"]], "polars.DataFrame.std": [[257, "polars-dataframe-std"]], "polars.DataFrame.null_count": [[231, "polars-dataframe-null-count"]], "polars.DataFrame.shape": [[251, "polars-dataframe-shape"]], "polars.DataFrame.median": [[224, "polars-dataframe-median"]], "polars.DataFrame.min": [[227, "polars-dataframe-min"]], "polars.DataFrame.sample": [[245, "polars-dataframe-sample"]], "polars.DataFrame.to_jax": [[266, "polars-dataframe-to-jax"]], "polars.DataFrame.set_sorted": [[250, "polars-dataframe-set-sorted"]], "polars.DataFrame.partition_by": [[232, "polars-dataframe-partition-by"]], "polars.DataFrame.replace_column": [[239, "polars-dataframe-replace-column"]], "polars.DataFrame.row": [[242, "polars-dataframe-row"]], "polars.DataFrame.rows": [[243, "polars-dataframe-rows"]], "polars.DataFrame.select": [[247, "polars-dataframe-select"]], "polars.DataFrame.transpose": [[273, "polars-dataframe-transpose"]], "polars.DataFrame.to_init_repr": [[265, "polars-dataframe-to-init-repr"]], "polars.DataFrame.merge_sorted": [[226, "polars-dataframe-merge-sorted"]], "polars.DataFrame.rechunk": [[237, "polars-dataframe-rechunk"]], "polars.DataFrame.top_k": [[272, "polars-dataframe-top-k"]], "polars.last": [[728, "polars-last"]], "polars.n_unique": [[740, "polars-n-unique"]], "polars.sum_horizontal": [[754, "polars-sum-horizontal"]], "polars.min_horizontal": [[739, "polars-min-horizontal"]], "Conversion": [[781, "conversion"]], "Parallelization": [[781, "parallelization"]], "Random": [[781, "random"]], "StringCache": [[781, "stringcache"]], "polars.sql": [[749, "polars-sql"]], "Columns / names": [[767, "columns-names"]], "Name": [[775, "name"]], "polars.nth": [[741, "polars-nth"]], "polars.max_horizontal": [[734, "polars-max-horizontal"]], "polars.struct": [[752, "polars-struct"]], "polars.zeros": [[761, "polars-zeros"]], "polars.time": [[756, "polars-time"]], "polars.mean": [[735, "polars-mean"]], "polars.min": [[738, "polars-min"]], "Window": [[780, "window"]], "Python API reference": [[782, "python-api-reference"]], "polars.mean_horizontal": [[736, "polars-mean-horizontal"]], "polars.max": [[733, "polars-max"]], "polars.reduce": [[744, "polars-reduce"]], "polars.var": [[759, "polars-var"]], "polars.len": [[729, "polars-len"]], "polars.sql_expr": [[750, "polars-sql-expr"]], "polars.map_batches": [[731, "polars-map-batches"]], "polars.time_ranges": [[758, "polars-time-ranges"]], "polars.ones": [[742, "polars-ones"]], "polars.repeat": [[745, "polars-repeat"]], "polars.tail": [[755, "polars-tail"]], "polars.quantile": [[743, "polars-quantile"]], "polars.time_range": [[757, "polars-time-range"]], "polars.select": [[748, "polars-select"]], "polars.when": [[760, "polars-when"]], "polars.rolling_cov": [[747, "polars-rolling-cov"]], "polars.sum": [[753, "polars-sum"]], "polars.std": [[751, "polars-std"]], "polars.rolling_corr": [[746, "polars-rolling-corr"]], "Expressions": [[770, "expressions"]], "polars.median": [[737, "polars-median"]], "Operators": [[776, "operators"]], "Conjunction": [[776, "conjunction"]], "Comparison": [[776, "comparison"]], "Numeric": [[776, "numeric"], [313, "numeric"]], "polars.map_groups": [[732, "polars-map-groups"]], "Meta": [[772, "meta"]], "polars.col": [[766, "polars-col"]], "Input/output": [[783, "input-output"]], "Avro": [[783, "avro"]], "Clipboard": [[783, "clipboard"]], "CSV": [[783, "csv"]], "Database": [[783, "database"]], "Delta Lake": [[783, "delta-lake"]], "Excel / ODS": [[783, "excel-ods"]], "Feather / IPC": [[783, "feather-ipc"]], "Iceberg": [[783, "iceberg"]], "JSON": [[783, "json"]], "Parquet": [[783, "parquet"]], "PyArrow Datasets": [[783, "pyarrow-datasets"]], "polars.lit": [[730, "polars-lit"]], "polars.dataframe.group_by.GroupBy.max": [[295, "polars-dataframe-group-by-groupby-max"]], "Data types": [[313, "data-types"]], "DataType": [[313, "datatype"]], "Nested": [[313, "nested"]], "Other": [[313, "other"]], "polars.dataframe.group_by.GroupBy.sum": [[301, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.all": [[320, "polars-expr-all"]], "polars.Expr.arg_max": [[331, "polars-expr-arg-max"]], "polars.dataframe.group_by.GroupBy.tail": [[302, "polars-dataframe-group-by-groupby-tail"]], "polars.dataframe.group_by.GroupBy.mean": [[296, "polars-dataframe-group-by-groupby-mean"]], "polars.Expr.arcsinh": [[328, "polars-expr-arcsinh"]], "polars.Expr.arctan": [[329, "polars-expr-arctan"]], "polars.dataframe.group_by.GroupBy.len": [[293, "polars-dataframe-group-by-groupby-len"]], "polars.DataFrame.with_row_count": [[284, "polars-dataframe-with-row-count"]], "polars.Expr.arg_min": [[332, "polars-expr-arg-min"]], "polars.Expr.any": [[322, "polars-expr-any"]], "polars.Expr.arg_sort": [[333, "polars-expr-arg-sort"]], "polars.dataframe.group_by.GroupBy.first": [[290, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.n_unique": [[299, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.arcsin": [[327, "polars-expr-arcsin"]], "polars.Expr.arctanh": [[330, "polars-expr-arctanh"]], "polars.Expr.append": [[323, "polars-expr-append"]], "polars.dataframe.group_by.GroupBy.median": [[297, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.__iter__": [[286, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.with_row_index": [[285, "polars-dataframe-with-row-index"]], "polars.Expr.agg_groups": [[318, "polars-expr-agg-groups"]], "Style": [[312, "style"]], "polars.DataFrame.with_columns_seq": [[283, "polars-dataframe-with-columns-seq"]], "polars.Expr.arccos": [[325, "polars-expr-arccos"]], "DataFrame": [[308, "dataframe"]], "polars.dataframe.group_by.GroupBy.agg": [[287, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.count": [[289, "polars-dataframe-group-by-groupby-count"]], "Exceptions": [[314, "exceptions"]], "Errors": [[314, "errors"]], "Warnings": [[314, "warnings"]], "Panic": [[314, "panic"]], "polars.Expr.arg_true": [[334, "polars-expr-arg-true"]], "polars.Expr.and_": [[321, "polars-expr-and"]], "polars.Expr.arg_unique": [[335, "polars-expr-arg-unique"]], "polars.Expr.alias": [[319, "polars-expr-alias"]], "polars.Expr.approx_n_unique": [[324, "polars-expr-approx-n-unique"]], "polars.Expr.add": [[317, "polars-expr-add"]], "polars.dataframe.group_by.GroupBy.quantile": [[300, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.min": [[298, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.all": [[288, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.map_groups": [[294, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.head": [[291, "polars-dataframe-group-by-groupby-head"]], "polars.DataFrame.vstack": [[280, "polars-dataframe-vstack"]], "polars.dataframe.group_by.GroupBy.last": [[292, "polars-dataframe-group-by-groupby-last"]], "polars.DataFrame.width": [[281, "polars-dataframe-width"]], "polars.Expr.abs": [[316, "polars-expr-abs"]], "polars.Expr.arccosh": [[326, "polars-expr-arccosh"]], "polars.DataFrame.with_columns": [[282, "polars-dataframe-with-columns"]]}, "indexentries": {"load() (polars.config class method)": [[2, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[5, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[30, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[31, "polars.DataFrame.write_avro"]], "write_clipboard() (polars.dataframe method)": [[32, "polars.DataFrame.write_clipboard"]], "write_csv() (polars.dataframe method)": [[33, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[34, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[35, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[36, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[37, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[39, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[40, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[41, "polars.DataFrame.write_parquet"]], "sink_csv() (polars.lazyframe method)": [[42, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_ipc"]], "sink_ndjson() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ndjson"]], "sink_parquet() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_parquet"]], "stringcache (class in polars)": [[46, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__"]], "align_frames() (in module polars)": [[47, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[48, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[49, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[50, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[51, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[52, "polars.build_info"]], "collect_all() (in module polars)": [[53, "polars.collect_all"]], "collect_all_async() (in module polars)": [[54, "polars.collect_all_async"]], "concat() (in module polars)": [[55, "polars.concat"]], "array (class in polars.datatypes)": [[56, "polars.datatypes.Array"]], "__init__() (polars.datatypes.array method)": [[56, "polars.datatypes.Array.__init__"]], "binary (class in polars.datatypes)": [[57, "polars.datatypes.Binary"]], "__init__() (polars.datatypes.binary method)": [[57, "polars.datatypes.Binary.__init__"]], "boolean (class in polars.datatypes)": [[58, "polars.datatypes.Boolean"]], "__init__() (polars.datatypes.boolean method)": [[58, "polars.datatypes.Boolean.__init__"]], "categorical (class in polars.datatypes)": [[59, "polars.datatypes.Categorical"]], "__init__() (polars.datatypes.categorical method)": [[59, "polars.datatypes.Categorical.__init__"]], "datatype (class in polars.datatypes)": [[60, "polars.datatypes.DataType"]], "__init__() (polars.datatypes.datatype method)": [[60, "polars.datatypes.DataType.__init__"]], "date (class in polars.datatypes)": [[61, "polars.datatypes.Date"]], "__init__() (polars.datatypes.date method)": [[61, "polars.datatypes.Date.__init__"]], "datetime (class in polars.datatypes)": [[62, "polars.datatypes.Datetime"]], "__init__() (polars.datatypes.datetime method)": [[62, "polars.datatypes.Datetime.__init__"]], "decimal (class in polars.datatypes)": [[63, "polars.datatypes.Decimal"]], "__init__() (polars.datatypes.decimal method)": [[63, "polars.datatypes.Decimal.__init__"]], "duration (class in polars.datatypes)": [[64, "polars.datatypes.Duration"]], "__init__() (polars.datatypes.duration method)": [[64, "polars.datatypes.Duration.__init__"]], "enum (class in polars.datatypes)": [[65, "polars.datatypes.Enum"]], "__init__() (polars.datatypes.enum method)": [[65, "polars.datatypes.Enum.__init__"]], "float32 (class in polars.datatypes)": [[66, "polars.datatypes.Float32"]], "__init__() (polars.datatypes.float32 method)": [[66, "polars.datatypes.Float32.__init__"]], "float64 (class in polars.datatypes)": [[67, "polars.datatypes.Float64"]], "__init__() (polars.datatypes.float64 method)": [[67, "polars.datatypes.Float64.__init__"]], "int16 (class in polars.datatypes)": [[68, "polars.datatypes.Int16"]], "__init__() (polars.datatypes.int16 method)": [[68, "polars.datatypes.Int16.__init__"]], "int32 (class in polars.datatypes)": [[69, "polars.datatypes.Int32"]], "__init__() (polars.datatypes.int32 method)": [[69, "polars.datatypes.Int32.__init__"]], "int64 (class in polars.datatypes)": [[70, "polars.datatypes.Int64"]], "__init__() (polars.datatypes.int64 method)": [[70, "polars.datatypes.Int64.__init__"]], "int8 (class in polars.datatypes)": [[71, "polars.datatypes.Int8"]], "__init__() (polars.datatypes.int8 method)": [[71, "polars.datatypes.Int8.__init__"]], "list (class in polars.datatypes)": [[72, "polars.datatypes.List"]], "__init__() (polars.datatypes.list method)": [[72, "polars.datatypes.List.__init__"]], "null (class in polars.datatypes)": [[73, "polars.datatypes.Null"]], "__init__() (polars.datatypes.null method)": [[73, "polars.datatypes.Null.__init__"]], "object (class in polars.datatypes)": [[74, "polars.datatypes.Object"]], "__init__() (polars.datatypes.object method)": [[74, "polars.datatypes.Object.__init__"]], "string (class in polars.datatypes)": [[75, "polars.datatypes.String"]], "__init__() (polars.datatypes.string method)": [[75, "polars.datatypes.String.__init__"]], "struct (class in polars.datatypes)": [[76, "polars.datatypes.Struct"]], "__init__() (polars.datatypes.struct method)": [[76, "polars.datatypes.Struct.__init__"]], "time (class in polars.datatypes)": [[77, "polars.datatypes.Time"]], "__init__() (polars.datatypes.time method)": [[77, "polars.datatypes.Time.__init__"]], "uint16 (class in polars.datatypes)": [[78, "polars.datatypes.UInt16"]], "__init__() (polars.datatypes.uint16 method)": [[78, "polars.datatypes.UInt16.__init__"]], "uint32 (class in polars.datatypes)": [[79, "polars.datatypes.UInt32"]], "__init__() (polars.datatypes.uint32 method)": [[79, "polars.datatypes.UInt32.__init__"]], "uint64 (class in polars.datatypes)": [[80, "polars.datatypes.UInt64"]], "__init__() (polars.datatypes.uint64 method)": [[80, "polars.datatypes.UInt64.__init__"]], "uint8 (class in polars.datatypes)": [[81, "polars.datatypes.UInt8"]], "__init__() (polars.datatypes.uint8 method)": [[81, "polars.datatypes.UInt8.__init__"]], "unknown (class in polars.datatypes)": [[82, "polars.datatypes.Unknown"]], "__init__() (polars.datatypes.unknown method)": [[82, "polars.datatypes.Unknown.__init__"]], "utf8 (in module polars.datatypes)": [[83, "polars.datatypes.Utf8"]], "disable_string_cache() (in module polars)": [[84, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[85, "polars.enable_string_cache"]], "categoricalremappingwarning": [[86, "polars.exceptions.CategoricalRemappingWarning"]], "chronoformatwarning": [[87, "polars.exceptions.ChronoFormatWarning"]], "columnnotfounderror": [[88, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[89, "polars.exceptions.ComputeError"]], "customufuncwarning": [[90, "polars.exceptions.CustomUFuncWarning"]], "dataorientationwarning": [[91, "polars.exceptions.DataOrientationWarning"]], "duplicateerror": [[92, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError"]], "mapwithoutreturndtypewarning": [[94, "polars.exceptions.MapWithoutReturnDtypeWarning"]], "moduleupgraderequirederror": [[95, "polars.exceptions.ModuleUpgradeRequiredError"]], "nodataerror": [[96, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[97, "polars.exceptions.NoRowsReturnedError"]], "outofboundserror": [[98, "polars.exceptions.OutOfBoundsError"]], "panicexception": [[99, "polars.exceptions.PanicException"]], "parametercollisionerror": [[100, "polars.exceptions.ParameterCollisionError"]], "performancewarning": [[101, "polars.exceptions.PerformanceWarning"]], "polarserror": [[102, "polars.exceptions.PolarsError"]], "polarsinefficientmapwarning": [[103, "polars.exceptions.PolarsInefficientMapWarning"]], "polarswarning": [[104, "polars.exceptions.PolarsWarning"]], "rowserror": [[105, "polars.exceptions.RowsError"]], "sqlinterfaceerror": [[106, "polars.exceptions.SQLInterfaceError"]], "sqlsyntaxerror": [[107, "polars.exceptions.SQLSyntaxError"]], "schemaerror": [[108, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[109, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[110, "polars.exceptions.ShapeError"]], "stringcachemismatcherror": [[111, "polars.exceptions.StringCacheMismatchError"]], "structfieldnotfounderror": [[112, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[113, "polars.exceptions.TooManyRowsReturnedError"]], "unstablewarning": [[114, "polars.exceptions.UnstableWarning"]], "unsuitablesqlerror": [[115, "polars.exceptions.UnsuitableSQLError"]], "from_arrow() (in module polars)": [[116, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[117, "polars.from_dataframe"]], "from_dict() (in module polars)": [[118, "polars.from_dict"]], "from_dicts() (in module polars)": [[119, "polars.from_dicts"]], "from_numpy() (in module polars)": [[120, "polars.from_numpy"]], "from_pandas() (in module polars)": [[121, "polars.from_pandas"]], "from_records() (in module polars)": [[122, "polars.from_records"]], "from_repr() (in module polars)": [[123, "polars.from_repr"]], "get_index_type() (in module polars)": [[124, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[125, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "json_normalize() (in module polars)": [[126, "polars.json_normalize"]], "read_avro() (in module polars)": [[127, "polars.read_avro"]], "read_clipboard() (in module polars)": [[128, "polars.read_clipboard"]], "read_csv() (in module polars)": [[129, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[130, "polars.read_csv_batched"]], "read_database() (in module polars)": [[131, "polars.read_database"]], "read_database_uri() (in module polars)": [[132, "polars.read_database_uri"]], "read_delta() (in module polars)": [[133, "polars.read_delta"]], "read_excel() (in module polars)": [[134, "polars.read_excel"]], "read_ipc() (in module polars)": [[135, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[136, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[137, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[138, "polars.read_json"]], "read_ndjson() (in module polars)": [[139, "polars.read_ndjson"]], "read_ods() (in module polars)": [[140, "polars.read_ods"]], "read_parquet() (in module polars)": [[141, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[142, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[143, "polars.scan_csv"]], "scan_delta() (in module polars)": [[144, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[145, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[146, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[147, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[148, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[149, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[150, "polars.set_random_seed"]], "show_versions() (in module polars)": [[151, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[152, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[153, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[154, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[155, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[156, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[156, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[157, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[158, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[159, "polars.testing.parametric.dataframes"]], "dtypes() (in module polars.testing.parametric)": [[160, "polars.testing.parametric.dtypes"]], "lists() (in module polars.testing.parametric)": [[161, "polars.testing.parametric.lists"]], "load_profile() (in module polars.testing.parametric)": [[162, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.set_profile"]], "thread_pool_size() (in module polars)": [[165, "polars.thread_pool_size"]], "threadpool_size() (in module polars)": [[166, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[167, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[170, "polars.DataFrame.__dataframe__"]], "approx_n_unique() (polars.dataframe method)": [[171, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[172, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[173, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[174, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[175, "polars.DataFrame.clone"]], "collect_schema() (polars.dataframe method)": [[176, "polars.DataFrame.collect_schema"]], "columns (polars.dataframe property)": [[177, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[178, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[179, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[180, "polars.DataFrame.describe"]], "deserialize() (polars.dataframe class method)": [[181, "polars.DataFrame.deserialize"]], "drop() (polars.dataframe method)": [[182, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[183, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[184, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[185, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[186, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[187, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[188, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[189, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[190, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[191, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[192, "polars.DataFrame.filter"]], "flags (polars.dataframe property)": [[193, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[194, "polars.DataFrame.fold"]], "gather_every() (polars.dataframe method)": [[195, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[196, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[197, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[198, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[199, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[200, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[201, "polars.DataFrame.group_by_dynamic"]], "hash_rows() (polars.dataframe method)": [[202, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[203, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[204, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[205, "polars.DataFrame.hstack"]], "insert_column() (polars.dataframe method)": [[206, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[207, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[208, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[209, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[210, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[211, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[212, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[213, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[214, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[215, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[216, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[217, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[218, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[219, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[220, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[221, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[222, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[223, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[224, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[225, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[226, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[227, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[228, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[229, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[230, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[231, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[232, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[233, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[234, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[235, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[236, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[237, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[238, "polars.DataFrame.rename"]], "replace_column() (polars.dataframe method)": [[239, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[240, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[241, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[242, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[243, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[244, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[245, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[246, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[247, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[248, "polars.DataFrame.select_seq"]], "serialize() (polars.dataframe method)": [[249, "polars.DataFrame.serialize"]], "set_sorted() (polars.dataframe method)": [[250, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[251, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[252, "polars.DataFrame.shift"]], "shrink_to_fit() (polars.dataframe method)": [[253, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[254, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[255, "polars.DataFrame.sort"]], "sql() (polars.dataframe method)": [[256, "polars.DataFrame.sql"]], "std() (polars.dataframe method)": [[257, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[258, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[259, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[260, "polars.DataFrame.tail"]], "to_arrow() (polars.dataframe method)": [[261, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[262, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[263, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[264, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[265, "polars.DataFrame.to_init_repr"]], "to_jax() (polars.dataframe method)": [[266, "polars.DataFrame.to_jax"]], "to_numpy() (polars.dataframe method)": [[267, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[268, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[269, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[270, "polars.DataFrame.to_struct"]], "to_torch() (polars.dataframe method)": [[271, "polars.DataFrame.to_torch"]], "top_k() (polars.dataframe method)": [[272, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[273, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[274, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[275, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[276, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[277, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[278, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[279, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[280, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[281, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[282, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[283, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[284, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[285, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.all"]], "count() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.last"]], "len() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.len"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.tail"]], "style (polars.dataframe property)": [[312, "polars.DataFrame.style"]], "abs() (polars.expr method)": [[316, "polars.Expr.abs"]], "add() (polars.expr method)": [[317, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[318, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[319, "polars.Expr.alias"]], "all() (polars.expr method)": [[320, "polars.Expr.all"]], "and_() (polars.expr method)": [[321, "polars.Expr.and_"]], "any() (polars.expr method)": [[322, "polars.Expr.any"]], "append() (polars.expr method)": [[323, "polars.Expr.append"]], "approx_n_unique() (polars.expr method)": [[324, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[325, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[326, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[327, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[328, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[329, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[330, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[331, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[332, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[333, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[334, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[335, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[336, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[337, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[338, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[339, "polars.Expr.arr.arg_min"]], "contains() (polars.expr.arr method)": [[340, "polars.Expr.arr.contains"]], "count_matches() (polars.expr.arr method)": [[341, "polars.Expr.arr.count_matches"]], "explode() (polars.expr.arr method)": [[342, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[343, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[344, "polars.Expr.arr.get"]], "join() (polars.expr.arr method)": [[345, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[346, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[347, "polars.Expr.arr.max"]], "median() (polars.expr.arr method)": [[348, "polars.Expr.arr.median"]], "min() (polars.expr.arr method)": [[349, "polars.Expr.arr.min"]], "n_unique() (polars.expr.arr method)": [[350, "polars.Expr.arr.n_unique"]], "reverse() (polars.expr.arr method)": [[351, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[352, "polars.Expr.arr.shift"]], "sort() (polars.expr.arr method)": [[353, "polars.Expr.arr.sort"]], "std() (polars.expr.arr method)": [[354, "polars.Expr.arr.std"]], "sum() (polars.expr.arr method)": [[355, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[356, "polars.Expr.arr.to_list"]], "to_struct() (polars.expr.arr method)": [[357, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[358, "polars.Expr.arr.unique"]], "var() (polars.expr.arr method)": [[359, "polars.Expr.arr.var"]], "backward_fill() (polars.expr method)": [[360, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[361, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[362, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[363, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[364, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[365, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[366, "polars.Expr.bottom_k"]], "bottom_k_by() (polars.expr method)": [[367, "polars.Expr.bottom_k_by"]], "cast() (polars.expr method)": [[368, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[369, "polars.Expr.cat.get_categories"]], "cbrt() (polars.expr method)": [[370, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[371, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[372, "polars.Expr.clip"]], "cos() (polars.expr method)": [[373, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[374, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[375, "polars.Expr.cot"]], "count() (polars.expr method)": [[376, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[377, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[378, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[379, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[380, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[381, "polars.Expr.cum_sum"]], "cumulative_eval() (polars.expr method)": [[382, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[383, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[384, "polars.Expr.degrees"]], "deserialize() (polars.expr class method)": [[385, "polars.Expr.deserialize"]], "diff() (polars.expr method)": [[386, "polars.Expr.diff"]], "dot() (polars.expr method)": [[387, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[388, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[389, "polars.Expr.drop_nulls"]], "add_business_days() (polars.expr.dt method)": [[390, "polars.Expr.dt.add_business_days"]], "base_utc_offset() (polars.expr.dt method)": [[391, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[392, "polars.Expr.dt.cast_time_unit"]], "century() (polars.expr.dt method)": [[393, "polars.Expr.dt.century"]], "combine() (polars.expr.dt method)": [[394, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[395, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[396, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[397, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[398, "polars.Expr.dt.day"]], "dst_offset() (polars.expr.dt method)": [[399, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[400, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[401, "polars.Expr.dt.hour"]], "is_leap_year() (polars.expr.dt method)": [[402, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[403, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[404, "polars.Expr.dt.microsecond"]], "millennium() (polars.expr.dt method)": [[405, "polars.Expr.dt.millennium"]], "millisecond() (polars.expr.dt method)": [[406, "polars.Expr.dt.millisecond"]], "minute() (polars.expr.dt method)": [[407, "polars.Expr.dt.minute"]], "month() (polars.expr.dt method)": [[408, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[409, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[410, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[411, "polars.Expr.dt.nanosecond"]], "offset_by() (polars.expr.dt method)": [[412, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[413, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[414, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[415, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[416, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[417, "polars.Expr.dt.second"]], "strftime() (polars.expr.dt method)": [[418, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[419, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[420, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[421, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[422, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[423, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[424, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[425, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[426, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[427, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[428, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[429, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[430, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[431, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[432, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[433, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[434, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[435, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[436, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[437, "polars.Expr.ewm_mean"]], "ewm_mean_by() (polars.expr method)": [[438, "polars.Expr.ewm_mean_by"]], "ewm_std() (polars.expr method)": [[439, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[440, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[441, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[442, "polars.Expr.exp"]], "explode() (polars.expr method)": [[443, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[444, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[445, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[446, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[447, "polars.Expr.filter"]], "first() (polars.expr method)": [[448, "polars.Expr.first"]], "flatten() (polars.expr method)": [[449, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[450, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[451, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[452, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[453, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[454, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[455, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[456, "polars.Expr.ge"]], "get() (polars.expr method)": [[457, "polars.Expr.get"]], "gt() (polars.expr method)": [[458, "polars.Expr.gt"]], "has_nulls() (polars.expr method)": [[459, "polars.Expr.has_nulls"]], "hash() (polars.expr method)": [[460, "polars.Expr.hash"]], "head() (polars.expr method)": [[461, "polars.Expr.head"]], "hist() (polars.expr method)": [[462, "polars.Expr.hist"]], "implode() (polars.expr method)": [[463, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[464, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[465, "polars.Expr.interpolate"]], "interpolate_by() (polars.expr method)": [[466, "polars.Expr.interpolate_by"]], "is_between() (polars.expr method)": [[467, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[468, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[469, "polars.Expr.is_finite"]], "is_first_distinct() (polars.expr method)": [[470, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[471, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[472, "polars.Expr.is_infinite"]], "is_last_distinct() (polars.expr method)": [[473, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[474, "polars.Expr.is_nan"]], "is_not_nan() (polars.expr method)": [[475, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[476, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[477, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[478, "polars.Expr.is_unique"]], "kurtosis() (polars.expr method)": [[479, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[480, "polars.Expr.last"]], "le() (polars.expr method)": [[481, "polars.Expr.le"]], "len() (polars.expr method)": [[482, "polars.Expr.len"]], "limit() (polars.expr method)": [[483, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[484, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[485, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[486, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[487, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[488, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[489, "polars.Expr.list.contains"]], "count_matches() (polars.expr.list method)": [[490, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[491, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[492, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[493, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[494, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[495, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[496, "polars.Expr.list.gather"]], "gather_every() (polars.expr.list method)": [[497, "polars.Expr.list.gather_every"]], "get() (polars.expr.list method)": [[498, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[499, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[500, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[501, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[502, "polars.Expr.list.len"]], "max() (polars.expr.list method)": [[503, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[504, "polars.Expr.list.mean"]], "median() (polars.expr.list method)": [[505, "polars.Expr.list.median"]], "min() (polars.expr.list method)": [[506, "polars.Expr.list.min"]], "n_unique() (polars.expr.list method)": [[507, "polars.Expr.list.n_unique"]], "reverse() (polars.expr.list method)": [[508, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[509, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[510, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[511, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[512, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[513, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[514, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[515, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[516, "polars.Expr.list.sort"]], "std() (polars.expr.list method)": [[517, "polars.Expr.list.std"]], "sum() (polars.expr.list method)": [[518, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[519, "polars.Expr.list.tail"]], "to_array() (polars.expr.list method)": [[520, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[521, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[522, "polars.Expr.list.unique"]], "var() (polars.expr.list method)": [[523, "polars.Expr.list.var"]], "log() (polars.expr method)": [[524, "polars.Expr.log"]], "log10() (polars.expr method)": [[525, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[526, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[527, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[528, "polars.Expr.lt"]], "map_batches() (polars.expr method)": [[529, "polars.Expr.map_batches"]], "map_elements() (polars.expr method)": [[530, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[531, "polars.Expr.max"]], "mean() (polars.expr method)": [[532, "polars.Expr.mean"]], "median() (polars.expr method)": [[533, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[534, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[535, "polars.Expr.meta.has_multiple_outputs"]], "is_column_selection() (polars.expr.meta method)": [[536, "polars.Expr.meta.is_column_selection"]], "is_regex_projection() (polars.expr.meta method)": [[537, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[538, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[539, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[540, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[541, "polars.Expr.meta.root_names"]], "serialize() (polars.expr.meta method)": [[542, "polars.Expr.meta.serialize"]], "tree_format() (polars.expr.meta method)": [[543, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[544, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[545, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[546, "polars.Expr.min"]], "mod() (polars.expr method)": [[547, "polars.Expr.mod"]], "mode() (polars.expr method)": [[548, "polars.Expr.mode"]], "mul() (polars.expr method)": [[549, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[550, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[551, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[552, "polars.Expr.name.map"]], "map_fields() (polars.expr.name method)": [[553, "polars.Expr.name.map_fields"]], "prefix() (polars.expr.name method)": [[554, "polars.Expr.name.prefix"]], "prefix_fields() (polars.expr.name method)": [[555, "polars.Expr.name.prefix_fields"]], "suffix() (polars.expr.name method)": [[556, "polars.Expr.name.suffix"]], "suffix_fields() (polars.expr.name method)": [[557, "polars.Expr.name.suffix_fields"]], "to_lowercase() (polars.expr.name method)": [[558, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[559, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[560, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[561, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[562, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[563, "polars.Expr.ne_missing"]], "neg() (polars.expr method)": [[564, "polars.Expr.neg"]], "not_() (polars.expr method)": [[565, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[566, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[567, "polars.Expr.or_"]], "over() (polars.expr method)": [[568, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[569, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[570, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[571, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[572, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[573, "polars.Expr.pow"]], "product() (polars.expr method)": [[574, "polars.Expr.product"]], "qcut() (polars.expr method)": [[575, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[576, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[577, "polars.Expr.radians"]], "rank() (polars.expr method)": [[578, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[579, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[580, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[581, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[582, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[583, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[584, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[585, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[586, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[587, "polars.Expr.rolling"]], "rolling_map() (polars.expr method)": [[588, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[589, "polars.Expr.rolling_max"]], "rolling_max_by() (polars.expr method)": [[590, "polars.Expr.rolling_max_by"]], "rolling_mean() (polars.expr method)": [[591, "polars.Expr.rolling_mean"]], "rolling_mean_by() (polars.expr method)": [[592, "polars.Expr.rolling_mean_by"]], "rolling_median() (polars.expr method)": [[593, "polars.Expr.rolling_median"]], "rolling_median_by() (polars.expr method)": [[594, "polars.Expr.rolling_median_by"]], "rolling_min() (polars.expr method)": [[595, "polars.Expr.rolling_min"]], "rolling_min_by() (polars.expr method)": [[596, "polars.Expr.rolling_min_by"]], "rolling_quantile() (polars.expr method)": [[597, "polars.Expr.rolling_quantile"]], "rolling_quantile_by() (polars.expr method)": [[598, "polars.Expr.rolling_quantile_by"]], "rolling_skew() (polars.expr method)": [[599, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[600, "polars.Expr.rolling_std"]], "rolling_std_by() (polars.expr method)": [[601, "polars.Expr.rolling_std_by"]], "rolling_sum() (polars.expr method)": [[602, "polars.Expr.rolling_sum"]], "rolling_sum_by() (polars.expr method)": [[603, "polars.Expr.rolling_sum_by"]], "rolling_var() (polars.expr method)": [[604, "polars.Expr.rolling_var"]], "rolling_var_by() (polars.expr method)": [[605, "polars.Expr.rolling_var_by"]], "round() (polars.expr method)": [[606, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[607, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[608, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[609, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[610, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[611, "polars.Expr.shift"]], "shrink_dtype() (polars.expr method)": [[612, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[613, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[614, "polars.Expr.sign"]], "sin() (polars.expr method)": [[615, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[616, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[617, "polars.Expr.skew"]], "slice() (polars.expr method)": [[618, "polars.Expr.slice"]], "sort() (polars.expr method)": [[619, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[620, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[621, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[622, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[623, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[624, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[625, "polars.Expr.str.contains_any"]], "count_matches() (polars.expr.str method)": [[626, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[627, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[628, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[629, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[630, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[631, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[632, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[633, "polars.Expr.str.extract_groups"]], "find() (polars.expr.str method)": [[634, "polars.Expr.str.find"]], "head() (polars.expr.str method)": [[635, "polars.Expr.str.head"]], "join() (polars.expr.str method)": [[636, "polars.Expr.str.join"]], "json_decode() (polars.expr.str method)": [[637, "polars.Expr.str.json_decode"]], "json_path_match() (polars.expr.str method)": [[638, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[639, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[640, "polars.Expr.str.len_chars"]], "pad_end() (polars.expr.str method)": [[641, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[642, "polars.Expr.str.pad_start"]], "replace() (polars.expr.str method)": [[643, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[644, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[645, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[646, "polars.Expr.str.reverse"]], "slice() (polars.expr.str method)": [[647, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[648, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[649, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[650, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[651, "polars.Expr.str.starts_with"]], "strip_chars() (polars.expr.str method)": [[652, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[653, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[654, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[655, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[656, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[657, "polars.Expr.str.strptime"]], "tail() (polars.expr.str method)": [[658, "polars.Expr.str.tail"]], "to_date() (polars.expr.str method)": [[659, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[660, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[661, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[662, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[663, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[664, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[665, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[666, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[667, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[668, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[669, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[670, "polars.Expr.struct.rename_fields"]], "with_fields() (polars.expr.struct method)": [[671, "polars.Expr.struct.with_fields"]], "sub() (polars.expr method)": [[672, "polars.Expr.sub"]], "sum() (polars.expr method)": [[673, "polars.Expr.sum"]], "tail() (polars.expr method)": [[674, "polars.Expr.tail"]], "tan() (polars.expr method)": [[675, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[676, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[677, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[678, "polars.Expr.top_k"]], "top_k_by() (polars.expr method)": [[679, "polars.Expr.top_k_by"]], "truediv() (polars.expr method)": [[680, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[681, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[682, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[683, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[684, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[685, "polars.Expr.var"]], "where() (polars.expr method)": [[686, "polars.Expr.where"]], "xor() (polars.expr method)": [[687, "polars.Expr.xor"]], "all() (in module polars)": [[688, "polars.all"]], "all_horizontal() (in module polars)": [[689, "polars.all_horizontal"]], "any() (in module polars)": [[690, "polars.any"]], "any_horizontal() (in module polars)": [[691, "polars.any_horizontal"]], "approx_n_unique() (in module polars)": [[692, "polars.approx_n_unique"]], "arange() (in module polars)": [[693, "polars.arange"]], "arctan2() (in module polars)": [[694, "polars.arctan2"]], "arctan2d() (in module polars)": [[695, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[696, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[697, "polars.arg_where"]], "business_day_count() (in module polars)": [[698, "polars.business_day_count"]], "coalesce() (in module polars)": [[699, "polars.coalesce"]], "concat_list() (in module polars)": [[700, "polars.concat_list"]], "concat_str() (in module polars)": [[701, "polars.concat_str"]], "corr() (in module polars)": [[702, "polars.corr"]], "count() (in module polars)": [[703, "polars.count"]], "cov() (in module polars)": [[704, "polars.cov"]], "cum_count() (in module polars)": [[705, "polars.cum_count"]], "cum_fold() (in module polars)": [[706, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[707, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[708, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[709, "polars.cum_sum_horizontal"]], "date() (in module polars)": [[710, "polars.date"]], "date_range() (in module polars)": [[711, "polars.date_range"]], "date_ranges() (in module polars)": [[712, "polars.date_ranges"]], "datetime() (in module polars)": [[713, "polars.datetime"]], "datetime_range() (in module polars)": [[714, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[715, "polars.datetime_ranges"]], "duration() (in module polars)": [[716, "polars.duration"]], "element() (in module polars)": [[717, "polars.element"]], "exclude() (in module polars)": [[718, "polars.exclude"]], "first() (in module polars)": [[719, "polars.first"]], "fold() (in module polars)": [[720, "polars.fold"]], "format() (in module polars)": [[721, "polars.format"]], "from_epoch() (in module polars)": [[722, "polars.from_epoch"]], "groups() (in module polars)": [[723, "polars.groups"]], "head() (in module polars)": [[724, "polars.head"]], "implode() (in module polars)": [[725, "polars.implode"]], "int_range() (in module polars)": [[726, "polars.int_range"]], "int_ranges() (in module polars)": [[727, "polars.int_ranges"]], "last() (in module polars)": [[728, "polars.last"]], "len() (in module polars)": [[729, "polars.len"]], "lit() (in module polars)": [[730, "polars.lit"]], "map_batches() (in module polars)": [[731, "polars.map_batches"]], "map_groups() (in module polars)": [[732, "polars.map_groups"]], "max() (in module polars)": [[733, "polars.max"]], "max_horizontal() (in module polars)": [[734, "polars.max_horizontal"]], "mean() (in module polars)": [[735, "polars.mean"]], "mean_horizontal() (in module polars)": [[736, "polars.mean_horizontal"]], "median() (in module polars)": [[737, "polars.median"]], "min() (in module polars)": [[738, "polars.min"]], "min_horizontal() (in module polars)": [[739, "polars.min_horizontal"]], "n_unique() (in module polars)": [[740, "polars.n_unique"]], "nth() (in module polars)": [[741, "polars.nth"]], "ones() (in module polars)": [[742, "polars.ones"]], "quantile() (in module polars)": [[743, "polars.quantile"]], "reduce() (in module polars)": [[744, "polars.reduce"]], "repeat() (in module polars)": [[745, "polars.repeat"]], "rolling_corr() (in module polars)": [[746, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[747, "polars.rolling_cov"]], "select() (in module polars)": [[748, "polars.select"]], "sql() (in module polars)": [[749, "polars.sql"]], "sql_expr() (in module polars)": [[750, "polars.sql_expr"]], "std() (in module polars)": [[751, "polars.std"]], "struct() (in module polars)": [[752, "polars.struct"]], "sum() (in module polars)": [[753, "polars.sum"]], "sum_horizontal() (in module polars)": [[754, "polars.sum_horizontal"]], "tail() (in module polars)": [[755, "polars.tail"]], "time() (in module polars)": [[756, "polars.time"]], "time_range() (in module polars)": [[757, "polars.time_range"]], "time_ranges() (in module polars)": [[758, "polars.time_ranges"]], "var() (in module polars)": [[759, "polars.var"]], "when() (in module polars)": [[760, "polars.when"]], "zeros() (in module polars)": [[761, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[785, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[786, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[787, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[788, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[789, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[790, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[791, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[792, "polars.LazyFrame.collect_async"]], "collect_schema() (polars.lazyframe method)": [[793, "polars.LazyFrame.collect_schema"]], "columns (polars.lazyframe property)": [[794, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[795, "polars.LazyFrame.count"]], "describe() (polars.lazyframe method)": [[796, "polars.LazyFrame.describe"]], "deserialize() (polars.lazyframe class method)": [[797, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[798, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[799, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[800, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[801, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[802, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[803, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[804, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[805, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[806, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[807, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[808, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[809, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[810, "polars.LazyFrame.group_by_dynamic"]], "head() (polars.lazyframe method)": [[811, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[812, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[813, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[814, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[815, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[816, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[817, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[818, "polars.LazyFrame.limit"]], "map_batches() (polars.lazyframe method)": [[819, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[820, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[821, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[822, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[823, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[824, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[825, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[826, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[827, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[828, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[829, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[830, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[831, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[832, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[833, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[834, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[835, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[836, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[837, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[838, "polars.LazyFrame.shift"]], "show_graph() (polars.lazyframe method)": [[839, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[840, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[841, "polars.LazyFrame.sort"]], "sql() (polars.lazyframe method)": [[842, "polars.LazyFrame.sql"]], "std() (polars.lazyframe method)": [[843, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[844, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[845, "polars.LazyFrame.tail"]], "top_k() (polars.lazyframe method)": [[846, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[847, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[848, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[849, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[850, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[851, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[852, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[853, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[854, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[855, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[856, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[857, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[858, "polars.lazyframe.group_by.LazyGroupBy.all"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[859, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[860, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[861, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[862, "polars.lazyframe.group_by.LazyGroupBy.last"]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[863, "polars.lazyframe.group_by.LazyGroupBy.len"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[864, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[865, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[866, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[867, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[868, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[869, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[870, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[871, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[872, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "module": [[880, "module-polars.plugins"], [882, "module-polars.selectors"]], "polars.plugins": [[880, "module-polars.plugins"]], "register_plugin_function() (in module polars.plugins)": [[880, "polars.plugins.register_plugin_function"]], "all() (in module polars.selectors)": [[882, "polars.selectors.all"]], "alpha() (in module polars.selectors)": [[882, "polars.selectors.alpha"]], "alphanumeric() (in module polars.selectors)": [[882, "polars.selectors.alphanumeric"]], "binary() (in module polars.selectors)": [[882, "polars.selectors.binary"]], "boolean() (in module polars.selectors)": [[882, "polars.selectors.boolean"]], "by_dtype() (in module polars.selectors)": [[882, "polars.selectors.by_dtype"]], "by_index() (in module polars.selectors)": [[882, "polars.selectors.by_index"]], "by_name() (in module polars.selectors)": [[882, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[882, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[882, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[882, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[882, "polars.selectors.datetime"]], "decimal() (in module polars.selectors)": [[882, "polars.selectors.decimal"]], "digit() (in module polars.selectors)": [[882, "polars.selectors.digit"]], "duration() (in module polars.selectors)": [[882, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[882, "polars.selectors.ends_with"]], "exclude() (in module polars.selectors)": [[882, "polars.selectors.exclude"]], "expand_selector() (in module polars.selectors)": [[882, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[882, "polars.selectors.first"]], "float() (in module polars.selectors)": [[882, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[882, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[882, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[882, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[882, "polars.selectors.matches"]], "numeric() (in module polars.selectors)": [[882, "polars.selectors.numeric"]], "polars.selectors": [[882, "module-polars.selectors"]], "signed_integer() (in module polars.selectors)": [[882, "polars.selectors.signed_integer"]], "starts_with() (in module polars.selectors)": [[882, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[882, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[882, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[882, "polars.selectors.time"]], "unsigned_integer() (in module polars.selectors)": [[882, "polars.selectors.unsigned_integer"]], "abs() (polars.series method)": [[884, "polars.Series.abs"]], "alias() (polars.series method)": [[885, "polars.Series.alias"]], "all() (polars.series method)": [[886, "polars.Series.all"]], "any() (polars.series method)": [[887, "polars.Series.any"]], "append() (polars.series method)": [[888, "polars.Series.append"]], "arccos() (polars.series method)": [[889, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[890, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[891, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[892, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[893, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[894, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[895, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[896, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[897, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[898, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[899, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[900, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[901, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[902, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[903, "polars.Series.arr.arg_min"]], "contains() (polars.series.arr method)": [[904, "polars.Series.arr.contains"]], "count_matches() (polars.series.arr method)": [[905, "polars.Series.arr.count_matches"]], "explode() (polars.series.arr method)": [[906, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[907, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[908, "polars.Series.arr.get"]], "join() (polars.series.arr method)": [[909, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[910, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[911, "polars.Series.arr.max"]], "median() (polars.series.arr method)": [[912, "polars.Series.arr.median"]], "min() (polars.series.arr method)": [[913, "polars.Series.arr.min"]], "n_unique() (polars.series.arr method)": [[914, "polars.Series.arr.n_unique"]], "reverse() (polars.series.arr method)": [[915, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[916, "polars.Series.arr.shift"]], "sort() (polars.series.arr method)": [[917, "polars.Series.arr.sort"]], "std() (polars.series.arr method)": [[918, "polars.Series.arr.std"]], "sum() (polars.series.arr method)": [[919, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[920, "polars.Series.arr.to_list"]], "to_struct() (polars.series.arr method)": [[921, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[922, "polars.Series.arr.unique"]], "var() (polars.series.arr method)": [[923, "polars.Series.arr.var"]], "contains() (polars.series.bin method)": [[924, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[925, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[926, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[927, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[928, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[929, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[930, "polars.Series.cast"]], "get_categories() (polars.series.cat method)": [[931, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[932, "polars.Series.cat.is_local"]], "to_local() (polars.series.cat method)": [[933, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[934, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[935, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[936, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[937, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[938, "polars.Series.clear"]], "clip() (polars.series method)": [[939, "polars.Series.clip"]], "clone() (polars.series method)": [[940, "polars.Series.clone"]], "cos() (polars.series method)": [[941, "polars.Series.cos"]], "cosh() (polars.series method)": [[942, "polars.Series.cosh"]], "cot() (polars.series method)": [[943, "polars.Series.cot"]], "cum_count() (polars.series method)": [[944, "polars.Series.cum_count"]], "cum_max() (polars.series method)": [[945, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[946, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[947, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[948, "polars.Series.cum_sum"]], "cumulative_eval() (polars.series method)": [[949, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[950, "polars.Series.cut"]], "describe() (polars.series method)": [[951, "polars.Series.describe"]], "diff() (polars.series method)": [[952, "polars.Series.diff"]], "dot() (polars.series method)": [[953, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[954, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[955, "polars.Series.drop_nulls"]], "add_business_days() (polars.series.dt method)": [[956, "polars.Series.dt.add_business_days"]], "base_utc_offset() (polars.series.dt method)": [[957, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[958, "polars.Series.dt.cast_time_unit"]], "century() (polars.series.dt method)": [[959, "polars.Series.dt.century"]], "combine() (polars.series.dt method)": [[960, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[961, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[962, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[963, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[964, "polars.Series.dt.day"]], "dst_offset() (polars.series.dt method)": [[965, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[966, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[967, "polars.Series.dt.hour"]], "is_leap_year() (polars.series.dt method)": [[968, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[969, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[970, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[971, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[972, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[973, "polars.Series.dt.microsecond"]], "millennium() (polars.series.dt method)": [[974, "polars.Series.dt.millennium"]], "millisecond() (polars.series.dt method)": [[975, "polars.Series.dt.millisecond"]], "min() (polars.series.dt method)": [[976, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[977, "polars.Series.dt.minute"]], "month() (polars.series.dt method)": [[978, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[979, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[980, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[981, "polars.Series.dt.nanosecond"]], "offset_by() (polars.series.dt method)": [[982, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[983, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[984, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[985, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[986, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[987, "polars.Series.dt.second"]], "strftime() (polars.series.dt method)": [[988, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[989, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[990, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[991, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[992, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[993, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[994, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[995, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[996, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[997, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[998, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[999, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[1000, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[1001, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[1002, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[1003, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[1004, "polars.Series.dtype"]], "entropy() (polars.series method)": [[1005, "polars.Series.entropy"]], "equals() (polars.series method)": [[1006, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[1007, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[1008, "polars.Series.ewm_mean"]], "ewm_mean_by() (polars.series method)": [[1009, "polars.Series.ewm_mean_by"]], "ewm_std() (polars.series method)": [[1010, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[1011, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[1012, "polars.Series.exp"]], "explode() (polars.series method)": [[1013, "polars.Series.explode"]], "extend() (polars.series method)": [[1014, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1015, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1016, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1017, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1018, "polars.Series.filter"]], "flags (polars.series attribute)": [[1019, "polars.Series.flags"]], "floor() (polars.series method)": [[1020, "polars.Series.floor"]], "gather() (polars.series method)": [[1021, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1022, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1023, "polars.Series.get_chunks"]], "has_nulls() (polars.series method)": [[1024, "polars.Series.has_nulls"]], "has_validity() (polars.series method)": [[1025, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1026, "polars.Series.hash"]], "head() (polars.series method)": [[1027, "polars.Series.head"]], "hist() (polars.series method)": [[1028, "polars.Series.hist"]], "implode() (polars.series method)": [[1029, "polars.Series.implode"]], "interpolate() (polars.series method)": [[1030, "polars.Series.interpolate"]], "interpolate_by() (polars.series method)": [[1031, "polars.Series.interpolate_by"]], "is_between() (polars.series method)": [[1032, "polars.Series.is_between"]], "is_duplicated() (polars.series method)": [[1033, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1034, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1035, "polars.Series.is_finite"]], "is_first_distinct() (polars.series method)": [[1036, "polars.Series.is_first_distinct"]], "is_in() (polars.series method)": [[1037, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1038, "polars.Series.is_infinite"]], "is_last_distinct() (polars.series method)": [[1039, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1040, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1041, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1042, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1043, "polars.Series.is_null"]], "is_sorted() (polars.series method)": [[1044, "polars.Series.is_sorted"]], "is_unique() (polars.series method)": [[1045, "polars.Series.is_unique"]], "item() (polars.series method)": [[1046, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1047, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1048, "polars.Series.len"]], "limit() (polars.series method)": [[1049, "polars.Series.limit"]], "all() (polars.series.list method)": [[1050, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1051, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1052, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1053, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1054, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1055, "polars.Series.list.contains"]], "count_matches() (polars.series.list method)": [[1056, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1057, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1058, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1059, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1060, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1061, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1062, "polars.Series.list.gather"]], "gather_every() (polars.series.list method)": [[1063, "polars.Series.list.gather_every"]], "get() (polars.series.list method)": [[1064, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1065, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1066, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1067, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1068, "polars.Series.list.len"]], "max() (polars.series.list method)": [[1069, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1070, "polars.Series.list.mean"]], "median() (polars.series.list method)": [[1071, "polars.Series.list.median"]], "min() (polars.series.list method)": [[1072, "polars.Series.list.min"]], "n_unique() (polars.series.list method)": [[1073, "polars.Series.list.n_unique"]], "reverse() (polars.series.list method)": [[1074, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1075, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1076, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1077, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1078, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1079, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1080, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1081, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1082, "polars.Series.list.sort"]], "std() (polars.series.list method)": [[1083, "polars.Series.list.std"]], "sum() (polars.series.list method)": [[1084, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1085, "polars.Series.list.tail"]], "to_array() (polars.series.list method)": [[1086, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1087, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1088, "polars.Series.list.unique"]], "var() (polars.series.list method)": [[1089, "polars.Series.list.var"]], "log() (polars.series method)": [[1090, "polars.Series.log"]], "log10() (polars.series method)": [[1091, "polars.Series.log10"]], "log1p() (polars.series method)": [[1092, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1093, "polars.Series.lower_bound"]], "map_elements() (polars.series method)": [[1094, "polars.Series.map_elements"]], "max() (polars.series method)": [[1095, "polars.Series.max"]], "mean() (polars.series method)": [[1096, "polars.Series.mean"]], "median() (polars.series method)": [[1097, "polars.Series.median"]], "min() (polars.series method)": [[1098, "polars.Series.min"]], "mode() (polars.series method)": [[1099, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1100, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1101, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1102, "polars.Series.name"]], "nan_max() (polars.series method)": [[1103, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1104, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1105, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1106, "polars.Series.not_"]], "null_count() (polars.series method)": [[1107, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1108, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1109, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1110, "polars.Series.peak_min"]], "product() (polars.series method)": [[1111, "polars.Series.product"]], "qcut() (polars.series method)": [[1112, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1113, "polars.Series.quantile"]], "rank() (polars.series method)": [[1114, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1115, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1116, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1117, "polars.Series.rename"]], "replace() (polars.series method)": [[1118, "polars.Series.replace"]], "reshape() (polars.series method)": [[1119, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1120, "polars.Series.reverse"]], "rle() (polars.series method)": [[1121, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1122, "polars.Series.rle_id"]], "rolling_map() (polars.series method)": [[1123, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1124, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1125, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1126, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1127, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1128, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1129, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1130, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1131, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1132, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1133, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1134, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1135, "polars.Series.sample"]], "scatter() (polars.series method)": [[1136, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1137, "polars.Series.search_sorted"]], "set() (polars.series method)": [[1138, "polars.Series.set"]], "set_sorted() (polars.series method)": [[1139, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1140, "polars.Series.shape"]], "shift() (polars.series method)": [[1141, "polars.Series.shift"]], "shrink_dtype() (polars.series method)": [[1142, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1143, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1144, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1145, "polars.Series.sign"]], "sin() (polars.series method)": [[1146, "polars.Series.sin"]], "sinh() (polars.series method)": [[1147, "polars.Series.sinh"]], "skew() (polars.series method)": [[1148, "polars.Series.skew"]], "slice() (polars.series method)": [[1149, "polars.Series.slice"]], "sort() (polars.series method)": [[1150, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1151, "polars.Series.sqrt"]], "std() (polars.series method)": [[1152, "polars.Series.std"]], "concat() (polars.series.str method)": [[1153, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1154, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1155, "polars.Series.str.contains_any"]], "count_matches() (polars.series.str method)": [[1156, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1157, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1158, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1159, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1160, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1161, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1162, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1163, "polars.Series.str.extract_groups"]], "find() (polars.series.str method)": [[1164, "polars.Series.str.find"]], "head() (polars.series.str method)": [[1165, "polars.Series.str.head"]], "join() (polars.series.str method)": [[1166, "polars.Series.str.join"]], "json_decode() (polars.series.str method)": [[1167, "polars.Series.str.json_decode"]], "json_path_match() (polars.series.str method)": [[1168, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1169, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1170, "polars.Series.str.len_chars"]], "pad_end() (polars.series.str method)": [[1171, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1172, "polars.Series.str.pad_start"]], "replace() (polars.series.str method)": [[1173, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1174, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1175, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1176, "polars.Series.str.reverse"]], "slice() (polars.series.str method)": [[1177, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1178, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1179, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1180, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1181, "polars.Series.str.starts_with"]], "strip_chars() (polars.series.str method)": [[1182, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1183, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1184, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1185, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1186, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1187, "polars.Series.str.strptime"]], "tail() (polars.series.str method)": [[1188, "polars.Series.str.tail"]], "to_date() (polars.series.str method)": [[1189, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1190, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1191, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1192, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1193, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1194, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1195, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1196, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1197, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1198, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1199, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1200, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1201, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1202, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1203, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1204, "polars.Series.sum"]], "tail() (polars.series method)": [[1205, "polars.Series.tail"]], "tan() (polars.series method)": [[1206, "polars.Series.tan"]], "tanh() (polars.series method)": [[1207, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1208, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1209, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1210, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1211, "polars.Series.to_init_repr"]], "to_jax() (polars.series method)": [[1212, "polars.Series.to_jax"]], "to_list() (polars.series method)": [[1213, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1214, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1215, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1216, "polars.Series.to_physical"]], "to_torch() (polars.series method)": [[1217, "polars.Series.to_torch"]], "top_k() (polars.series method)": [[1218, "polars.Series.top_k"]], "unique() (polars.series method)": [[1219, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1220, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1221, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1222, "polars.Series.value_counts"]], "var() (polars.series method)": [[1223, "polars.Series.var"]], "zip_with() (polars.series method)": [[1224, "polars.Series.zip_with"]], "execute() (polars.sqlcontext method)": [[1241, "polars.SQLContext.execute"]], "execute_global() (polars.sqlcontext class method)": [[1242, "polars.SQLContext.execute_global"]], "register() (polars.sqlcontext method)": [[1243, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[1244, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[1245, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[1246, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[1247, "polars.SQLContext.unregister"]], "sqlcontext (class in polars)": [[1258, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1258, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1258, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1258, "polars.SQLContext.__init__"]]}})